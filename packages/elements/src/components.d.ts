/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonColorScheme, ButtonType, ChipSetType, ChipSurface, ColorScheme, HorizontalLocation, ImageDecodingTypes, Locations, NavDrawerAnchor, NavDrawerVariant, SnackbarType, SpinnerType, SurfaceType, TooltipTrigger, VerticalLocation } from "./components/types";
import { PickerTypeKeys } from "./components/ino-datepicker/picker-factory";
import { Placement } from "tippy.js";
export namespace Components {
    interface InoButton {
        /**
          * Sets the autofocus for this element.
         */
        "autoFocus"?: boolean;
        /**
          * The name of the color scheme which is used to style the background and outline of this component. Possible values: `primary` (default),  `secondary`, `grey`, `white`. `white` and `grey` can only be used in combination with the `outline` fill-option!
         */
        "colorScheme"?: ButtonColorScheme;
        /**
          * Makes the button text and container slightly smaller.
         */
        "dense"?: boolean;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Styles the button to have the edge on the top-right instead of the top-left
         */
        "edgeMirrored"?: boolean;
        /**
          * The fill type of this element. Possible values: `solid` (default), `outline`, `inverse`.
         */
        "fill"?: SurfaceType;
        /**
          * The form id this element origins to.
         */
        "form"?: string;
        /**
          * Shows an infinite loading spinner and prevents further clicks.
         */
        "loading"?: boolean;
        /**
          * The name of the element.
         */
        "name"?: string;
        /**
          * The type of this form.  Can either be `button`, `submit` or `reset`.
         */
        "type"?: ButtonType;
    }
    interface InoCard {
        /**
          * Disables the hover effect if true
         */
        "disableElevation": boolean;
        /**
          * Selects the card and displays a check mark icon on top of the card
         */
        "selected": boolean;
    }
    interface InoCarousel {
        /**
          * Enables the slide animation
         */
        "animated": boolean;
        /**
          * Enables autoplay which causes slides to be changed automatically
         */
        "autoplay": boolean;
        /**
          * Hides the arrow buttons
         */
        "hideButtons": boolean;
        /**
          * Restarts playback from the first slide upon reaching the last slide
         */
        "infinite": boolean;
        /**
          * Sets the intermission between two slides (Unit: ms)
         */
        "intermission": number;
        /**
          * Enables reverse playback of the slides
         */
        "reverse": boolean;
        /**
          * Optional group value to manually manage the displayed slide
         */
        "value"?: any;
    }
    interface InoCarouselSlide {
        /**
          * Link to the image
         */
        "src": string;
        /**
          * Value of the slide
         */
        "value": any;
    }
    interface InoCheckbox {
        /**
          * Marks this element as checked. (**unmanaged**)
         */
        "checked"?: boolean;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Marks this element as indeterminate (**unmanaged**)
         */
        "indeterminate"?: boolean;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * Styles the checkbox as a selection variant that has a larger radius. While checkboxes are mainly used in lists, the selection should be used as a single, independent UI element. The indeterminate state is not supported here.
         */
        "selection"?: boolean;
        /**
          * The value of this element.
         */
        "value"?: string;
    }
    interface InoChip {
        /**
          * The name of the color scheme which is used to style the background and outline of this component.
         */
        "colorScheme": ColorScheme | 'default';
        /**
          * The fill type of this element.
         */
        "fill": ChipSurface;
        /**
          * Prepends an icon to the chip label.
          * @deprecated This property is deprecated and will be removed with the next major release. Instead, use the icon-leading slot.
         */
        "icon"?: string;
        /**
          * The label of this chip (**required**).
         */
        "label"?: string;
        /**
          * Adds a close icon on the right side of this chip.  If applied, emits the `removeChip` event.
         */
        "removable": boolean;
        /**
          * Adds a checkmark if the icon is selected.
         */
        "selectable": boolean;
        /**
          * Marks this element as selected.
         */
        "selected": boolean;
        /**
          * The value of this chip.  **Required** for chips as part of sets of type `filter` or `choice`.
         */
        "value"?: string;
    }
    interface InoChipSet {
        /**
          * The type of this chip set that indicates its behavior.  `choice`: Single selection from a set of options `filter`: Multiple selection from a set of options `input`: Enable user input by converting text into chips
         */
        "type"?: ChipSetType;
    }
    interface InoControlItem {
        /**
          * Styles the row in an activated style.  In contrast to `selected`, use this for only one item and to mark it as permanently activated.
         */
        "activated"?: boolean;
        /**
          * Marks this element as checked. (**unmanaged**)
         */
        "checked"?: boolean;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Marks this element as indeterminate (**unmanaged**) Checkbox only
         */
        "indeterminate"?: boolean;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * The type of control element
         */
        "role": 'checkbox' | 'radio';
        /**
          * Sets the secondary text of this list item.  Requires `two-lines` on the parent `ino-list` element.
         */
        "secondaryText"?: string;
        /**
          * Styles the row in a selected style.  In contrast to `activated`, use this option to select one or multiple items that are likely to change soon.
         */
        "selected"?: boolean;
        /**
          * The primary text of this list item (required).
         */
        "text": string;
        /**
          * Places the checkbox at the end of the item
         */
        "trailing"?: boolean;
        /**
          * The value of this element.
         */
        "value"?: string;
    }
    interface InoDatepicker {
        /**
          * Autofocuses this element.
         */
        "autoFocus"?: boolean;
        /**
          * A string to change the date format. Possible values are listed [here](https://flatpickr.js.org/formatting/). The default value is `d-m-Y` which accepts values like `01-01-2019`.
         */
        "dateFormat"?: string;
        /**
          * A string/array containing the initial date of the datepicker overlay. If you're using `inoRange = true` provide an array. If a `value` is given, this will be ignored.
         */
        "defaultDate"?: string | string[];
        /**
          * A number containing the initial hour in the date-time picker overlay. If a `value` is given, this will be ignored.
         */
        "defaultHour": number;
        /**
          * A number containing the initial minute in the date-time picker overlay. If a `value` is given, this will be ignored.
         */
        "defaultMinute"?: number;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * The helper text.
         */
        "helper"?: string;
        /**
          * Displays the helper permanently.
         */
        "helperPersistent"?: boolean;
        /**
          * Styles the helper text as a validation message.
         */
        "helperValidation"?: boolean;
        /**
          * Adjusts the step for the hour input (incl. scrolling) Default is 1
         */
        "hourStep": number;
        /**
          * Defines the label for this element.
         */
        "label"?: string;
        /**
          * The maximum date that a user can pick to (inclusive).
         */
        "max"?: string;
        /**
          * The minimum date that a user can start picking from (inclusive).
         */
        "min"?: string;
        /**
          * Adjusts the step for the minute input (incl. scrolling) Default is 5
         */
        "minuteStep": number;
        /**
          * The input name of this element.
         */
        "name"?: string;
        /**
          * Styles the datepicker as outlined element.
         */
        "outline"?: boolean;
        /**
          * If true, enables the user to choose two dates as an interval. Only works with `type="date"`
         */
        "range"?: boolean;
        /**
          * Marks this element as required.
         */
        "required"?: boolean;
        /**
          * If true, an *optional* message is displayed if not required, otherwise a * marker is displayed if required
         */
        "showLabelHint"?: boolean;
        /**
          * If true, displays time picker in 12 hour mode with AM/PM selection.
         */
        "twelveHourTime"?: boolean;
        /**
          * Selects the correct picker corresponding to the given type.
         */
        "type"?: PickerTypeKeys;
        /**
          * The currently selected date shown in the input field **unmanaged**. The given value will not be formatted as date.
         */
        "value"?: string;
    }
    interface InoDialog {
        /**
          * Opens the dialog if set to true
         */
        "open": boolean;
    }
    interface InoFab {
        /**
          * Disables the button.
         */
        "disabled": boolean;
        /**
          * The position of the edge.
         */
        "edgePosition": | 'top-right'
    | 'top-left'
    | 'bottom-right'
    | 'bottom-left'
    | 'none';
        /**
          * Optional, modifies the FAB to wider size which includes a text label.
         */
        "extended": boolean;
        /**
          * Adds an icon to the Fab.
          * @deprecated This property is deprecated and will be removed with the next major release. Instead, use the `icon-leading` slot.
         */
        "icon"?: string;
        /**
          * Optional, for the text label. Applicable only for Extended FAB.
         */
        "label"?: string;
        /**
          * Optional, modifies the FAB to a smaller size
         */
        "mini": boolean;
        /**
          * The placement of the tooltip which will be displayed when the button is not extended. Use `none`, if you don't want a tooltip to be displayed.
         */
        "tooltipPlacement": Placement | 'none';
    }
    interface InoFabSet {
        /**
          * The direction of the speed dial. Possible values: `top` (default), `bottom`, `right`, `left`.
         */
        "dialDirection": Locations;
        /**
          * The side where the Fab is displayed. Possible values: `right`, `left` (default).
         */
        "leftRightLocation": HorizontalLocation;
        /**
          * Opens the dial (**uncontrolled**)
         */
        "openDial": boolean;
        /**
          * The side where the Fab is displayed. Possible values: `top`, `bottom` (default).
         */
        "topBottomLocation": VerticalLocation;
    }
    interface InoFormRow {
        /**
          * The label for this form row which describes the form element.
         */
        "label"?: string;
        /**
          * An indicator which marks the contents of the form row as mandatory. If you use this make sure you also check for the values in your application logic.
         */
        "mandatory"?: boolean;
    }
    interface InoHeader {
        /**
          * The text of this header
         */
        "text": string;
    }
    interface InoIcon {
        /**
          * Makes the icon clickable and allows to listen to the `clickEl` event.
         */
        "clickable"?: boolean;
        /**
          * Colors the icon in the global secondary color
         */
        "colorSecondary"?: boolean;
        /**
          * The name of the icon of this element or an URL.
         */
        "icon"?: string;
        /**
          * Specifies the exact `src` of an SVG file to use.
         */
        "src"?: string;
        /**
          * Sets a meaningful svg title for assistive technologies.
         */
        "svgTitle"?: string;
    }
    interface InoIconButton {
        /**
          * Marks the icon button as activated.  Useful in cases where an external state controls the icon button activation. Makes the component **managed**.
         */
        "activated"?: boolean;
        /**
          * Sets the autofocus for this element.
         */
        "autoFocus"?: boolean;
        /**
          * The name of the color scheme which is used to style the background and outline of this component. Possible values: `primary` (default),  `secondary`, `success`, `warning`, `error`, `light`, `dark`.
         */
        "colorScheme"?: ColorScheme;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Styles this element as filled icon button with the `ino-color-scheme` as background color.
         */
        "filled"?: boolean;
        /**
          * The name of the icon of this element.
         */
        "icon"?: string;
        /**
          * The type of this form.  Can either be `button`, `submit` or `reset`.
         */
        "type"?: ButtonType;
    }
    interface InoImg {
        /**
          * The alternative text of this image.
         */
        "alt"?: string;
        /**
          * The decoding method of the native html input element. Can either be `async`, `auto` or `sync`.
         */
        "decoding"?: ImageDecodingTypes;
        /**
          * Icon used for fallback image if image can not be loaded
         */
        "fallbackIcon": string;
        /**
          * The fixed height of this image.
         */
        "height"?: number;
        /**
          * Indicates that the image is a part of an image list component
         */
        "imgListItem": boolean;
        /**
          * Sets the label of the image. Note: Only works if image is part of an ino-img-list component.
         */
        "label"?: string;
        /**
          * The ratio height for this image (default = 1). Use this attribute together with `ratio-width` to reserve a space for the image during rendering and to prevent jumping contents.
         */
        "ratioHeight"?: number;
        /**
          * The ratio width of this image (default = 1). Use this attribute together with `ratio-height` to reserve a space for the image during rendering and to prevent jumping contents.
         */
        "ratioWidth"?: number;
        /**
          * If true, styles the image with rounded borders.
         */
        "rounded"?: boolean;
        /**
          * A set of rules to specify the usage of images sources that are defined in the `srcset` attribute.
         */
        "sizes"?: string;
        /**
          * The source of this image element.
         */
        "src"?: string;
        /**
          * A set of sources of this image for different viewports or devices.
         */
        "srcset"?: string;
        /**
          * An ID referencing to a defined map element for this image.
         */
        "usemap"?: string;
        /**
          * The fixed of the image.
         */
        "width"?: number;
    }
    interface InoImgList {
        /**
          * Encapsulates the label of all img-list-items within the image
         */
        "encloseLabel": boolean;
        /**
          * Enables the masonry image list variant, which allows the images to be any combination of aspect ratios.
         */
        "masonry": boolean;
    }
    interface InoInput {
        /**
          * The autofocus of this element.
         */
        "autoFocus"?: boolean;
        /**
          * The autocomplete property of this element.
         */
        "autocomplete"?: string;
        /**
          * The id of the datalist child
         */
        "dataList"?: string;
        /**
          * The number of decimal places. Only works on 'text' type input.
         */
        "decimalPlaces"?: number;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Displays the input field as invalid if set to true. If the property is not set or set to false, the validation is handled by the `pattern` property. This functionality might be useful if the input validation is (additionally) handled by the backend.
         */
        "error"?: boolean;
        /**
          * Returns the native input element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * The optional helper text.
         */
        "helper"?: string;
        /**
          * Displays the number of characters. The maxlength-property must be set. This helper text will be displayed persistently.
         */
        "helperCharacterCounter"?: boolean;
        /**
          * Displays the helper permanently.
         */
        "helperPersistent"?: boolean;
        /**
          * Styles the helper text as a validation message.
         */
        "helperValidation"?: boolean;
        /**
          * The optional floating label of this input field.
         */
        "label"?: string;
        /**
          * The max value of this element.
         */
        "max"?: string;
        /**
          * Limits the number of possible characters to the given number
         */
        "maxlength"?: number;
        /**
          * The min value of this element.
         */
        "min"?: string;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * Styles the input field as outlined element.
         */
        "outline"?: boolean;
        /**
          * The validation pattern of this element.
         */
        "pattern"?: string;
        /**
          * The placeholder of this element.
         */
        "placeholder"?: string;
        /**
          * Marks this element as required.
         */
        "required"?: boolean;
        /**
          * If true, an *optional* message is displayed if not required, otherwise a * marker is displayed if required
         */
        "showLabelHint"?: boolean;
        /**
          * The size of this element.
         */
        "size"?: number;
        /**
          * The step value of this element. Use `any` for decimal numbers
         */
        "step"?: number | 'any';
        /**
          * Shows a dot as a thousands separator. Only works on 'text' type input.
         */
        "thousandsSeparator"?: boolean;
        /**
          * The type of this element (default = text).
         */
        "type"?: string;
        /**
          * Displays the given unit at the end of the input field.
         */
        "unit": string;
        /**
          * The value of this element. (**unmanaged**)
         */
        "value": string;
    }
    interface InoInputFile {
        /**
          * The types of files accepted by the server.
         */
        "accept"?: string;
        /**
          * The autofocus of this element.
         */
        "autoFocus"?: boolean;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Enables drag-and-drop file input
         */
        "dragAndDrop"?: boolean;
        /**
          * Sets the secondary text of the drag and drop window
         */
        "dragAndDropSecondaryText"?: string;
        /**
          * Sets the primary text of the drag and drop window
         */
        "dragAndDropText"?: string;
        /**
          * Sets the label of the select files button.
         */
        "label"?: string;
        /**
          * Indicates whether the user can enter one or more values.
         */
        "multiple"?: boolean;
        /**
          * The name of this input field.
         */
        "name"?: string;
        /**
          * Marks this element as required.
         */
        "required"?: boolean;
    }
    interface InoLabel {
        /**
          * Colors the label in an light grey to indicate the disabled status for this element
         */
        "disabled": boolean;
        /**
          * Styles the label in an outlined style
         */
        "outline": boolean;
        /**
          * Appends * to the label to make it appear as an required input in a form
         */
        "required"?: boolean;
        /**
          * Shows a "optional" message, when not `required`; Shows a * mark, when `required`
         */
        "showHint"?: boolean;
        /**
          * The text of the label itself
         */
        "text": string;
    }
    interface InoList {
        /**
          * Configures the leading tiles of each row to display images instead of icons. This will make the graphics of the list items larger.
         */
        "avatar"?: boolean;
        /**
          * Styles the list more dense, making it appear more compact.
         */
        "dense"?: boolean;
        /**
          * Marks this element as list with items having two lines.
         */
        "twoLines"?: boolean;
    }
    interface InoListDivider {
        /**
          * Marks the divider as a separator between two `ino-list` instead of `ino-list-item` elements.
         */
        "betweenLists"?: boolean;
        /**
          * Increases leading margin to match leading column in `ino-list-item`.  Only applicable if `betweenList` is `false`.
         */
        "inset"?: boolean;
        /**
          * Increases margin on each side of the divider to match meta content in `ino-list-item`.  Only applicable if `betweenList` is `false`.
         */
        "padded"?: boolean;
    }
    interface InoListItem {
        /**
          * Styles the row in an activated style.  In contrast to `selected`, use this for only one item and to mark it as permantently activated.
         */
        "activated"?: boolean;
        /**
          * Styles the row in a disabled style.
         */
        "disabled"?: boolean;
        /**
          * Sets the secondary text of this list item.  Requires `two-lines` on the parent `ino-list` element.
         */
        "secondaryText"?: string;
        /**
          * Styles the row in a selected style.  In contrast to `activated`, use this option to select one or multiple items that are likely to change soon.
         */
        "selected"?: boolean;
        /**
          * The primary text of this list item.
         */
        "text"?: string;
    }
    interface InoMenu {
        /**
          * Determines the position of the opened menu. Usually, the default value (`auto`) will work just fine. Use this if the positioning is off for some reason.
         */
        "placement": Placement;
    }
    interface InoNavDrawer {
        /**
          * Side from which the drawer will appear. Possible values: `left` (default), `right`.
         */
        "anchor"?: NavDrawerAnchor;
        /**
          * Marks this element as open. (**unmanaged**)
         */
        "open"?: boolean;
        /**
          * The variant to use for the drawer Possible values: `docked` (default), `dismissible`, `modal`.
         */
        "variant"?: NavDrawerVariant;
    }
    interface InoNavItem {
        /**
          * Styles the row in an activated style.  Use this for only one item and to mark it as permanently activated.
         */
        "activated"?: boolean;
        /**
          * Styles the row in a disabled style.
         */
        "disabled"?: boolean;
        /**
          * The secondary text of this list item used in a two-lined list.
         */
        "subText"?: string;
        /**
          * The text of this list item.
         */
        "text"?: string;
    }
    interface InoOption {
        /**
          * Disables the option
         */
        "disabled"?: boolean;
        /**
          * Selects the option
         */
        "selected"?: boolean;
        /**
          * Value of the option
         */
        "value": string;
    }
    interface InoOptionGroup {
        /**
          * Label of the group. If not set, this component serves as a wrapper component for dynamically added `ino-options`. When using react and vue, an issue exists with slots and the virtual DOM. Read more about it [here](https://github.com/ionic-team/stencil/issues/2259).
         */
        "label"?: string;
    }
    interface InoPopover {
        /**
          * Sets the color scheme of the popup Valid options include: 'primary', 'secondary', 'light', 'transparent'
         */
        "colorScheme": 'primary' | 'secondary' | 'light' | 'transparent';
        /**
          * Used to indicate if the popover should be controlled by itself (`false`) or manually by the `visible` property (`true`)
         */
        "controlled": boolean;
        /**
          * Displaces the popover away from, or toward, the anchor element in the direction of its placement. A positive number displaces it further away, while a negative number lets it overlap the anchor.
         */
        "distance"?: number;
        /**
          * The target id the popover belongs to. If not given, the popover is attached to the element provided in the named slot (`popover-trigger`) or the parent component if a slot element does not exist.
         */
        "for"?: string;
        /**
          * Returns the internally used tippy.js instance For more informations see: https://atomiks.github.io/tippyjs/
         */
        "getTippyInstance": () => Promise<any>;
        /**
          * Use this if you want to interact with the popover content (e.g. button clicks)
         */
        "interactive"?: boolean;
        /**
          * The placement of this popover. Accepted values: `top(-start, -end)`, `right(-start, -end)`, `bottom(-start, -end)`, `left(-start, -end)`
         */
        "placement": Placement;
        /**
          * The trigger to show the tooltip - either click, hover or focus. Multiple triggers are possible by separating them with a space.
         */
        "trigger": Exclude<TooltipTrigger, 'manual'>;
        /**
          * Programmatically show or hide the popover. Can only be used in controlled mode (see property `controlled`). Use the `visibleChanged` to sync the popovers' visibility state with yours.
         */
        "visible"?: boolean;
    }
    interface InoProgressBar {
        /**
          * Sets the buffer progress
         */
        "buffer"?: number;
        /**
          * Indicates whether the state of the progress bar is indeterminate
         */
        "indeterminate"?: boolean;
        /**
          * Sets the label of the progress bar
         */
        "label"?: string;
        /**
          * Sets the progress of the progress bar. Should always be between 0 and 1
         */
        "progress"?: number;
        /**
          * Reverses the progress bar
         */
        "reversed"?: boolean;
    }
    interface InoRadio {
        /**
          * Initially marks this element as checked. If another ino-radio element in the same group receives `true`, the value will be changed to false automatically.
         */
        "checked": boolean;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * The name of this element. Use the same name for radio groups
         */
        "name"?: string;
        /**
          * The value of this element.
         */
        "value"?: string;
    }
    interface InoRadioGroup {
        /**
          * The value of the radio group. If there is an ino-radio-child with the given value, the radio-button will be checked and the other radio-buttons unchecked.
         */
        "value"?: any | null;
    }
    interface InoRange {
        /**
          * The name of the color scheme of this component. Possible values: `primary` (default), `secondary`, `success`, `warning`, `error`, `light`, `dark`.
         */
        "colorScheme": ColorScheme;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Restricts the slider to only allow discrete values.
         */
        "discrete"?: boolean;
        /**
          * Mark this slider to show the steps of the range. Only applicable if `discrete=true`
         */
        "markers"?: boolean;
        /**
          * The max value of this element (**required**).
         */
        "max"?: number;
        /**
          * The min value of this element.
         */
        "min"?: number;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * The step size for this element. Only applicable if ino-discrete is true.
         */
        "step"?: number;
        /**
          * The value of this element. (**unmanaged**, default=`min`)
         */
        "value"?: number;
    }
    interface InoSegmentButton {
        /**
          * Activates the button
         */
        "checked": boolean;
        /**
          * Slightly decreases the size of the button
         */
        "dense": boolean;
        /**
          * Disables the button
         */
        "disabled": boolean;
        /**
          * Name of the element
         */
        "name"?: string;
        /**
          * Value of the element
         */
        "value"?: string;
    }
    interface InoSegmentGroup {
        /**
          * Name of the segment group
         */
        "name"?: string;
        /**
          * Value of the segment group
         */
        "value"?: any;
    }
    interface InoSelect {
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * The label of this element
         */
        "label"?: string;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * Styles this select box as outlined element.
         */
        "outline"?: boolean;
        /**
          * Marks this element as required.
         */
        "required"?: boolean;
        /**
          * If true, an *optional* message is displayed if not required, otherwise a * marker is displayed if required
         */
        "showLabelHint"?: boolean;
        /**
          * The value of this element. (**unmanaged**)
         */
        "value"?: string;
    }
    interface InoSidebar {
        /**
          * Aligns the sidebar to the right (true) or left (false) side
         */
        "alignRight": boolean;
        /**
          * Name of the component
         */
        "name"?: string;
        /**
          * Expands the sidebar
         */
        "open": boolean;
    }
    interface InoSnackbar {
        /**
          * The text to display for the action button. If no text is defined, the snack bar is displayed in an alternative feedback style.
         */
        "actionText"?: string;
        /**
          * Controls if Snackbar is centered or left-aligned or right-aligned.
         */
        "alignment": 'left' | 'right' | 'center';
        /**
          * The text message to display.
         */
        "message"?: string;
        /**
          * If set to true, the timeout that closes the snackbar is paused when the user hovers over the snackbar.
         */
        "stayVisibleOnHover"?: boolean;
        /**
          * Sets the timeout in ms until the snackbar disappears. The timeout can be disabled by setting it to a negative value.
         */
        "timeout"?: number;
        /**
          * Changes the snackbar type
         */
        "type": SnackbarType;
    }
    interface InoSpinner {
        /**
          * The name of the color scheme which is used to style the background and outline of this component. Possible values: `primary` (default),  `secondary`, `success`, `warning`, `error`, `light`, `dark`.
         */
        "colorScheme": ColorScheme;
        /**
          * The height of this spinner (default = 40)
         */
        "height": number;
        /**
          * If true, the spinner is shown as modal over the current app page.
         */
        "modal": boolean;
        /**
          * The type of this spinner. Possible values: `tile` (default), `bounce` or `circle`
         */
        "type": SpinnerType;
        /**
          * The width of this spinner (defaul = 40)
         */
        "width": number;
    }
    interface InoSwitch {
        /**
          * Marks this element as checked. (**unmanaged**)
         */
        "checked"?: boolean;
        /**
          * The name of the color scheme which is used to style the background and outline of this component. Possible values: `primary` (default),  `secondary`, `success`, `warning`, `error`, `light`, `dark`.
         */
        "colorScheme": ColorScheme;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * The name of this element.
         */
        "name"?: string;
    }
    interface InoTab {
        /**
          * Indicates a leading icon in the tab.
         */
        "icon"?: string;
        /**
          * Indicates that the tab only expands to the width of its content.
         */
        "indicatorContentWidth": boolean;
        /**
          * Indicates a label text in the tab.
         */
        "label"?: string;
        /**
          * Indicates that the tab icon and label should flow vertically instead of horizontally.
         */
        "stacked": boolean;
    }
    interface InoTabBar {
        /**
          * Activates the tab at the given index (**unmanaged**).
         */
        "activeTab"?: number;
    }
    interface InoTable {
    }
    interface InoTableCell {
        /**
          * Indicates that the cell contains numeric values
         */
        "numeric": boolean;
    }
    interface InoTableRow {
        /**
          * Indicates that the row is a header row
         */
        "headerRow": boolean;
        /**
          * Indicates whether the row is selected or not
         */
        "selected": boolean;
    }
    interface InoTextarea {
        /**
          * The autofocus of this element.
         */
        "autoFocus"?: boolean;
        /**
          * An optional flag to allow the textarea adjust its height to display all the content. The `rows` attribute can also be used to specify a minimum height. Use CSS to specify a max-height for the textarea element. Once the height exceeds the max-height, autogrow will re-enable the vertical scrollbar.
         */
        "autogrow": boolean;
        /**
          * The number of cols of this textarea.
         */
        "cols"?: number;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * The optional floating label of this input field.
         */
        "label"?: string;
        /**
          * The max length of this element.
         */
        "maxlength"?: number;
        /**
          * The min length of this element.
         */
        "minlength"?: number;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * Styles the input field as outlined element.
         */
        "outline"?: boolean;
        /**
          * The placeholder of this element.
         */
        "placeholder"?: string;
        /**
          * Marks this element as required.
         */
        "required"?: boolean;
        /**
          * The number of rows of this textarea.
         */
        "rows"?: number;
        /**
          * Displays the number of characters. The maxlength-property must be set.
         */
        "showCharacterCounter"?: boolean;
        /**
          * If true, an *optional* message is displayed if not required, otherwise a * marker is displayed if required
         */
        "showLabelHint"?: boolean;
        /**
          * The value of this element. (**unmanaged**)
         */
        "value"?: string;
    }
    interface InoTooltip {
        /**
          * Sets the color scheme of the tooltip Valid options include: 'primary', 'secondary' 'light', 'transparent'
         */
        "colorScheme": 'primary' | 'secondary' | 'light' | 'transparent';
        /**
          * The target id the tooltip belongs to. If not given, the tooltip is attached to the parent component.
         */
        "for"?: string;
        /**
          * Returns the internally used tippy.js instance For more informations see: https://atomiks.github.io/tippyjs/
         */
        "getTippyInstance": () => Promise<any>;
        /**
          * The text shown in the tooltip.
         */
        "label"?: string;
        /**
          * The placement of the tooltip. Accepted values: `top(-start, -end)`, `right(-start, -end)`, `bottom(-start, -end)`, `left(-start, -end)`
         */
        "placement": Placement;
        /**
          * The trigger to show the tooltip - either click, hover or focus. Multiple triggers possible by separating them with a space.
         */
        "trigger": TooltipTrigger;
    }
}
declare global {
    interface HTMLInoButtonElement extends Components.InoButton, HTMLStencilElement {
    }
    var HTMLInoButtonElement: {
        prototype: HTMLInoButtonElement;
        new (): HTMLInoButtonElement;
    };
    interface HTMLInoCardElement extends Components.InoCard, HTMLStencilElement {
    }
    var HTMLInoCardElement: {
        prototype: HTMLInoCardElement;
        new (): HTMLInoCardElement;
    };
    interface HTMLInoCarouselElement extends Components.InoCarousel, HTMLStencilElement {
    }
    var HTMLInoCarouselElement: {
        prototype: HTMLInoCarouselElement;
        new (): HTMLInoCarouselElement;
    };
    interface HTMLInoCarouselSlideElement extends Components.InoCarouselSlide, HTMLStencilElement {
    }
    var HTMLInoCarouselSlideElement: {
        prototype: HTMLInoCarouselSlideElement;
        new (): HTMLInoCarouselSlideElement;
    };
    interface HTMLInoCheckboxElement extends Components.InoCheckbox, HTMLStencilElement {
    }
    var HTMLInoCheckboxElement: {
        prototype: HTMLInoCheckboxElement;
        new (): HTMLInoCheckboxElement;
    };
    interface HTMLInoChipElement extends Components.InoChip, HTMLStencilElement {
    }
    var HTMLInoChipElement: {
        prototype: HTMLInoChipElement;
        new (): HTMLInoChipElement;
    };
    interface HTMLInoChipSetElement extends Components.InoChipSet, HTMLStencilElement {
    }
    var HTMLInoChipSetElement: {
        prototype: HTMLInoChipSetElement;
        new (): HTMLInoChipSetElement;
    };
    interface HTMLInoControlItemElement extends Components.InoControlItem, HTMLStencilElement {
    }
    var HTMLInoControlItemElement: {
        prototype: HTMLInoControlItemElement;
        new (): HTMLInoControlItemElement;
    };
    interface HTMLInoDatepickerElement extends Components.InoDatepicker, HTMLStencilElement {
    }
    var HTMLInoDatepickerElement: {
        prototype: HTMLInoDatepickerElement;
        new (): HTMLInoDatepickerElement;
    };
    interface HTMLInoDialogElement extends Components.InoDialog, HTMLStencilElement {
    }
    var HTMLInoDialogElement: {
        prototype: HTMLInoDialogElement;
        new (): HTMLInoDialogElement;
    };
    interface HTMLInoFabElement extends Components.InoFab, HTMLStencilElement {
    }
    var HTMLInoFabElement: {
        prototype: HTMLInoFabElement;
        new (): HTMLInoFabElement;
    };
    interface HTMLInoFabSetElement extends Components.InoFabSet, HTMLStencilElement {
    }
    var HTMLInoFabSetElement: {
        prototype: HTMLInoFabSetElement;
        new (): HTMLInoFabSetElement;
    };
    interface HTMLInoFormRowElement extends Components.InoFormRow, HTMLStencilElement {
    }
    var HTMLInoFormRowElement: {
        prototype: HTMLInoFormRowElement;
        new (): HTMLInoFormRowElement;
    };
    interface HTMLInoHeaderElement extends Components.InoHeader, HTMLStencilElement {
    }
    var HTMLInoHeaderElement: {
        prototype: HTMLInoHeaderElement;
        new (): HTMLInoHeaderElement;
    };
    interface HTMLInoIconElement extends Components.InoIcon, HTMLStencilElement {
    }
    var HTMLInoIconElement: {
        prototype: HTMLInoIconElement;
        new (): HTMLInoIconElement;
    };
    interface HTMLInoIconButtonElement extends Components.InoIconButton, HTMLStencilElement {
    }
    var HTMLInoIconButtonElement: {
        prototype: HTMLInoIconButtonElement;
        new (): HTMLInoIconButtonElement;
    };
    interface HTMLInoImgElement extends Components.InoImg, HTMLStencilElement {
    }
    var HTMLInoImgElement: {
        prototype: HTMLInoImgElement;
        new (): HTMLInoImgElement;
    };
    interface HTMLInoImgListElement extends Components.InoImgList, HTMLStencilElement {
    }
    var HTMLInoImgListElement: {
        prototype: HTMLInoImgListElement;
        new (): HTMLInoImgListElement;
    };
    interface HTMLInoInputElement extends Components.InoInput, HTMLStencilElement {
    }
    var HTMLInoInputElement: {
        prototype: HTMLInoInputElement;
        new (): HTMLInoInputElement;
    };
    interface HTMLInoInputFileElement extends Components.InoInputFile, HTMLStencilElement {
    }
    var HTMLInoInputFileElement: {
        prototype: HTMLInoInputFileElement;
        new (): HTMLInoInputFileElement;
    };
    interface HTMLInoLabelElement extends Components.InoLabel, HTMLStencilElement {
    }
    var HTMLInoLabelElement: {
        prototype: HTMLInoLabelElement;
        new (): HTMLInoLabelElement;
    };
    interface HTMLInoListElement extends Components.InoList, HTMLStencilElement {
    }
    var HTMLInoListElement: {
        prototype: HTMLInoListElement;
        new (): HTMLInoListElement;
    };
    interface HTMLInoListDividerElement extends Components.InoListDivider, HTMLStencilElement {
    }
    var HTMLInoListDividerElement: {
        prototype: HTMLInoListDividerElement;
        new (): HTMLInoListDividerElement;
    };
    interface HTMLInoListItemElement extends Components.InoListItem, HTMLStencilElement {
    }
    var HTMLInoListItemElement: {
        prototype: HTMLInoListItemElement;
        new (): HTMLInoListItemElement;
    };
    interface HTMLInoMenuElement extends Components.InoMenu, HTMLStencilElement {
    }
    var HTMLInoMenuElement: {
        prototype: HTMLInoMenuElement;
        new (): HTMLInoMenuElement;
    };
    interface HTMLInoNavDrawerElement extends Components.InoNavDrawer, HTMLStencilElement {
    }
    var HTMLInoNavDrawerElement: {
        prototype: HTMLInoNavDrawerElement;
        new (): HTMLInoNavDrawerElement;
    };
    interface HTMLInoNavItemElement extends Components.InoNavItem, HTMLStencilElement {
    }
    var HTMLInoNavItemElement: {
        prototype: HTMLInoNavItemElement;
        new (): HTMLInoNavItemElement;
    };
    interface HTMLInoOptionElement extends Components.InoOption, HTMLStencilElement {
    }
    var HTMLInoOptionElement: {
        prototype: HTMLInoOptionElement;
        new (): HTMLInoOptionElement;
    };
    interface HTMLInoOptionGroupElement extends Components.InoOptionGroup, HTMLStencilElement {
    }
    var HTMLInoOptionGroupElement: {
        prototype: HTMLInoOptionGroupElement;
        new (): HTMLInoOptionGroupElement;
    };
    interface HTMLInoPopoverElement extends Components.InoPopover, HTMLStencilElement {
    }
    var HTMLInoPopoverElement: {
        prototype: HTMLInoPopoverElement;
        new (): HTMLInoPopoverElement;
    };
    interface HTMLInoProgressBarElement extends Components.InoProgressBar, HTMLStencilElement {
    }
    var HTMLInoProgressBarElement: {
        prototype: HTMLInoProgressBarElement;
        new (): HTMLInoProgressBarElement;
    };
    interface HTMLInoRadioElement extends Components.InoRadio, HTMLStencilElement {
    }
    var HTMLInoRadioElement: {
        prototype: HTMLInoRadioElement;
        new (): HTMLInoRadioElement;
    };
    interface HTMLInoRadioGroupElement extends Components.InoRadioGroup, HTMLStencilElement {
    }
    var HTMLInoRadioGroupElement: {
        prototype: HTMLInoRadioGroupElement;
        new (): HTMLInoRadioGroupElement;
    };
    interface HTMLInoRangeElement extends Components.InoRange, HTMLStencilElement {
    }
    var HTMLInoRangeElement: {
        prototype: HTMLInoRangeElement;
        new (): HTMLInoRangeElement;
    };
    interface HTMLInoSegmentButtonElement extends Components.InoSegmentButton, HTMLStencilElement {
    }
    var HTMLInoSegmentButtonElement: {
        prototype: HTMLInoSegmentButtonElement;
        new (): HTMLInoSegmentButtonElement;
    };
    interface HTMLInoSegmentGroupElement extends Components.InoSegmentGroup, HTMLStencilElement {
    }
    var HTMLInoSegmentGroupElement: {
        prototype: HTMLInoSegmentGroupElement;
        new (): HTMLInoSegmentGroupElement;
    };
    interface HTMLInoSelectElement extends Components.InoSelect, HTMLStencilElement {
    }
    var HTMLInoSelectElement: {
        prototype: HTMLInoSelectElement;
        new (): HTMLInoSelectElement;
    };
    interface HTMLInoSidebarElement extends Components.InoSidebar, HTMLStencilElement {
    }
    var HTMLInoSidebarElement: {
        prototype: HTMLInoSidebarElement;
        new (): HTMLInoSidebarElement;
    };
    interface HTMLInoSnackbarElement extends Components.InoSnackbar, HTMLStencilElement {
    }
    var HTMLInoSnackbarElement: {
        prototype: HTMLInoSnackbarElement;
        new (): HTMLInoSnackbarElement;
    };
    interface HTMLInoSpinnerElement extends Components.InoSpinner, HTMLStencilElement {
    }
    var HTMLInoSpinnerElement: {
        prototype: HTMLInoSpinnerElement;
        new (): HTMLInoSpinnerElement;
    };
    interface HTMLInoSwitchElement extends Components.InoSwitch, HTMLStencilElement {
    }
    var HTMLInoSwitchElement: {
        prototype: HTMLInoSwitchElement;
        new (): HTMLInoSwitchElement;
    };
    interface HTMLInoTabElement extends Components.InoTab, HTMLStencilElement {
    }
    var HTMLInoTabElement: {
        prototype: HTMLInoTabElement;
        new (): HTMLInoTabElement;
    };
    interface HTMLInoTabBarElement extends Components.InoTabBar, HTMLStencilElement {
    }
    var HTMLInoTabBarElement: {
        prototype: HTMLInoTabBarElement;
        new (): HTMLInoTabBarElement;
    };
    interface HTMLInoTableElement extends Components.InoTable, HTMLStencilElement {
    }
    var HTMLInoTableElement: {
        prototype: HTMLInoTableElement;
        new (): HTMLInoTableElement;
    };
    interface HTMLInoTableCellElement extends Components.InoTableCell, HTMLStencilElement {
    }
    var HTMLInoTableCellElement: {
        prototype: HTMLInoTableCellElement;
        new (): HTMLInoTableCellElement;
    };
    interface HTMLInoTableRowElement extends Components.InoTableRow, HTMLStencilElement {
    }
    var HTMLInoTableRowElement: {
        prototype: HTMLInoTableRowElement;
        new (): HTMLInoTableRowElement;
    };
    interface HTMLInoTextareaElement extends Components.InoTextarea, HTMLStencilElement {
    }
    var HTMLInoTextareaElement: {
        prototype: HTMLInoTextareaElement;
        new (): HTMLInoTextareaElement;
    };
    interface HTMLInoTooltipElement extends Components.InoTooltip, HTMLStencilElement {
    }
    var HTMLInoTooltipElement: {
        prototype: HTMLInoTooltipElement;
        new (): HTMLInoTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "ino-button": HTMLInoButtonElement;
        "ino-card": HTMLInoCardElement;
        "ino-carousel": HTMLInoCarouselElement;
        "ino-carousel-slide": HTMLInoCarouselSlideElement;
        "ino-checkbox": HTMLInoCheckboxElement;
        "ino-chip": HTMLInoChipElement;
        "ino-chip-set": HTMLInoChipSetElement;
        "ino-control-item": HTMLInoControlItemElement;
        "ino-datepicker": HTMLInoDatepickerElement;
        "ino-dialog": HTMLInoDialogElement;
        "ino-fab": HTMLInoFabElement;
        "ino-fab-set": HTMLInoFabSetElement;
        "ino-form-row": HTMLInoFormRowElement;
        "ino-header": HTMLInoHeaderElement;
        "ino-icon": HTMLInoIconElement;
        "ino-icon-button": HTMLInoIconButtonElement;
        "ino-img": HTMLInoImgElement;
        "ino-img-list": HTMLInoImgListElement;
        "ino-input": HTMLInoInputElement;
        "ino-input-file": HTMLInoInputFileElement;
        "ino-label": HTMLInoLabelElement;
        "ino-list": HTMLInoListElement;
        "ino-list-divider": HTMLInoListDividerElement;
        "ino-list-item": HTMLInoListItemElement;
        "ino-menu": HTMLInoMenuElement;
        "ino-nav-drawer": HTMLInoNavDrawerElement;
        "ino-nav-item": HTMLInoNavItemElement;
        "ino-option": HTMLInoOptionElement;
        "ino-option-group": HTMLInoOptionGroupElement;
        "ino-popover": HTMLInoPopoverElement;
        "ino-progress-bar": HTMLInoProgressBarElement;
        "ino-radio": HTMLInoRadioElement;
        "ino-radio-group": HTMLInoRadioGroupElement;
        "ino-range": HTMLInoRangeElement;
        "ino-segment-button": HTMLInoSegmentButtonElement;
        "ino-segment-group": HTMLInoSegmentGroupElement;
        "ino-select": HTMLInoSelectElement;
        "ino-sidebar": HTMLInoSidebarElement;
        "ino-snackbar": HTMLInoSnackbarElement;
        "ino-spinner": HTMLInoSpinnerElement;
        "ino-switch": HTMLInoSwitchElement;
        "ino-tab": HTMLInoTabElement;
        "ino-tab-bar": HTMLInoTabBarElement;
        "ino-table": HTMLInoTableElement;
        "ino-table-cell": HTMLInoTableCellElement;
        "ino-table-row": HTMLInoTableRowElement;
        "ino-textarea": HTMLInoTextareaElement;
        "ino-tooltip": HTMLInoTooltipElement;
    }
}
declare namespace LocalJSX {
    interface InoButton {
        /**
          * Sets the autofocus for this element.
         */
        "autoFocus"?: boolean;
        /**
          * The name of the color scheme which is used to style the background and outline of this component. Possible values: `primary` (default),  `secondary`, `grey`, `white`. `white` and `grey` can only be used in combination with the `outline` fill-option!
         */
        "colorScheme"?: ButtonColorScheme;
        /**
          * Makes the button text and container slightly smaller.
         */
        "dense"?: boolean;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Styles the button to have the edge on the top-right instead of the top-left
         */
        "edgeMirrored"?: boolean;
        /**
          * The fill type of this element. Possible values: `solid` (default), `outline`, `inverse`.
         */
        "fill"?: SurfaceType;
        /**
          * The form id this element origins to.
         */
        "form"?: string;
        /**
          * Shows an infinite loading spinner and prevents further clicks.
         */
        "loading"?: boolean;
        /**
          * The name of the element.
         */
        "name"?: string;
        /**
          * The type of this form.  Can either be `button`, `submit` or `reset`.
         */
        "type"?: ButtonType;
    }
    interface InoCard {
        /**
          * Disables the hover effect if true
         */
        "disableElevation"?: boolean;
        /**
          * Selects the card and displays a check mark icon on top of the card
         */
        "selected"?: boolean;
    }
    interface InoCarousel {
        /**
          * Enables the slide animation
         */
        "animated"?: boolean;
        /**
          * Enables autoplay which causes slides to be changed automatically
         */
        "autoplay"?: boolean;
        /**
          * Hides the arrow buttons
         */
        "hideButtons"?: boolean;
        /**
          * Restarts playback from the first slide upon reaching the last slide
         */
        "infinite"?: boolean;
        /**
          * Sets the intermission between two slides (Unit: ms)
         */
        "intermission"?: number;
        /**
          * Enables reverse playback of the slides
         */
        "reverse"?: boolean;
        /**
          * Optional group value to manually manage the displayed slide
         */
        "value"?: any;
    }
    interface InoCarouselSlide {
        /**
          * Link to the image
         */
        "src"?: string;
        /**
          * Value of the slide
         */
        "value"?: any;
    }
    interface InoCheckbox {
        /**
          * Marks this element as checked. (**unmanaged**)
         */
        "checked"?: boolean;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Marks this element as indeterminate (**unmanaged**)
         */
        "indeterminate"?: boolean;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * Emits when the user clicks on the checkbox to change the checked state. Contains the status in `event.detail`.
         */
        "onCheckedChange"?: (event: CustomEvent<any>) => void;
        /**
          * Styles the checkbox as a selection variant that has a larger radius. While checkboxes are mainly used in lists, the selection should be used as a single, independent UI element. The indeterminate state is not supported here.
         */
        "selection"?: boolean;
        /**
          * The value of this element.
         */
        "value"?: string;
    }
    interface InoChip {
        /**
          * The name of the color scheme which is used to style the background and outline of this component.
         */
        "colorScheme"?: ColorScheme | 'default';
        /**
          * The fill type of this element.
         */
        "fill"?: ChipSurface;
        /**
          * Prepends an icon to the chip label.
          * @deprecated This property is deprecated and will be removed with the next major release. Instead, use the icon-leading slot.
         */
        "icon"?: string;
        /**
          * The label of this chip (**required**).
         */
        "label"?: string;
        /**
          * Event that emits as soon as the user removes this chip.  Listen to this event to hide or destroy this chip. The event only emits if the property `removable` is true.
         */
        "onRemoveChip"?: (event: CustomEvent<any>) => void;
        /**
          * Adds a close icon on the right side of this chip.  If applied, emits the `removeChip` event.
         */
        "removable"?: boolean;
        /**
          * Adds a checkmark if the icon is selected.
         */
        "selectable"?: boolean;
        /**
          * Marks this element as selected.
         */
        "selected"?: boolean;
        /**
          * The value of this chip.  **Required** for chips as part of sets of type `filter` or `choice`.
         */
        "value"?: string;
    }
    interface InoChipSet {
        /**
          * Event that emits when the value of this element changes.  Only applicable if `inoType` is `choice` or `filter`.
         */
        "onUpdateChipSet"?: (event: CustomEvent<any>) => void;
        /**
          * The type of this chip set that indicates its behavior.  `choice`: Single selection from a set of options `filter`: Multiple selection from a set of options `input`: Enable user input by converting text into chips
         */
        "type"?: ChipSetType;
    }
    interface InoControlItem {
        /**
          * Styles the row in an activated style.  In contrast to `selected`, use this for only one item and to mark it as permanently activated.
         */
        "activated"?: boolean;
        /**
          * Marks this element as checked. (**unmanaged**)
         */
        "checked"?: boolean;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Marks this element as indeterminate (**unmanaged**) Checkbox only
         */
        "indeterminate"?: boolean;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * Emits when the user clicks on the checkbox or the list item to change the checked state. Contains the status in `event.detail`.
         */
        "onCheckedChange"?: (event: CustomEvent<any>) => void;
        /**
          * The type of control element
         */
        "role": 'checkbox' | 'radio';
        /**
          * Sets the secondary text of this list item.  Requires `two-lines` on the parent `ino-list` element.
         */
        "secondaryText"?: string;
        /**
          * Styles the row in a selected style.  In contrast to `activated`, use this option to select one or multiple items that are likely to change soon.
         */
        "selected"?: boolean;
        /**
          * The primary text of this list item (required).
         */
        "text": string;
        /**
          * Places the checkbox at the end of the item
         */
        "trailing"?: boolean;
        /**
          * The value of this element.
         */
        "value"?: string;
    }
    interface InoDatepicker {
        /**
          * Autofocuses this element.
         */
        "autoFocus"?: boolean;
        /**
          * A string to change the date format. Possible values are listed [here](https://flatpickr.js.org/formatting/). The default value is `d-m-Y` which accepts values like `01-01-2019`.
         */
        "dateFormat"?: string;
        /**
          * A string/array containing the initial date of the datepicker overlay. If you're using `inoRange = true` provide an array. If a `value` is given, this will be ignored.
         */
        "defaultDate"?: string | string[];
        /**
          * A number containing the initial hour in the date-time picker overlay. If a `value` is given, this will be ignored.
         */
        "defaultHour"?: number;
        /**
          * A number containing the initial minute in the date-time picker overlay. If a `value` is given, this will be ignored.
         */
        "defaultMinute"?: number;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * The helper text.
         */
        "helper"?: string;
        /**
          * Displays the helper permanently.
         */
        "helperPersistent"?: boolean;
        /**
          * Styles the helper text as a validation message.
         */
        "helperValidation"?: boolean;
        /**
          * Adjusts the step for the hour input (incl. scrolling) Default is 1
         */
        "hourStep"?: number;
        /**
          * Defines the label for this element.
         */
        "label"?: string;
        /**
          * The maximum date that a user can pick to (inclusive).
         */
        "max"?: string;
        /**
          * The minimum date that a user can start picking from (inclusive).
         */
        "min"?: string;
        /**
          * Adjusts the step for the minute input (incl. scrolling) Default is 5
         */
        "minuteStep"?: number;
        /**
          * The input name of this element.
         */
        "name"?: string;
        /**
          * Emits when the value of the datepicker changes. The value can be found in `event.detail`
         */
        "onValueChange"?: (event: CustomEvent<string>) => void;
        /**
          * Styles the datepicker as outlined element.
         */
        "outline"?: boolean;
        /**
          * If true, enables the user to choose two dates as an interval. Only works with `type="date"`
         */
        "range"?: boolean;
        /**
          * Marks this element as required.
         */
        "required"?: boolean;
        /**
          * If true, an *optional* message is displayed if not required, otherwise a * marker is displayed if required
         */
        "showLabelHint"?: boolean;
        /**
          * If true, displays time picker in 12 hour mode with AM/PM selection.
         */
        "twelveHourTime"?: boolean;
        /**
          * Selects the correct picker corresponding to the given type.
         */
        "type"?: PickerTypeKeys;
        /**
          * The currently selected date shown in the input field **unmanaged**. The given value will not be formatted as date.
         */
        "value"?: string;
    }
    interface InoDialog {
        /**
          * Emits an event upon opening or closing the dialog
         */
        "onOpenChange"?: (event: CustomEvent<any>) => void;
        /**
          * Opens the dialog if set to true
         */
        "open"?: boolean;
    }
    interface InoFab {
        /**
          * Disables the button.
         */
        "disabled"?: boolean;
        /**
          * The position of the edge.
         */
        "edgePosition"?: | 'top-right'
    | 'top-left'
    | 'bottom-right'
    | 'bottom-left'
    | 'none';
        /**
          * Optional, modifies the FAB to wider size which includes a text label.
         */
        "extended"?: boolean;
        /**
          * Adds an icon to the Fab.
          * @deprecated This property is deprecated and will be removed with the next major release. Instead, use the `icon-leading` slot.
         */
        "icon"?: string;
        /**
          * Optional, for the text label. Applicable only for Extended FAB.
         */
        "label"?: string;
        /**
          * Optional, modifies the FAB to a smaller size
         */
        "mini"?: boolean;
        /**
          * The placement of the tooltip which will be displayed when the button is not extended. Use `none`, if you don't want a tooltip to be displayed.
         */
        "tooltipPlacement"?: Placement | 'none';
    }
    interface InoFabSet {
        /**
          * The direction of the speed dial. Possible values: `top` (default), `bottom`, `right`, `left`.
         */
        "dialDirection"?: Locations;
        /**
          * The side where the Fab is displayed. Possible values: `right`, `left` (default).
         */
        "leftRightLocation"?: HorizontalLocation;
        /**
          * Opens the dial (**uncontrolled**)
         */
        "openDial"?: boolean;
        /**
          * The side where the Fab is displayed. Possible values: `top`, `bottom` (default).
         */
        "topBottomLocation"?: VerticalLocation;
    }
    interface InoFormRow {
        /**
          * The label for this form row which describes the form element.
         */
        "label"?: string;
        /**
          * An indicator which marks the contents of the form row as mandatory. If you use this make sure you also check for the values in your application logic.
         */
        "mandatory"?: boolean;
    }
    interface InoHeader {
        /**
          * The text of this header
         */
        "text": string;
    }
    interface InoIcon {
        /**
          * Makes the icon clickable and allows to listen to the `clickEl` event.
         */
        "clickable"?: boolean;
        /**
          * Colors the icon in the global secondary color
         */
        "colorSecondary"?: boolean;
        /**
          * The name of the icon of this element or an URL.
         */
        "icon"?: string;
        /**
          * Event that emits as soon as the user clicks on the icon. The event only emits if the property `inoClickable` is true.
         */
        "onClickEl"?: (event: CustomEvent<any>) => void;
        /**
          * Specifies the exact `src` of an SVG file to use.
         */
        "src"?: string;
        /**
          * Sets a meaningful svg title for assistive technologies.
         */
        "svgTitle"?: string;
    }
    interface InoIconButton {
        /**
          * Marks the icon button as activated.  Useful in cases where an external state controls the icon button activation. Makes the component **managed**.
         */
        "activated"?: boolean;
        /**
          * Sets the autofocus for this element.
         */
        "autoFocus"?: boolean;
        /**
          * The name of the color scheme which is used to style the background and outline of this component. Possible values: `primary` (default),  `secondary`, `success`, `warning`, `error`, `light`, `dark`.
         */
        "colorScheme"?: ColorScheme;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Styles this element as filled icon button with the `ino-color-scheme` as background color.
         */
        "filled"?: boolean;
        /**
          * The name of the icon of this element.
         */
        "icon"?: string;
        /**
          * Event that emits as soon as the user clicks on the icon. The event only emits if the property `clickable` is true.
         */
        "onClickEl"?: (event: CustomEvent<any>) => void;
        /**
          * The type of this form.  Can either be `button`, `submit` or `reset`.
         */
        "type"?: ButtonType;
    }
    interface InoImg {
        /**
          * The alternative text of this image.
         */
        "alt"?: string;
        /**
          * The decoding method of the native html input element. Can either be `async`, `auto` or `sync`.
         */
        "decoding"?: ImageDecodingTypes;
        /**
          * Icon used for fallback image if image can not be loaded
         */
        "fallbackIcon"?: string;
        /**
          * The fixed height of this image.
         */
        "height"?: number;
        /**
          * Indicates that the image is a part of an image list component
         */
        "imgListItem"?: boolean;
        /**
          * Sets the label of the image. Note: Only works if image is part of an ino-img-list component.
         */
        "label"?: string;
        /**
          * The ratio height for this image (default = 1). Use this attribute together with `ratio-width` to reserve a space for the image during rendering and to prevent jumping contents.
         */
        "ratioHeight"?: number;
        /**
          * The ratio width of this image (default = 1). Use this attribute together with `ratio-height` to reserve a space for the image during rendering and to prevent jumping contents.
         */
        "ratioWidth"?: number;
        /**
          * If true, styles the image with rounded borders.
         */
        "rounded"?: boolean;
        /**
          * A set of rules to specify the usage of images sources that are defined in the `srcset` attribute.
         */
        "sizes"?: string;
        /**
          * The source of this image element.
         */
        "src"?: string;
        /**
          * A set of sources of this image for different viewports or devices.
         */
        "srcset"?: string;
        /**
          * An ID referencing to a defined map element for this image.
         */
        "usemap"?: string;
        /**
          * The fixed of the image.
         */
        "width"?: number;
    }
    interface InoImgList {
        /**
          * Encapsulates the label of all img-list-items within the image
         */
        "encloseLabel"?: boolean;
        /**
          * Enables the masonry image list variant, which allows the images to be any combination of aspect ratios.
         */
        "masonry"?: boolean;
    }
    interface InoInput {
        /**
          * The autofocus of this element.
         */
        "autoFocus"?: boolean;
        /**
          * The autocomplete property of this element.
         */
        "autocomplete"?: string;
        /**
          * The id of the datalist child
         */
        "dataList"?: string;
        /**
          * The number of decimal places. Only works on 'text' type input.
         */
        "decimalPlaces"?: number;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Displays the input field as invalid if set to true. If the property is not set or set to false, the validation is handled by the `pattern` property. This functionality might be useful if the input validation is (additionally) handled by the backend.
         */
        "error"?: boolean;
        /**
          * The optional helper text.
         */
        "helper"?: string;
        /**
          * Displays the number of characters. The maxlength-property must be set. This helper text will be displayed persistently.
         */
        "helperCharacterCounter"?: boolean;
        /**
          * Displays the helper permanently.
         */
        "helperPersistent"?: boolean;
        /**
          * Styles the helper text as a validation message.
         */
        "helperValidation"?: boolean;
        /**
          * The optional floating label of this input field.
         */
        "label"?: string;
        /**
          * The max value of this element.
         */
        "max"?: string;
        /**
          * Limits the number of possible characters to the given number
         */
        "maxlength"?: number;
        /**
          * The min value of this element.
         */
        "min"?: string;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * Emits when the input field is blurred and validates email input
         */
        "onInoBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emits when the input field is focused
         */
        "onInoFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emits when the user types something in. Contains typed input in `event.detail`
         */
        "onValueChange"?: (event: CustomEvent<string>) => void;
        /**
          * Styles the input field as outlined element.
         */
        "outline"?: boolean;
        /**
          * The validation pattern of this element.
         */
        "pattern"?: string;
        /**
          * The placeholder of this element.
         */
        "placeholder"?: string;
        /**
          * Marks this element as required.
         */
        "required"?: boolean;
        /**
          * If true, an *optional* message is displayed if not required, otherwise a * marker is displayed if required
         */
        "showLabelHint"?: boolean;
        /**
          * The size of this element.
         */
        "size"?: number;
        /**
          * The step value of this element. Use `any` for decimal numbers
         */
        "step"?: number | 'any';
        /**
          * Shows a dot as a thousands separator. Only works on 'text' type input.
         */
        "thousandsSeparator"?: boolean;
        /**
          * The type of this element (default = text).
         */
        "type"?: string;
        /**
          * Displays the given unit at the end of the input field.
         */
        "unit"?: string;
        /**
          * The value of this element. (**unmanaged**)
         */
        "value"?: string;
    }
    interface InoInputFile {
        /**
          * The types of files accepted by the server.
         */
        "accept"?: string;
        /**
          * The autofocus of this element.
         */
        "autoFocus"?: boolean;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Enables drag-and-drop file input
         */
        "dragAndDrop"?: boolean;
        /**
          * Sets the secondary text of the drag and drop window
         */
        "dragAndDropSecondaryText"?: string;
        /**
          * Sets the primary text of the drag and drop window
         */
        "dragAndDropText"?: string;
        /**
          * Sets the label of the select files button.
         */
        "label"?: string;
        /**
          * Indicates whether the user can enter one or more values.
         */
        "multiple"?: boolean;
        /**
          * The name of this input field.
         */
        "name"?: string;
        /**
          * Emits when the value changes.
         */
        "onChangeFile"?: (event: CustomEvent<{
    e: any;
    files: File[];
  }>) => void;
        /**
          * Marks this element as required.
         */
        "required"?: boolean;
    }
    interface InoLabel {
        /**
          * Colors the label in an light grey to indicate the disabled status for this element
         */
        "disabled"?: boolean;
        /**
          * Styles the label in an outlined style
         */
        "outline"?: boolean;
        /**
          * Appends * to the label to make it appear as an required input in a form
         */
        "required"?: boolean;
        /**
          * Shows a "optional" message, when not `required`; Shows a * mark, when `required`
         */
        "showHint"?: boolean;
        /**
          * The text of the label itself
         */
        "text"?: string;
    }
    interface InoList {
        /**
          * Configures the leading tiles of each row to display images instead of icons. This will make the graphics of the list items larger.
         */
        "avatar"?: boolean;
        /**
          * Styles the list more dense, making it appear more compact.
         */
        "dense"?: boolean;
        /**
          * Marks this element as list with items having two lines.
         */
        "twoLines"?: boolean;
    }
    interface InoListDivider {
        /**
          * Marks the divider as a separator between two `ino-list` instead of `ino-list-item` elements.
         */
        "betweenLists"?: boolean;
        /**
          * Increases leading margin to match leading column in `ino-list-item`.  Only applicable if `betweenList` is `false`.
         */
        "inset"?: boolean;
        /**
          * Increases margin on each side of the divider to match meta content in `ino-list-item`.  Only applicable if `betweenList` is `false`.
         */
        "padded"?: boolean;
    }
    interface InoListItem {
        /**
          * Styles the row in an activated style.  In contrast to `selected`, use this for only one item and to mark it as permantently activated.
         */
        "activated"?: boolean;
        /**
          * Styles the row in a disabled style.
         */
        "disabled"?: boolean;
        /**
          * Emits when the list item is clicked. Contains the element itself in `event.detail`
         */
        "onClickEl"?: (event: CustomEvent<any>) => void;
        /**
          * Sets the secondary text of this list item.  Requires `two-lines` on the parent `ino-list` element.
         */
        "secondaryText"?: string;
        /**
          * Styles the row in a selected style.  In contrast to `activated`, use this option to select one or multiple items that are likely to change soon.
         */
        "selected"?: boolean;
        /**
          * The primary text of this list item.
         */
        "text"?: string;
    }
    interface InoMenu {
        /**
          * Determines the position of the opened menu. Usually, the default value (`auto`) will work just fine. Use this if the positioning is off for some reason.
         */
        "placement"?: Placement;
    }
    interface InoNavDrawer {
        /**
          * Side from which the drawer will appear. Possible values: `left` (default), `right`.
         */
        "anchor"?: NavDrawerAnchor;
        /**
          * Emits when the user clicks on the drawer toggle icon to change the open state. Contains the status in `event.detail`.
         */
        "onOpenChange"?: (event: CustomEvent<boolean>) => void;
        /**
          * Marks this element as open. (**unmanaged**)
         */
        "open"?: boolean;
        /**
          * The variant to use for the drawer Possible values: `docked` (default), `dismissible`, `modal`.
         */
        "variant"?: NavDrawerVariant;
    }
    interface InoNavItem {
        /**
          * Styles the row in an activated style.  Use this for only one item and to mark it as permanently activated.
         */
        "activated"?: boolean;
        /**
          * Styles the row in a disabled style.
         */
        "disabled"?: boolean;
        /**
          * The secondary text of this list item used in a two-lined list.
         */
        "subText"?: string;
        /**
          * The text of this list item.
         */
        "text"?: string;
    }
    interface InoOption {
        /**
          * Disables the option
         */
        "disabled"?: boolean;
        /**
          * Selects the option
         */
        "selected"?: boolean;
        /**
          * Value of the option
         */
        "value": string;
    }
    interface InoOptionGroup {
        /**
          * Label of the group. If not set, this component serves as a wrapper component for dynamically added `ino-options`. When using react and vue, an issue exists with slots and the virtual DOM. Read more about it [here](https://github.com/ionic-team/stencil/issues/2259).
         */
        "label"?: string;
    }
    interface InoPopover {
        /**
          * Sets the color scheme of the popup Valid options include: 'primary', 'secondary', 'light', 'transparent'
         */
        "colorScheme"?: 'primary' | 'secondary' | 'light' | 'transparent';
        /**
          * Used to indicate if the popover should be controlled by itself (`false`) or manually by the `visible` property (`true`)
         */
        "controlled"?: boolean;
        /**
          * Displaces the popover away from, or toward, the anchor element in the direction of its placement. A positive number displaces it further away, while a negative number lets it overlap the anchor.
         */
        "distance"?: number;
        /**
          * The target id the popover belongs to. If not given, the popover is attached to the element provided in the named slot (`popover-trigger`) or the parent component if a slot element does not exist.
         */
        "for"?: string;
        /**
          * Use this if you want to interact with the popover content (e.g. button clicks)
         */
        "interactive"?: boolean;
        /**
          * Emits when the popover wants to show (`true`) or hide (`false`) itself. This is depended on the `trigger` property. Use this event in controlled-mode (see `controlled`).  e.g.: `trigger = 'click'` - This events emits with `true` when the user clicks on the target (slot/`for`/parent-element) and emits with `false` when the target or the outside is clicked.
         */
        "onVisibleChanged"?: (event: CustomEvent<boolean>) => void;
        /**
          * The placement of this popover. Accepted values: `top(-start, -end)`, `right(-start, -end)`, `bottom(-start, -end)`, `left(-start, -end)`
         */
        "placement"?: Placement;
        /**
          * The trigger to show the tooltip - either click, hover or focus. Multiple triggers are possible by separating them with a space.
         */
        "trigger"?: Exclude<TooltipTrigger, 'manual'>;
        /**
          * Programmatically show or hide the popover. Can only be used in controlled mode (see property `controlled`). Use the `visibleChanged` to sync the popovers' visibility state with yours.
         */
        "visible"?: boolean;
    }
    interface InoProgressBar {
        /**
          * Sets the buffer progress
         */
        "buffer"?: number;
        /**
          * Indicates whether the state of the progress bar is indeterminate
         */
        "indeterminate"?: boolean;
        /**
          * Sets the label of the progress bar
         */
        "label"?: string;
        /**
          * Sets the progress of the progress bar. Should always be between 0 and 1
         */
        "progress"?: number;
        /**
          * Reverses the progress bar
         */
        "reversed"?: boolean;
    }
    interface InoRadio {
        /**
          * Initially marks this element as checked. If another ino-radio element in the same group receives `true`, the value will be changed to false automatically.
         */
        "checked"?: boolean;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * The name of this element. Use the same name for radio groups
         */
        "name"?: string;
        /**
          * Emits when the user interacts with the radio-button. Contains `true` in `event.detail`. This event will only be emitted if the current state of the radio button is false.
         */
        "onCheckedChange"?: (event: CustomEvent<any>) => void;
        /**
          * The value of this element.
         */
        "value"?: string;
    }
    interface InoRadioGroup {
        /**
          * The value of the radio group. If there is an ino-radio-child with the given value, the radio-button will be checked and the other radio-buttons unchecked.
         */
        "value"?: any | null;
    }
    interface InoRange {
        /**
          * The name of the color scheme of this component. Possible values: `primary` (default), `secondary`, `success`, `warning`, `error`, `light`, `dark`.
         */
        "colorScheme"?: ColorScheme;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * Restricts the slider to only allow discrete values.
         */
        "discrete"?: boolean;
        /**
          * Mark this slider to show the steps of the range. Only applicable if `discrete=true`
         */
        "markers"?: boolean;
        /**
          * The max value of this element (**required**).
         */
        "max"?: number;
        /**
          * The min value of this element.
         */
        "min"?: number;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * Emits when the value changes. Contains new value in `event.detail`.
         */
        "onValueChange"?: (event: CustomEvent<any>) => void;
        /**
          * The step size for this element. Only applicable if ino-discrete is true.
         */
        "step"?: number;
        /**
          * The value of this element. (**unmanaged**, default=`min`)
         */
        "value"?: number;
    }
    interface InoSegmentButton {
        /**
          * Activates the button
         */
        "checked"?: boolean;
        /**
          * Slightly decreases the size of the button
         */
        "dense"?: boolean;
        /**
          * Disables the button
         */
        "disabled"?: boolean;
        /**
          * Name of the element
         */
        "name"?: string;
        /**
          * Emits if the user interacts with the button. If the button is disabled or checked, the event will not be emitted.
         */
        "onCheckedChange"?: (event: CustomEvent<any>) => void;
        /**
          * Value of the element
         */
        "value"?: string;
    }
    interface InoSegmentGroup {
        /**
          * Name of the segment group
         */
        "name"?: string;
        /**
          * Value of the segment group
         */
        "value"?: any;
    }
    interface InoSelect {
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * The label of this element
         */
        "label"?: string;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * Emits when a selection changes. Contains new value in `event.detail`.
         */
        "onValueChange"?: (event: CustomEvent<string>) => void;
        /**
          * Styles this select box as outlined element.
         */
        "outline"?: boolean;
        /**
          * Marks this element as required.
         */
        "required"?: boolean;
        /**
          * If true, an *optional* message is displayed if not required, otherwise a * marker is displayed if required
         */
        "showLabelHint"?: boolean;
        /**
          * The value of this element. (**unmanaged**)
         */
        "value"?: string;
    }
    interface InoSidebar {
        /**
          * Aligns the sidebar to the right (true) or left (false) side
         */
        "alignRight"?: boolean;
        /**
          * Name of the component
         */
        "name"?: string;
        /**
          * Emits an event if the user expands or collapses the sidebar
         */
        "onOpenChange"?: (event: CustomEvent<any>) => void;
        /**
          * Expands the sidebar
         */
        "open"?: boolean;
    }
    interface InoSnackbar {
        /**
          * The text to display for the action button. If no text is defined, the snack bar is displayed in an alternative feedback style.
         */
        "actionText"?: string;
        /**
          * Controls if Snackbar is centered or left-aligned or right-aligned.
         */
        "alignment"?: 'left' | 'right' | 'center';
        /**
          * The text message to display.
         */
        "message"?: string;
        /**
          * Event that emits as soon as the action button is clicked.
         */
        "onActionClick"?: (event: CustomEvent<any>) => void;
        /**
          * Event that emits as soon as the snackbar hides. Listen to this event to hide or destroy this element.
         */
        "onHideEl"?: (event: CustomEvent<any>) => void;
        /**
          * If set to true, the timeout that closes the snackbar is paused when the user hovers over the snackbar.
         */
        "stayVisibleOnHover"?: boolean;
        /**
          * Sets the timeout in ms until the snackbar disappears. The timeout can be disabled by setting it to a negative value.
         */
        "timeout"?: number;
        /**
          * Changes the snackbar type
         */
        "type"?: SnackbarType;
    }
    interface InoSpinner {
        /**
          * The name of the color scheme which is used to style the background and outline of this component. Possible values: `primary` (default),  `secondary`, `success`, `warning`, `error`, `light`, `dark`.
         */
        "colorScheme"?: ColorScheme;
        /**
          * The height of this spinner (default = 40)
         */
        "height"?: number;
        /**
          * If true, the spinner is shown as modal over the current app page.
         */
        "modal"?: boolean;
        /**
          * The type of this spinner. Possible values: `tile` (default), `bounce` or `circle`
         */
        "type"?: SpinnerType;
        /**
          * The width of this spinner (defaul = 40)
         */
        "width"?: number;
    }
    interface InoSwitch {
        /**
          * Marks this element as checked. (**unmanaged**)
         */
        "checked"?: boolean;
        /**
          * The name of the color scheme which is used to style the background and outline of this component. Possible values: `primary` (default),  `secondary`, `success`, `warning`, `error`, `light`, `dark`.
         */
        "colorScheme"?: ColorScheme;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * Emits when the user clicks on the checkbox to change the checked state. Contains the status in `event.detail`.
         */
        "onCheckedChange"?: (event: CustomEvent<any>) => void;
    }
    interface InoTab {
        /**
          * Indicates a leading icon in the tab.
         */
        "icon"?: string;
        /**
          * Indicates that the tab only expands to the width of its content.
         */
        "indicatorContentWidth"?: boolean;
        /**
          * Indicates a label text in the tab.
         */
        "label"?: string;
        /**
          * Emitted when the user interacts with the tab. This event is used by the ino-tab-bar.
         */
        "onInteracted"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates that the tab icon and label should flow vertically instead of horizontally.
         */
        "stacked"?: boolean;
    }
    interface InoTabBar {
        /**
          * Activates the tab at the given index (**unmanaged**).
         */
        "activeTab"?: number;
        /**
          * Emits when a tab changes. Contains the index of the activated tab in `event.detail`
         */
        "onActiveTabChange"?: (event: CustomEvent<any>) => void;
    }
    interface InoTable {
    }
    interface InoTableCell {
        /**
          * Indicates that the cell contains numeric values
         */
        "numeric"?: boolean;
    }
    interface InoTableRow {
        /**
          * Indicates that the row is a header row
         */
        "headerRow"?: boolean;
        /**
          * Indicates whether the row is selected or not
         */
        "selected"?: boolean;
    }
    interface InoTextarea {
        /**
          * The autofocus of this element.
         */
        "autoFocus"?: boolean;
        /**
          * An optional flag to allow the textarea adjust its height to display all the content. The `rows` attribute can also be used to specify a minimum height. Use CSS to specify a max-height for the textarea element. Once the height exceeds the max-height, autogrow will re-enable the vertical scrollbar.
         */
        "autogrow"?: boolean;
        /**
          * The number of cols of this textarea.
         */
        "cols"?: number;
        /**
          * Disables this element.
         */
        "disabled"?: boolean;
        /**
          * The optional floating label of this input field.
         */
        "label"?: string;
        /**
          * The max length of this element.
         */
        "maxlength"?: number;
        /**
          * The min length of this element.
         */
        "minlength"?: number;
        /**
          * The name of this element.
         */
        "name"?: string;
        /**
          * Emits when the textarea is blurred and validates email input
         */
        "onInoBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emits when the user types something in. Contains typed input in `event.detail`
         */
        "onValueChange"?: (event: CustomEvent<string>) => void;
        /**
          * Styles the input field as outlined element.
         */
        "outline"?: boolean;
        /**
          * The placeholder of this element.
         */
        "placeholder"?: string;
        /**
          * Marks this element as required.
         */
        "required"?: boolean;
        /**
          * The number of rows of this textarea.
         */
        "rows"?: number;
        /**
          * Displays the number of characters. The maxlength-property must be set.
         */
        "showCharacterCounter"?: boolean;
        /**
          * If true, an *optional* message is displayed if not required, otherwise a * marker is displayed if required
         */
        "showLabelHint"?: boolean;
        /**
          * The value of this element. (**unmanaged**)
         */
        "value"?: string;
    }
    interface InoTooltip {
        /**
          * Sets the color scheme of the tooltip Valid options include: 'primary', 'secondary' 'light', 'transparent'
         */
        "colorScheme"?: 'primary' | 'secondary' | 'light' | 'transparent';
        /**
          * The target id the tooltip belongs to. If not given, the tooltip is attached to the parent component.
         */
        "for"?: string;
        /**
          * The text shown in the tooltip.
         */
        "label"?: string;
        /**
          * The placement of the tooltip. Accepted values: `top(-start, -end)`, `right(-start, -end)`, `bottom(-start, -end)`, `left(-start, -end)`
         */
        "placement"?: Placement;
        /**
          * The trigger to show the tooltip - either click, hover or focus. Multiple triggers possible by separating them with a space.
         */
        "trigger"?: TooltipTrigger;
    }
    interface IntrinsicElements {
        "ino-button": InoButton;
        "ino-card": InoCard;
        "ino-carousel": InoCarousel;
        "ino-carousel-slide": InoCarouselSlide;
        "ino-checkbox": InoCheckbox;
        "ino-chip": InoChip;
        "ino-chip-set": InoChipSet;
        "ino-control-item": InoControlItem;
        "ino-datepicker": InoDatepicker;
        "ino-dialog": InoDialog;
        "ino-fab": InoFab;
        "ino-fab-set": InoFabSet;
        "ino-form-row": InoFormRow;
        "ino-header": InoHeader;
        "ino-icon": InoIcon;
        "ino-icon-button": InoIconButton;
        "ino-img": InoImg;
        "ino-img-list": InoImgList;
        "ino-input": InoInput;
        "ino-input-file": InoInputFile;
        "ino-label": InoLabel;
        "ino-list": InoList;
        "ino-list-divider": InoListDivider;
        "ino-list-item": InoListItem;
        "ino-menu": InoMenu;
        "ino-nav-drawer": InoNavDrawer;
        "ino-nav-item": InoNavItem;
        "ino-option": InoOption;
        "ino-option-group": InoOptionGroup;
        "ino-popover": InoPopover;
        "ino-progress-bar": InoProgressBar;
        "ino-radio": InoRadio;
        "ino-radio-group": InoRadioGroup;
        "ino-range": InoRange;
        "ino-segment-button": InoSegmentButton;
        "ino-segment-group": InoSegmentGroup;
        "ino-select": InoSelect;
        "ino-sidebar": InoSidebar;
        "ino-snackbar": InoSnackbar;
        "ino-spinner": InoSpinner;
        "ino-switch": InoSwitch;
        "ino-tab": InoTab;
        "ino-tab-bar": InoTabBar;
        "ino-table": InoTable;
        "ino-table-cell": InoTableCell;
        "ino-table-row": InoTableRow;
        "ino-textarea": InoTextarea;
        "ino-tooltip": InoTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ino-button": LocalJSX.InoButton & JSXBase.HTMLAttributes<HTMLInoButtonElement>;
            "ino-card": LocalJSX.InoCard & JSXBase.HTMLAttributes<HTMLInoCardElement>;
            "ino-carousel": LocalJSX.InoCarousel & JSXBase.HTMLAttributes<HTMLInoCarouselElement>;
            "ino-carousel-slide": LocalJSX.InoCarouselSlide & JSXBase.HTMLAttributes<HTMLInoCarouselSlideElement>;
            "ino-checkbox": LocalJSX.InoCheckbox & JSXBase.HTMLAttributes<HTMLInoCheckboxElement>;
            "ino-chip": LocalJSX.InoChip & JSXBase.HTMLAttributes<HTMLInoChipElement>;
            "ino-chip-set": LocalJSX.InoChipSet & JSXBase.HTMLAttributes<HTMLInoChipSetElement>;
            "ino-control-item": LocalJSX.InoControlItem & JSXBase.HTMLAttributes<HTMLInoControlItemElement>;
            "ino-datepicker": LocalJSX.InoDatepicker & JSXBase.HTMLAttributes<HTMLInoDatepickerElement>;
            "ino-dialog": LocalJSX.InoDialog & JSXBase.HTMLAttributes<HTMLInoDialogElement>;
            "ino-fab": LocalJSX.InoFab & JSXBase.HTMLAttributes<HTMLInoFabElement>;
            "ino-fab-set": LocalJSX.InoFabSet & JSXBase.HTMLAttributes<HTMLInoFabSetElement>;
            "ino-form-row": LocalJSX.InoFormRow & JSXBase.HTMLAttributes<HTMLInoFormRowElement>;
            "ino-header": LocalJSX.InoHeader & JSXBase.HTMLAttributes<HTMLInoHeaderElement>;
            "ino-icon": LocalJSX.InoIcon & JSXBase.HTMLAttributes<HTMLInoIconElement>;
            "ino-icon-button": LocalJSX.InoIconButton & JSXBase.HTMLAttributes<HTMLInoIconButtonElement>;
            "ino-img": LocalJSX.InoImg & JSXBase.HTMLAttributes<HTMLInoImgElement>;
            "ino-img-list": LocalJSX.InoImgList & JSXBase.HTMLAttributes<HTMLInoImgListElement>;
            "ino-input": LocalJSX.InoInput & JSXBase.HTMLAttributes<HTMLInoInputElement>;
            "ino-input-file": LocalJSX.InoInputFile & JSXBase.HTMLAttributes<HTMLInoInputFileElement>;
            "ino-label": LocalJSX.InoLabel & JSXBase.HTMLAttributes<HTMLInoLabelElement>;
            "ino-list": LocalJSX.InoList & JSXBase.HTMLAttributes<HTMLInoListElement>;
            "ino-list-divider": LocalJSX.InoListDivider & JSXBase.HTMLAttributes<HTMLInoListDividerElement>;
            "ino-list-item": LocalJSX.InoListItem & JSXBase.HTMLAttributes<HTMLInoListItemElement>;
            "ino-menu": LocalJSX.InoMenu & JSXBase.HTMLAttributes<HTMLInoMenuElement>;
            "ino-nav-drawer": LocalJSX.InoNavDrawer & JSXBase.HTMLAttributes<HTMLInoNavDrawerElement>;
            "ino-nav-item": LocalJSX.InoNavItem & JSXBase.HTMLAttributes<HTMLInoNavItemElement>;
            "ino-option": LocalJSX.InoOption & JSXBase.HTMLAttributes<HTMLInoOptionElement>;
            "ino-option-group": LocalJSX.InoOptionGroup & JSXBase.HTMLAttributes<HTMLInoOptionGroupElement>;
            "ino-popover": LocalJSX.InoPopover & JSXBase.HTMLAttributes<HTMLInoPopoverElement>;
            "ino-progress-bar": LocalJSX.InoProgressBar & JSXBase.HTMLAttributes<HTMLInoProgressBarElement>;
            "ino-radio": LocalJSX.InoRadio & JSXBase.HTMLAttributes<HTMLInoRadioElement>;
            "ino-radio-group": LocalJSX.InoRadioGroup & JSXBase.HTMLAttributes<HTMLInoRadioGroupElement>;
            "ino-range": LocalJSX.InoRange & JSXBase.HTMLAttributes<HTMLInoRangeElement>;
            "ino-segment-button": LocalJSX.InoSegmentButton & JSXBase.HTMLAttributes<HTMLInoSegmentButtonElement>;
            "ino-segment-group": LocalJSX.InoSegmentGroup & JSXBase.HTMLAttributes<HTMLInoSegmentGroupElement>;
            "ino-select": LocalJSX.InoSelect & JSXBase.HTMLAttributes<HTMLInoSelectElement>;
            "ino-sidebar": LocalJSX.InoSidebar & JSXBase.HTMLAttributes<HTMLInoSidebarElement>;
            "ino-snackbar": LocalJSX.InoSnackbar & JSXBase.HTMLAttributes<HTMLInoSnackbarElement>;
            "ino-spinner": LocalJSX.InoSpinner & JSXBase.HTMLAttributes<HTMLInoSpinnerElement>;
            "ino-switch": LocalJSX.InoSwitch & JSXBase.HTMLAttributes<HTMLInoSwitchElement>;
            "ino-tab": LocalJSX.InoTab & JSXBase.HTMLAttributes<HTMLInoTabElement>;
            "ino-tab-bar": LocalJSX.InoTabBar & JSXBase.HTMLAttributes<HTMLInoTabBarElement>;
            "ino-table": LocalJSX.InoTable & JSXBase.HTMLAttributes<HTMLInoTableElement>;
            "ino-table-cell": LocalJSX.InoTableCell & JSXBase.HTMLAttributes<HTMLInoTableCellElement>;
            "ino-table-row": LocalJSX.InoTableRow & JSXBase.HTMLAttributes<HTMLInoTableRowElement>;
            "ino-textarea": LocalJSX.InoTextarea & JSXBase.HTMLAttributes<HTMLInoTextareaElement>;
            "ino-tooltip": LocalJSX.InoTooltip & JSXBase.HTMLAttributes<HTMLInoTooltipElement>;
        }
    }
}
