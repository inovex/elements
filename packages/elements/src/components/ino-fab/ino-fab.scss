@use 'base/mdc-customize';
@use '@material/fab/mdc-fab';
@use '@material/fab';
@use 'base/theme';
@use 'base/animation';

$edge-positions: top-left, top-right, bottom-right, bottom-left;

$edged-borders: (
  none: 50%,
  top-left: 0 50% 50% 50%,
  top-right: 50% 0 50% 50%,
  bottom-right: 50% 50% 0 50%,
  bottom-left: 50% 50% 50% 0,
);

$extended-edged-borders: (
  none: 24px,
  top-left: 0 24px 24px 24px,
  top-right: 24px 0 24px 24px,
  bottom-right: 24px 24px 0 24px,
  bottom-left: 24px 24px 24px 0,
);

@mixin setEdgedBorders($position) {
  &:not(.mdc-fab--extended) {
    border-radius: map_get($edged-borders, $position);
    @include animation.button-rounding(
      map_get($edged-borders, none),
      map_get($edged-borders, $position),
      fab-#{$position}-default
    );
  }

  &.mdc-fab--extended {
    border-radius: map_get($extended-edged-borders, $position);
    @include animation.button-rounding(
      map_get($extended-edged-borders, none),
      map_get($extended-edged-borders, $position),
      fab-#{$position}-extended
    );
  }
}

:host {
  /**
   * @prop --ino-fab-color: Text color
   * @prop --fab-background-color: Background color
   * @prop --fab-background-color-hover: Background color on hover
   * @prop --fab-background-color-active: Background color if active
   * @prop --fab-icon-color: Color of the slotted icon
   * @prop --fab-color-disabled: Text color if disabled
   * @prop --fab-background-color-disabled: Background color if disabled
   * @prop --fab-icon-color-disabled: Color of the slotted icon if disabled
   */
  --fab-color: var(--ino-fab-color, white);
  --fab-background-color: var(
    --ino-fab-background-color,
    #{theme.color(primary)}
  );
  --fab-background-color-hover: var(
    --ino-fab-background-color-hover,
    #{theme.color(primary, light)}
  );
  --fab-background-color-active: var(
    --ino-fab-background-color-active,
    #{theme.color(primary, dark)}
  );
  --fab-icon-color: var(
    --ino-fab-icon-color,
    #{theme.color(primary, contrast)}
  );
  --fab-color-disabled: var(
    --ino-fab-color-disabled,
    #{theme.color(primary, contrast)}
  );
  --fab-background-color-disabled: var(
    --ino-background-color-disabled,
    #{theme.color(dark, light)}
  );
  --fab-icon-color-disabled: var(
    --ino-fab-icon-color-disabled,
    #{theme.color(primary, contrast)}
  );
}

/*** colors ***/
:host .mdc-fab {
  @include setEdgedBorders(top-left);

  @include fab.ink-color(var(--fab-color));
  @include fab.container-color(var(--fab-background-color));

  &:hover {
    @include fab.container-color(var(--fab-background-color-hover));
  }

  &:active,
  &:after {
    @include fab.container-color(var(--fab-background-color-active));
  }

  &:disabled {
    @include fab.ink-color(var(--fab-color-disabled));
    @include fab.container-color(var(--fab-background-color-disabled));
    pointer-events: none;

    ::slotted(ino-icon),
    ino-icon {
      --icon-color: var(--fab-icon-color-disabled);
    }
  }

  ::slotted(ino-icon),
  ino-icon {
    --icon-color: var(--fab-icon-color);
  }
}

// Generate ino-edge-position classes
@each $position in $edge-positions {
  :host(.ino-fab--edge-position-#{$position}) .mdc-fab {
    @include setEdgedBorders($position);
  }
}

:host {
  display: inline-block;

  .mdc-fab {
    ::slotted(ino-icon),
    ino-icon {
      --icon-width: 30px;
      --icon-height: 30px;
    }

    &.mdc-fab--mini ::slotted(ino-icon),
    &.mdc-fab--mini ino-icon {
      --icon-width: 25px;
      --icon-height: 25px;
    }

    &:not(.mdc-fab--extended),
    &.mdc-fab--extended {
      box-shadow: 0 4px 8px 0 rgba(61, 64, 245, 0.3),
        0 12px 28px 0 rgba(61, 214, 245, 0.14);
    }

    &:active {
      box-shadow: 0 8px 16px 0 rgba(61, 64, 245, 0.3),
        0 16px 32px 0 rgba(61, 214, 245, 0.14);
    }
  }
}
