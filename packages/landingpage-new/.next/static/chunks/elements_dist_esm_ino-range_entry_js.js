"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["elements_dist_esm_ino-range_entry_js"],{

/***/ "../elements/dist/esm/_commonjsHelpers-212d567a.js":
/*!*********************************************************!*\
  !*** ../elements/dist/esm/_commonjsHelpers-212d567a.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"a\": function() { return /* binding */ commonjsGlobal; },\n/* harmony export */   \"c\": function() { return /* binding */ createCommonjsModule; },\n/* harmony export */   \"g\": function() { return /* binding */ getDefaultExportFromCjs; }\n/* harmony export */ });\n/*!\n * Crafted with ❤ by inovex GmbH\n */\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, basedir, module) {\n\treturn module = {\n\t\tpath: basedir,\n\t\texports: {},\n\t\trequire: function (path, base) {\n\t\t\treturn commonjsRequire();\n\t\t}\n\t}, fn(module, module.exports), module.exports;\n}\n\nfunction commonjsRequire () {\n\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vX2NvbW1vbmpzSGVscGVycy0yMTJkNTY3YS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxzSEFBc0gscUJBQU0sbUJBQW1CLHFCQUFNOztBQUVySjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7O0FBRXdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9lbGVtZW50cy9kaXN0L2VzbS9fY29tbW9uanNIZWxwZXJzLTIxMmQ1NjdhLmpzPzAxMTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDcmFmdGVkIHdpdGgg4p2kIGJ5IGlub3ZleCBHbWJIXG4gKi9cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyAoeCkge1xuXHRyZXR1cm4geCAmJiB4Ll9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdkZWZhdWx0JykgPyB4WydkZWZhdWx0J10gOiB4O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgYmFzZWRpciwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7XG5cdFx0cGF0aDogYmFzZWRpcixcblx0XHRleHBvcnRzOiB7fSxcblx0XHRyZXF1aXJlOiBmdW5jdGlvbiAocGF0aCwgYmFzZSkge1xuXHRcdFx0cmV0dXJuIGNvbW1vbmpzUmVxdWlyZSgpO1xuXHRcdH1cblx0fSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG5mdW5jdGlvbiBjb21tb25qc1JlcXVpcmUgKCkge1xuXHR0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IEByb2xsdXAvcGx1Z2luLWNvbW1vbmpzJyk7XG59XG5cbmV4cG9ydCB7IGNvbW1vbmpzR2xvYmFsIGFzIGEsIGNyZWF0ZUNvbW1vbmpzTW9kdWxlIGFzIGMsIGdldERlZmF1bHRFeHBvcnRGcm9tQ2pzIGFzIGcgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../elements/dist/esm/_commonjsHelpers-212d567a.js\n"));

/***/ }),

/***/ "../elements/dist/esm/animationframe-28b556b2.js":
/*!*******************************************************!*\
  !*** ../elements/dist/esm/animationframe-28b556b2.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"A\": function() { return /* binding */ AnimationFrame; }\n/* harmony export */ });\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * AnimationFrame provides a user-friendly abstraction around requesting\n * and canceling animation frames.\n */\nvar AnimationFrame = /** @class */ (function () {\n    function AnimationFrame() {\n        this.rafIDs = new Map();\n    }\n    /**\n     * Requests an animation frame. Cancels any existing frame with the same key.\n     * @param {string} key The key for this callback.\n     * @param {FrameRequestCallback} callback The callback to be executed.\n     */\n    AnimationFrame.prototype.request = function (key, callback) {\n        var _this = this;\n        this.cancel(key);\n        var frameID = requestAnimationFrame(function (frame) {\n            _this.rafIDs.delete(key);\n            // Callback must come *after* the key is deleted so that nested calls to\n            // request with the same key are not deleted.\n            callback(frame);\n        });\n        this.rafIDs.set(key, frameID);\n    };\n    /**\n     * Cancels a queued callback with the given key.\n     * @param {string} key The key for this callback.\n     */\n    AnimationFrame.prototype.cancel = function (key) {\n        var rafID = this.rafIDs.get(key);\n        if (rafID) {\n            cancelAnimationFrame(rafID);\n            this.rafIDs.delete(key);\n        }\n    };\n    /**\n     * Cancels all queued callback.\n     */\n    AnimationFrame.prototype.cancelAll = function () {\n        var _this = this;\n        // Need to use forEach because it's the only iteration method supported\n        // by IE11. Suppress the underscore because we don't need it.\n        // tslint:disable-next-line:enforce-name-casing\n        this.rafIDs.forEach(function (_, key) {\n            _this.cancel(key);\n        });\n    };\n    /**\n     * Returns the queue of unexecuted callback keys.\n     */\n    AnimationFrame.prototype.getQueue = function () {\n        var queue = [];\n        // Need to use forEach because it's the only iteration method supported\n        // by IE11. Suppress the underscore because we don't need it.\n        // tslint:disable-next-line:enforce-name-casing\n        this.rafIDs.forEach(function (_, key) {\n            queue.push(key);\n        });\n        return queue;\n    };\n    return AnimationFrame;\n}());\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vYW5pbWF0aW9uZnJhbWUtMjhiNTU2YjIuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxzQkFBc0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9lbGVtZW50cy9kaXN0L2VzbS9hbmltYXRpb25mcmFtZS0yOGI1NTZiMi5qcz8xYzg2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ3JhZnRlZCB3aXRoIOKdpCBieSBpbm92ZXggR21iSFxuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbi8qKlxuICogQW5pbWF0aW9uRnJhbWUgcHJvdmlkZXMgYSB1c2VyLWZyaWVuZGx5IGFic3RyYWN0aW9uIGFyb3VuZCByZXF1ZXN0aW5nXG4gKiBhbmQgY2FuY2VsaW5nIGFuaW1hdGlvbiBmcmFtZXMuXG4gKi9cbnZhciBBbmltYXRpb25GcmFtZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbmltYXRpb25GcmFtZSgpIHtcbiAgICAgICAgdGhpcy5yYWZJRHMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcXVlc3RzIGFuIGFuaW1hdGlvbiBmcmFtZS4gQ2FuY2VscyBhbnkgZXhpc3RpbmcgZnJhbWUgd2l0aCB0aGUgc2FtZSBrZXkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IGZvciB0aGlzIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7RnJhbWVSZXF1ZXN0Q2FsbGJhY2t9IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBiZSBleGVjdXRlZC5cbiAgICAgKi9cbiAgICBBbmltYXRpb25GcmFtZS5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChrZXksIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY2FuY2VsKGtleSk7XG4gICAgICAgIHZhciBmcmFtZUlEID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgICAgX3RoaXMucmFmSURzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgLy8gQ2FsbGJhY2sgbXVzdCBjb21lICphZnRlciogdGhlIGtleSBpcyBkZWxldGVkIHNvIHRoYXQgbmVzdGVkIGNhbGxzIHRvXG4gICAgICAgICAgICAvLyByZXF1ZXN0IHdpdGggdGhlIHNhbWUga2V5IGFyZSBub3QgZGVsZXRlZC5cbiAgICAgICAgICAgIGNhbGxiYWNrKGZyYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmFmSURzLnNldChrZXksIGZyYW1lSUQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyBhIHF1ZXVlZCBjYWxsYmFjayB3aXRoIHRoZSBnaXZlbiBrZXkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IGZvciB0aGlzIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIEFuaW1hdGlvbkZyYW1lLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciByYWZJRCA9IHRoaXMucmFmSURzLmdldChrZXkpO1xuICAgICAgICBpZiAocmFmSUQpIHtcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZklEKTtcbiAgICAgICAgICAgIHRoaXMucmFmSURzLmRlbGV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIGFsbCBxdWV1ZWQgY2FsbGJhY2suXG4gICAgICovXG4gICAgQW5pbWF0aW9uRnJhbWUucHJvdG90eXBlLmNhbmNlbEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gTmVlZCB0byB1c2UgZm9yRWFjaCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgaXRlcmF0aW9uIG1ldGhvZCBzdXBwb3J0ZWRcbiAgICAgICAgLy8gYnkgSUUxMS4gU3VwcHJlc3MgdGhlIHVuZGVyc2NvcmUgYmVjYXVzZSB3ZSBkb24ndCBuZWVkIGl0LlxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZW5mb3JjZS1uYW1lLWNhc2luZ1xuICAgICAgICB0aGlzLnJhZklEcy5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHtcbiAgICAgICAgICAgIF90aGlzLmNhbmNlbChrZXkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHF1ZXVlIG9mIHVuZXhlY3V0ZWQgY2FsbGJhY2sga2V5cy5cbiAgICAgKi9cbiAgICBBbmltYXRpb25GcmFtZS5wcm90b3R5cGUuZ2V0UXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBxdWV1ZSA9IFtdO1xuICAgICAgICAvLyBOZWVkIHRvIHVzZSBmb3JFYWNoIGJlY2F1c2UgaXQncyB0aGUgb25seSBpdGVyYXRpb24gbWV0aG9kIHN1cHBvcnRlZFxuICAgICAgICAvLyBieSBJRTExLiBTdXBwcmVzcyB0aGUgdW5kZXJzY29yZSBiZWNhdXNlIHdlIGRvbid0IG5lZWQgaXQuXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTplbmZvcmNlLW5hbWUtY2FzaW5nXG4gICAgICAgIHRoaXMucmFmSURzLmZvckVhY2goZnVuY3Rpb24gKF8sIGtleSkge1xuICAgICAgICAgICAgcXVldWUucHVzaChrZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHF1ZXVlO1xuICAgIH07XG4gICAgcmV0dXJuIEFuaW1hdGlvbkZyYW1lO1xufSgpKTtcblxuZXhwb3J0IHsgQW5pbWF0aW9uRnJhbWUgYXMgQSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../elements/dist/esm/animationframe-28b556b2.js\n"));

/***/ }),

/***/ "../elements/dist/esm/component-780a5882.js":
/*!**************************************************!*\
  !*** ../elements/dist/esm/component-780a5882.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"M\": function() { return /* binding */ MDCRipple; },\n/* harmony export */   \"a\": function() { return /* binding */ applyPassive; },\n/* harmony export */   \"b\": function() { return /* binding */ MDCRippleFoundation; }\n/* harmony export */ });\n/* harmony import */ var _component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component-97c8fef9.js */ \"../elements/dist/esm/component-97c8fef9.js\");\n/* harmony import */ var _ponyfill_495ec32d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ponyfill-495ec32d.js */ \"../elements/dist/esm/ponyfill-495ec32d.js\");\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n\n\n\n/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Determine whether the current browser supports passive event listeners, and\n * if so, use them.\n */\nfunction applyPassive(globalObj) {\n    if (globalObj === void 0) { globalObj = window; }\n    return supportsPassiveOption(globalObj) ?\n        { passive: true } :\n        false;\n}\nfunction supportsPassiveOption(globalObj) {\n    if (globalObj === void 0) { globalObj = window; }\n    // See\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n    var passiveSupported = false;\n    try {\n        var options = {\n            // This function will be called when the browser\n            // attempts to access the passive property.\n            get passive() {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        var handler = function () { };\n        globalObj.document.addEventListener('test', handler, options);\n        globalObj.document.removeEventListener('test', handler, options);\n    }\n    catch (err) {\n        passiveSupported = false;\n    }\n    return passiveSupported;\n}\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar cssClasses = {\n    // Ripple is a special case where the \"root\" component is really a \"mixin\" of sorts,\n    // given that it's an 'upgrade' to an existing component. That being said it is the root\n    // CSS class that all other CSS classes derive from.\n    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',\n    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',\n    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',\n    ROOT: 'mdc-ripple-upgraded',\n    UNBOUNDED: 'mdc-ripple-upgraded--unbounded',\n};\nvar strings = {\n    VAR_FG_SCALE: '--mdc-ripple-fg-scale',\n    VAR_FG_SIZE: '--mdc-ripple-fg-size',\n    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',\n    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',\n    VAR_LEFT: '--mdc-ripple-left',\n    VAR_TOP: '--mdc-ripple-top',\n};\nvar numbers = {\n    DEACTIVATION_TIMEOUT_MS: 225,\n    FG_DEACTIVATION_MS: 150,\n    INITIAL_ORIGIN_SCALE: 0.6,\n    PADDING: 10,\n    TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices\n};\n\n/**\n * Stores result from supportsCssVariables to avoid redundant processing to\n * detect CSS custom variable support.\n */\nvar supportsCssVariables_;\nfunction supportsCssVariables(windowObj, forceRefresh) {\n    if (forceRefresh === void 0) { forceRefresh = false; }\n    var CSS = windowObj.CSS;\n    var supportsCssVars = supportsCssVariables_;\n    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {\n        return supportsCssVariables_;\n    }\n    var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';\n    if (!supportsFunctionPresent) {\n        return false;\n    }\n    var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');\n    // See: https://bugs.webkit.org/show_bug.cgi?id=154669\n    // See: README section on Safari\n    var weAreFeatureDetectingSafari10plus = (CSS.supports('(--css-vars: yes)') &&\n        CSS.supports('color', '#00000000'));\n    supportsCssVars =\n        explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;\n    if (!forceRefresh) {\n        supportsCssVariables_ = supportsCssVars;\n    }\n    return supportsCssVars;\n}\nfunction getNormalizedEventCoords(evt, pageOffset, clientRect) {\n    if (!evt) {\n        return { x: 0, y: 0 };\n    }\n    var x = pageOffset.x, y = pageOffset.y;\n    var documentX = x + clientRect.left;\n    var documentY = y + clientRect.top;\n    var normalizedX;\n    var normalizedY;\n    // Determine touch point relative to the ripple container.\n    if (evt.type === 'touchstart') {\n        var touchEvent = evt;\n        normalizedX = touchEvent.changedTouches[0].pageX - documentX;\n        normalizedY = touchEvent.changedTouches[0].pageY - documentY;\n    }\n    else {\n        var mouseEvent = evt;\n        normalizedX = mouseEvent.pageX - documentX;\n        normalizedY = mouseEvent.pageY - documentY;\n    }\n    return { x: normalizedX, y: normalizedY };\n}\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n// Activation events registered on the root element of each instance for activation\nvar ACTIVATION_EVENT_TYPES = [\n    'touchstart', 'pointerdown', 'mousedown', 'keydown',\n];\n// Deactivation events registered on documentElement when a pointer-related down event occurs\nvar POINTER_DEACTIVATION_EVENT_TYPES = [\n    'touchend', 'pointerup', 'mouseup', 'contextmenu',\n];\n// simultaneous nested activations\nvar activatedTargets = [];\nvar MDCRippleFoundation = /** @class */ (function (_super) {\n    (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__._)(MDCRippleFoundation, _super);\n    function MDCRippleFoundation(adapter) {\n        var _this = _super.call(this, (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.a)({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;\n        _this.activationAnimationHasEnded = false;\n        _this.activationTimer = 0;\n        _this.fgDeactivationRemovalTimer = 0;\n        _this.fgScale = '0';\n        _this.frame = { width: 0, height: 0 };\n        _this.initialSize = 0;\n        _this.layoutFrame = 0;\n        _this.maxRadius = 0;\n        _this.unboundedCoords = { left: 0, top: 0 };\n        _this.activationState = _this.defaultActivationState();\n        _this.activationTimerCallback = function () {\n            _this.activationAnimationHasEnded = true;\n            _this.runDeactivationUXLogicIfReady();\n        };\n        _this.activateHandler = function (e) {\n            _this.activateImpl(e);\n        };\n        _this.deactivateHandler = function () {\n            _this.deactivateImpl();\n        };\n        _this.focusHandler = function () {\n            _this.handleFocus();\n        };\n        _this.blurHandler = function () {\n            _this.handleBlur();\n        };\n        _this.resizeHandler = function () {\n            _this.layout();\n        };\n        return _this;\n    }\n    Object.defineProperty(MDCRippleFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                addClass: function () { return undefined; },\n                browserSupportsCssVars: function () { return true; },\n                computeBoundingRect: function () {\n                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });\n                },\n                containsEventTarget: function () { return true; },\n                deregisterDocumentInteractionHandler: function () { return undefined; },\n                deregisterInteractionHandler: function () { return undefined; },\n                deregisterResizeHandler: function () { return undefined; },\n                getWindowPageOffset: function () { return ({ x: 0, y: 0 }); },\n                isSurfaceActive: function () { return true; },\n                isSurfaceDisabled: function () { return true; },\n                isUnbounded: function () { return true; },\n                registerDocumentInteractionHandler: function () { return undefined; },\n                registerInteractionHandler: function () { return undefined; },\n                registerResizeHandler: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                updateCssVariable: function () { return undefined; },\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCRippleFoundation.prototype.init = function () {\n        var _this = this;\n        var supportsPressRipple = this.supportsPressRipple();\n        this.registerRootHandlers(supportsPressRipple);\n        if (supportsPressRipple) {\n            var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;\n            requestAnimationFrame(function () {\n                _this.adapter.addClass(ROOT_1);\n                if (_this.adapter.isUnbounded()) {\n                    _this.adapter.addClass(UNBOUNDED_1);\n                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n                    _this.layoutInternal();\n                }\n            });\n        }\n    };\n    MDCRippleFoundation.prototype.destroy = function () {\n        var _this = this;\n        if (this.supportsPressRipple()) {\n            if (this.activationTimer) {\n                clearTimeout(this.activationTimer);\n                this.activationTimer = 0;\n                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);\n            }\n            if (this.fgDeactivationRemovalTimer) {\n                clearTimeout(this.fgDeactivationRemovalTimer);\n                this.fgDeactivationRemovalTimer = 0;\n                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);\n            }\n            var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;\n            requestAnimationFrame(function () {\n                _this.adapter.removeClass(ROOT_2);\n                _this.adapter.removeClass(UNBOUNDED_2);\n                _this.removeCssVars();\n            });\n        }\n        this.deregisterRootHandlers();\n        this.deregisterDeactivationHandlers();\n    };\n    /**\n     * @param evt Optional event containing position information.\n     */\n    MDCRippleFoundation.prototype.activate = function (evt) {\n        this.activateImpl(evt);\n    };\n    MDCRippleFoundation.prototype.deactivate = function () {\n        this.deactivateImpl();\n    };\n    MDCRippleFoundation.prototype.layout = function () {\n        var _this = this;\n        if (this.layoutFrame) {\n            cancelAnimationFrame(this.layoutFrame);\n        }\n        this.layoutFrame = requestAnimationFrame(function () {\n            _this.layoutInternal();\n            _this.layoutFrame = 0;\n        });\n    };\n    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {\n        var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;\n        if (unbounded) {\n            this.adapter.addClass(UNBOUNDED);\n        }\n        else {\n            this.adapter.removeClass(UNBOUNDED);\n        }\n    };\n    MDCRippleFoundation.prototype.handleFocus = function () {\n        var _this = this;\n        requestAnimationFrame(function () { return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });\n    };\n    MDCRippleFoundation.prototype.handleBlur = function () {\n        var _this = this;\n        requestAnimationFrame(function () { return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });\n    };\n    /**\n     * We compute this property so that we are not querying information about the client\n     * until the point in time where the foundation requests it. This prevents scenarios where\n     * client-side feature-detection may happen too early, such as when components are rendered on the server\n     * and then initialized at mount time on the client.\n     */\n    MDCRippleFoundation.prototype.supportsPressRipple = function () {\n        return this.adapter.browserSupportsCssVars();\n    };\n    MDCRippleFoundation.prototype.defaultActivationState = function () {\n        return {\n            activationEvent: undefined,\n            hasDeactivationUXRun: false,\n            isActivated: false,\n            isProgrammatic: false,\n            wasActivatedByPointer: false,\n            wasElementMadeActive: false,\n        };\n    };\n    /**\n     * supportsPressRipple Passed from init to save a redundant function call\n     */\n    MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {\n        var e_1, _a;\n        if (supportsPressRipple) {\n            try {\n                for (var ACTIVATION_EVENT_TYPES_1 = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.b)(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {\n                    var evtType = ACTIVATION_EVENT_TYPES_1_1.value;\n                    this.adapter.registerInteractionHandler(evtType, this.activateHandler);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            if (this.adapter.isUnbounded()) {\n                this.adapter.registerResizeHandler(this.resizeHandler);\n            }\n        }\n        this.adapter.registerInteractionHandler('focus', this.focusHandler);\n        this.adapter.registerInteractionHandler('blur', this.blurHandler);\n    };\n    MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {\n        var e_2, _a;\n        if (evt.type === 'keydown') {\n            this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);\n        }\n        else {\n            try {\n                for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.b)(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {\n                    var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;\n                    this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n    };\n    MDCRippleFoundation.prototype.deregisterRootHandlers = function () {\n        var e_3, _a;\n        try {\n            for (var ACTIVATION_EVENT_TYPES_2 = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.b)(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {\n                var evtType = ACTIVATION_EVENT_TYPES_2_1.value;\n                this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        this.adapter.deregisterInteractionHandler('focus', this.focusHandler);\n        this.adapter.deregisterInteractionHandler('blur', this.blurHandler);\n        if (this.adapter.isUnbounded()) {\n            this.adapter.deregisterResizeHandler(this.resizeHandler);\n        }\n    };\n    MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {\n        var e_4, _a;\n        this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);\n        try {\n            for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.b)(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {\n                var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;\n                this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n    };\n    MDCRippleFoundation.prototype.removeCssVars = function () {\n        var _this = this;\n        var rippleStrings = MDCRippleFoundation.strings;\n        var keys = Object.keys(rippleStrings);\n        keys.forEach(function (key) {\n            if (key.indexOf('VAR_') === 0) {\n                _this.adapter.updateCssVariable(rippleStrings[key], null);\n            }\n        });\n    };\n    MDCRippleFoundation.prototype.activateImpl = function (evt) {\n        var _this = this;\n        if (this.adapter.isSurfaceDisabled()) {\n            return;\n        }\n        var activationState = this.activationState;\n        if (activationState.isActivated) {\n            return;\n        }\n        // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n        var previousActivationEvent = this.previousActivationEvent;\n        var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;\n        if (isSameInteraction) {\n            return;\n        }\n        activationState.isActivated = true;\n        activationState.isProgrammatic = evt === undefined;\n        activationState.activationEvent = evt;\n        activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');\n        var hasActivatedChild = evt !== undefined &&\n            activatedTargets.length > 0 &&\n            activatedTargets.some(function (target) { return _this.adapter.containsEventTarget(target); });\n        if (hasActivatedChild) {\n            // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n            this.resetActivationState();\n            return;\n        }\n        if (evt !== undefined) {\n            activatedTargets.push(evt.target);\n            this.registerDeactivationHandlers(evt);\n        }\n        activationState.wasElementMadeActive = this.checkElementMadeActive(evt);\n        if (activationState.wasElementMadeActive) {\n            this.animateActivation();\n        }\n        requestAnimationFrame(function () {\n            // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n            activatedTargets = [];\n            if (!activationState.wasElementMadeActive\n                && evt !== undefined\n                && (evt.key === ' ' || evt.keyCode === 32)) {\n                // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n                // active states inconsistently when they're called within event handling code:\n                // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n                // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n                // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n                // variable is set within a rAF callback for a submit button interaction (#2241).\n                activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);\n                if (activationState.wasElementMadeActive) {\n                    _this.animateActivation();\n                }\n            }\n            if (!activationState.wasElementMadeActive) {\n                // Reset activation state immediately if element was not made active.\n                _this.activationState = _this.defaultActivationState();\n            }\n        });\n    };\n    MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {\n        return (evt !== undefined && evt.type === 'keydown') ?\n            this.adapter.isSurfaceActive() :\n            true;\n    };\n    MDCRippleFoundation.prototype.animateActivation = function () {\n        var _this = this;\n        var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;\n        var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;\n        var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;\n        this.layoutInternal();\n        var translateStart = '';\n        var translateEnd = '';\n        if (!this.adapter.isUnbounded()) {\n            var _c = this.getFgTranslationCoordinates(), startPoint = _c.startPoint, endPoint = _c.endPoint;\n            translateStart = startPoint.x + \"px, \" + startPoint.y + \"px\";\n            translateEnd = endPoint.x + \"px, \" + endPoint.y + \"px\";\n        }\n        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);\n        // Cancel any ongoing activation/deactivation animations\n        clearTimeout(this.activationTimer);\n        clearTimeout(this.fgDeactivationRemovalTimer);\n        this.rmBoundedActivationClasses();\n        this.adapter.removeClass(FG_DEACTIVATION);\n        // Force layout in order to re-trigger the animation.\n        this.adapter.computeBoundingRect();\n        this.adapter.addClass(FG_ACTIVATION);\n        this.activationTimer = setTimeout(function () {\n            _this.activationTimerCallback();\n        }, DEACTIVATION_TIMEOUT_MS);\n    };\n    MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {\n        var _a = this.activationState, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;\n        var startPoint;\n        if (wasActivatedByPointer) {\n            startPoint = getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());\n        }\n        else {\n            startPoint = {\n                x: this.frame.width / 2,\n                y: this.frame.height / 2,\n            };\n        }\n        // Center the element around the start point.\n        startPoint = {\n            x: startPoint.x - (this.initialSize / 2),\n            y: startPoint.y - (this.initialSize / 2),\n        };\n        var endPoint = {\n            x: (this.frame.width / 2) - (this.initialSize / 2),\n            y: (this.frame.height / 2) - (this.initialSize / 2),\n        };\n        return { startPoint: startPoint, endPoint: endPoint };\n    };\n    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {\n        var _this = this;\n        // This method is called both when a pointing device is released, and when the activation animation ends.\n        // The deactivation animation should only run after both of those occur.\n        var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;\n        var _a = this.activationState, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;\n        var activationHasEnded = hasDeactivationUXRun || !isActivated;\n        if (activationHasEnded && this.activationAnimationHasEnded) {\n            this.rmBoundedActivationClasses();\n            this.adapter.addClass(FG_DEACTIVATION);\n            this.fgDeactivationRemovalTimer = setTimeout(function () {\n                _this.adapter.removeClass(FG_DEACTIVATION);\n            }, numbers.FG_DEACTIVATION_MS);\n        }\n    };\n    MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {\n        var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n        this.adapter.removeClass(FG_ACTIVATION);\n        this.activationAnimationHasEnded = false;\n        this.adapter.computeBoundingRect();\n    };\n    MDCRippleFoundation.prototype.resetActivationState = function () {\n        var _this = this;\n        this.previousActivationEvent = this.activationState.activationEvent;\n        this.activationState = this.defaultActivationState();\n        // Touch devices may fire additional events for the same interaction within a short time.\n        // Store the previous event until it's safe to assume that subsequent events are for new interactions.\n        setTimeout(function () { return _this.previousActivationEvent = undefined; }, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n    };\n    MDCRippleFoundation.prototype.deactivateImpl = function () {\n        var _this = this;\n        var activationState = this.activationState;\n        // This can happen in scenarios such as when you have a keyup event that blurs the element.\n        if (!activationState.isActivated) {\n            return;\n        }\n        var state = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.a)({}, activationState);\n        if (activationState.isProgrammatic) {\n            requestAnimationFrame(function () {\n                _this.animateDeactivation(state);\n            });\n            this.resetActivationState();\n        }\n        else {\n            this.deregisterDeactivationHandlers();\n            requestAnimationFrame(function () {\n                _this.activationState.hasDeactivationUXRun = true;\n                _this.animateDeactivation(state);\n                _this.resetActivationState();\n            });\n        }\n    };\n    MDCRippleFoundation.prototype.animateDeactivation = function (_a) {\n        var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;\n        if (wasActivatedByPointer || wasElementMadeActive) {\n            this.runDeactivationUXLogicIfReady();\n        }\n    };\n    MDCRippleFoundation.prototype.layoutInternal = function () {\n        var _this = this;\n        this.frame = this.adapter.computeBoundingRect();\n        var maxDim = Math.max(this.frame.height, this.frame.width);\n        // Surface diameter is treated differently for unbounded vs. bounded ripples.\n        // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n        // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n        // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter\n        // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via\n        // `overflow: hidden`.\n        var getBoundedRadius = function () {\n            var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));\n            return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n        };\n        this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();\n        // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n        var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);\n        // Unbounded ripple size should always be even number to equally center align.\n        if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {\n            this.initialSize = initialSize - 1;\n        }\n        else {\n            this.initialSize = initialSize;\n        }\n        this.fgScale = \"\" + this.maxRadius / this.initialSize;\n        this.updateLayoutCssVars();\n    };\n    MDCRippleFoundation.prototype.updateLayoutCssVars = function () {\n        var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;\n        this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + \"px\");\n        this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);\n        if (this.adapter.isUnbounded()) {\n            this.unboundedCoords = {\n                left: Math.round((this.frame.width / 2) - (this.initialSize / 2)),\n                top: Math.round((this.frame.height / 2) - (this.initialSize / 2)),\n            };\n            this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + \"px\");\n            this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + \"px\");\n        }\n    };\n    return MDCRippleFoundation;\n}(_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.M));\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCRipple = /** @class */ (function (_super) {\n    (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__._)(MDCRipple, _super);\n    function MDCRipple() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.disabled = false;\n        return _this;\n    }\n    MDCRipple.attachTo = function (root, opts) {\n        if (opts === void 0) { opts = {\n            isUnbounded: undefined\n        }; }\n        var ripple = new MDCRipple(root);\n        // Only override unbounded behavior if option is explicitly specified\n        if (opts.isUnbounded !== undefined) {\n            ripple.unbounded = opts.isUnbounded;\n        }\n        return ripple;\n    };\n    MDCRipple.createAdapter = function (instance) {\n        return {\n            addClass: function (className) { return instance.root.classList.add(className); },\n            browserSupportsCssVars: function () { return supportsCssVariables(window); },\n            computeBoundingRect: function () { return instance.root.getBoundingClientRect(); },\n            containsEventTarget: function (target) { return instance.root.contains(target); },\n            deregisterDocumentInteractionHandler: function (evtType, handler) {\n                return document.documentElement.removeEventListener(evtType, handler, applyPassive());\n            },\n            deregisterInteractionHandler: function (evtType, handler) {\n                return instance.root\n                    .removeEventListener(evtType, handler, applyPassive());\n            },\n            deregisterResizeHandler: function (handler) {\n                return window.removeEventListener('resize', handler);\n            },\n            getWindowPageOffset: function () {\n                return ({ x: window.pageXOffset, y: window.pageYOffset });\n            },\n            isSurfaceActive: function () { return (0,_ponyfill_495ec32d_js__WEBPACK_IMPORTED_MODULE_1__.m)(instance.root, ':active'); },\n            isSurfaceDisabled: function () { return Boolean(instance.disabled); },\n            isUnbounded: function () { return Boolean(instance.unbounded); },\n            registerDocumentInteractionHandler: function (evtType, handler) {\n                return document.documentElement.addEventListener(evtType, handler, applyPassive());\n            },\n            registerInteractionHandler: function (evtType, handler) {\n                return instance.root\n                    .addEventListener(evtType, handler, applyPassive());\n            },\n            registerResizeHandler: function (handler) {\n                return window.addEventListener('resize', handler);\n            },\n            removeClass: function (className) { return instance.root.classList.remove(className); },\n            updateCssVariable: function (varName, value) {\n                return instance.root.style.setProperty(varName, value);\n            },\n        };\n    };\n    Object.defineProperty(MDCRipple.prototype, \"unbounded\", {\n        get: function () {\n            return Boolean(this.isUnbounded);\n        },\n        set: function (unbounded) {\n            this.isUnbounded = Boolean(unbounded);\n            this.setUnbounded();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCRipple.prototype.activate = function () {\n        this.foundation.activate();\n    };\n    MDCRipple.prototype.deactivate = function () {\n        this.foundation.deactivate();\n    };\n    MDCRipple.prototype.layout = function () {\n        this.foundation.layout();\n    };\n    MDCRipple.prototype.getDefaultFoundation = function () {\n        return new MDCRippleFoundation(MDCRipple.createAdapter(this));\n    };\n    MDCRipple.prototype.initialSyncWithDOM = function () {\n        var root = this.root;\n        this.isUnbounded = 'mdcRippleIsUnbounded' in root.dataset;\n    };\n    /**\n     * Closure Compiler throws an access control error when directly accessing a\n     * protected or private property inside a getter/setter, like unbounded above.\n     * By accessing the protected property inside a method, we solve that problem.\n     * That's why this function exists.\n     */\n    MDCRipple.prototype.setUnbounded = function () {\n        this.foundation.setUnbounded(Boolean(this.isUnbounded));\n    };\n    return MDCRipple;\n}(_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.c));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../elements/dist/esm/component-780a5882.js\n"));

/***/ }),

/***/ "../elements/dist/esm/component-97c8fef9.js":
/*!**************************************************!*\
  !*** ../elements/dist/esm/component-97c8fef9.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"M\": function() { return /* binding */ MDCFoundation; },\n/* harmony export */   \"_\": function() { return /* binding */ __extends; },\n/* harmony export */   \"a\": function() { return /* binding */ __assign; },\n/* harmony export */   \"b\": function() { return /* binding */ __values; },\n/* harmony export */   \"c\": function() { return /* binding */ MDCComponent; },\n/* harmony export */   \"d\": function() { return /* binding */ __spreadArray; },\n/* harmony export */   \"e\": function() { return /* binding */ __read; }\n/* harmony export */ });\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCFoundation = /** @class */ (function () {\n    function MDCFoundation(adapter) {\n        if (adapter === void 0) { adapter = {}; }\n        this.adapter = adapter;\n    }\n    Object.defineProperty(MDCFoundation, \"cssClasses\", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports every\n            // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"strings\", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports all\n            // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"numbers\", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports all\n            // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"defaultAdapter\", {\n        get: function () {\n            // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n            // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n            // validation.\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCFoundation.prototype.init = function () {\n        // Subclasses should override this method to perform initialization routines (registering events, etc.)\n    };\n    MDCFoundation.prototype.destroy = function () {\n        // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n    };\n    return MDCFoundation;\n}());\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCComponent = /** @class */ (function () {\n    function MDCComponent(root, foundation) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        this.root = root;\n        this.initialize.apply(this, __spreadArray([], __read(args)));\n        // Note that we initialize foundation here and not within the constructor's\n        // default param so that this.root is defined and can be used within the\n        // foundation class.\n        this.foundation =\n            foundation === undefined ? this.getDefaultFoundation() : foundation;\n        this.foundation.init();\n        this.initialSyncWithDOM();\n    }\n    MDCComponent.attachTo = function (root) {\n        // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n        // returns an instantiated component with its root set to that element. Also note that in the cases of\n        // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n        // from getDefaultFoundation().\n        return new MDCComponent(root, new MDCFoundation({}));\n    };\n    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */\n    MDCComponent.prototype.initialize = function () {\n        var _args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            _args[_i] = arguments[_i];\n        }\n        // Subclasses can override this to do any additional setup work that would be considered part of a\n        // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n        // initialized. Any additional arguments besides root and foundation will be passed in here.\n    };\n    MDCComponent.prototype.getDefaultFoundation = function () {\n        // Subclasses must override this method to return a properly configured foundation class for the\n        // component.\n        throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +\n            'foundation class');\n    };\n    MDCComponent.prototype.initialSyncWithDOM = function () {\n        // Subclasses should override this method if they need to perform work to synchronize with a host DOM\n        // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n        // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n        // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n    };\n    MDCComponent.prototype.destroy = function () {\n        // Subclasses may implement this method to release any resources / deregister any listeners they have\n        // attached. An example of this might be deregistering a resize event from the window object.\n        this.foundation.destroy();\n    };\n    MDCComponent.prototype.listen = function (evtType, handler, options) {\n        this.root.addEventListener(evtType, handler, options);\n    };\n    MDCComponent.prototype.unlisten = function (evtType, handler, options) {\n        this.root.removeEventListener(evtType, handler, options);\n    };\n    /**\n     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.\n     */\n    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {\n        if (shouldBubble === void 0) { shouldBubble = false; }\n        var evt;\n        if (typeof CustomEvent === 'function') {\n            evt = new CustomEvent(evtType, {\n                bubbles: shouldBubble,\n                detail: evtData,\n            });\n        }\n        else {\n            evt = document.createEvent('CustomEvent');\n            evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n        }\n        this.root.dispatchEvent(evt);\n    };\n    return MDCComponent;\n}());\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../elements/dist/esm/component-97c8fef9.js\n"));

/***/ }),

/***/ "../elements/dist/esm/component-utils-1c4ae7be.js":
/*!********************************************************!*\
  !*** ../elements/dist/esm/component-utils-1c4ae7be.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"a\": function() { return /* binding */ generateUniqueId; },\n/* harmony export */   \"f\": function() { return /* binding */ focusIfExists; },\n/* harmony export */   \"g\": function() { return /* binding */ getSlotContent; },\n/* harmony export */   \"h\": function() { return /* binding */ hasSlotContent; },\n/* harmony export */   \"m\": function() { return /* binding */ moveCursorToEnd; },\n/* harmony export */   \"p\": function() { return /* binding */ preventEvent; }\n/* harmony export */ });\n/*!\n * Crafted with ❤ by inovex GmbH\n */\nfunction generateUniqueId() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\nfunction getSlotContent(el, slotName) {\n  return el.querySelector(`[slot=\"${slotName}\"]`);\n}\n/**\n * Checks if the given element has at least one child node at the given slot\n * @param el The element which has a (named) slot inside\n * @param slotName The name of the slot to check. If not provided default slot is used.\n * @return `true` if a child at the slot exists, otherwise `false`\n */\nfunction hasSlotContent(el, slotName) {\n  var _a;\n  return slotName\n    ? el.querySelectorAll(`[slot=\"${slotName}\"]`).length > 0\n    : ((_a = el.querySelector('slot')) === null || _a === void 0 ? void 0 : _a.assignedElements().length) === 0;\n}\n/**\n * Focuses the first element that has the `data-ino-focus` attribute.\n *\n * @param el The host element to search in\n */\nfunction focusIfExists(el) {\n  var _a;\n  (_a = el.querySelector('[data-ino-focus]')) === null || _a === void 0 ? void 0 : _a.focus();\n}\nfunction moveCursorToEnd(el) {\n  const len = el.value.length;\n  if (el.setSelectionRange) {\n    el.focus();\n    el.setSelectionRange(len, len);\n  }\n}\nfunction preventEvent(event) {\n  event.stopPropagation();\n  event.preventDefault();\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vY29tcG9uZW50LXV0aWxzLTFjNGFlN2JlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLFNBQVM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsU0FBUztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFd0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL2VsZW1lbnRzL2Rpc3QvZXNtL2NvbXBvbmVudC11dGlscy0xYzRhZTdiZS5qcz83YTBlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ3JhZnRlZCB3aXRoIOKdpCBieSBpbm92ZXggR21iSFxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVVuaXF1ZUlkKCkge1xuICAvLyBNYXRoLnJhbmRvbSBzaG91bGQgYmUgdW5pcXVlIGJlY2F1c2Ugb2YgaXRzIHNlZWRpbmcgYWxnb3JpdGhtLlxuICAvLyBDb252ZXJ0IGl0IHRvIGJhc2UgMzYgKG51bWJlcnMgKyBsZXR0ZXJzKSwgYW5kIGdyYWIgdGhlIGZpcnN0IDkgY2hhcmFjdGVyc1xuICAvLyBhZnRlciB0aGUgZGVjaW1hbC5cbiAgcmV0dXJuICdfJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KTtcbn1cbmZ1bmN0aW9uIGdldFNsb3RDb250ZW50KGVsLCBzbG90TmFtZSkge1xuICByZXR1cm4gZWwucXVlcnlTZWxlY3RvcihgW3Nsb3Q9XCIke3Nsb3ROYW1lfVwiXWApO1xufVxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaGFzIGF0IGxlYXN0IG9uZSBjaGlsZCBub2RlIGF0IHRoZSBnaXZlbiBzbG90XG4gKiBAcGFyYW0gZWwgVGhlIGVsZW1lbnQgd2hpY2ggaGFzIGEgKG5hbWVkKSBzbG90IGluc2lkZVxuICogQHBhcmFtIHNsb3ROYW1lIFRoZSBuYW1lIG9mIHRoZSBzbG90IHRvIGNoZWNrLiBJZiBub3QgcHJvdmlkZWQgZGVmYXVsdCBzbG90IGlzIHVzZWQuXG4gKiBAcmV0dXJuIGB0cnVlYCBpZiBhIGNoaWxkIGF0IHRoZSBzbG90IGV4aXN0cywgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xuZnVuY3Rpb24gaGFzU2xvdENvbnRlbnQoZWwsIHNsb3ROYW1lKSB7XG4gIHZhciBfYTtcbiAgcmV0dXJuIHNsb3ROYW1lXG4gICAgPyBlbC5xdWVyeVNlbGVjdG9yQWxsKGBbc2xvdD1cIiR7c2xvdE5hbWV9XCJdYCkubGVuZ3RoID4gMFxuICAgIDogKChfYSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ3Nsb3QnKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFzc2lnbmVkRWxlbWVudHMoKS5sZW5ndGgpID09PSAwO1xufVxuLyoqXG4gKiBGb2N1c2VzIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaGFzIHRoZSBgZGF0YS1pbm8tZm9jdXNgIGF0dHJpYnV0ZS5cbiAqXG4gKiBAcGFyYW0gZWwgVGhlIGhvc3QgZWxlbWVudCB0byBzZWFyY2ggaW5cbiAqL1xuZnVuY3Rpb24gZm9jdXNJZkV4aXN0cyhlbCkge1xuICB2YXIgX2E7XG4gIChfYSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWluby1mb2N1c10nKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG59XG5mdW5jdGlvbiBtb3ZlQ3Vyc29yVG9FbmQoZWwpIHtcbiAgY29uc3QgbGVuID0gZWwudmFsdWUubGVuZ3RoO1xuICBpZiAoZWwuc2V0U2VsZWN0aW9uUmFuZ2UpIHtcbiAgICBlbC5mb2N1cygpO1xuICAgIGVsLnNldFNlbGVjdGlvblJhbmdlKGxlbiwgbGVuKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJldmVudEV2ZW50KGV2ZW50KSB7XG4gIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5leHBvcnQgeyBnZW5lcmF0ZVVuaXF1ZUlkIGFzIGEsIGZvY3VzSWZFeGlzdHMgYXMgZiwgZ2V0U2xvdENvbnRlbnQgYXMgZywgaGFzU2xvdENvbnRlbnQgYXMgaCwgbW92ZUN1cnNvclRvRW5kIGFzIG0sIHByZXZlbnRFdmVudCBhcyBwIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../elements/dist/esm/component-utils-1c4ae7be.js\n"));

/***/ }),

/***/ "../elements/dist/esm/index-b7e5b0c5.js":
/*!**********************************************!*\
  !*** ../elements/dist/esm/index-b7e5b0c5.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"c\": function() { return /* binding */ classnames; }\n/* harmony export */ });\n/* harmony import */ var _commonjsHelpers_212d567a_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_commonjsHelpers-212d567a.js */ \"../elements/dist/esm/_commonjsHelpers-212d567a.js\");\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n\n\nvar classnames = (0,_commonjsHelpers_212d567a_js__WEBPACK_IMPORTED_MODULE_0__.c)(function (module) {\n/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vaW5kZXgtYjdlNWIwYzUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDMkU7O0FBRTNFLGlCQUFpQiwrREFBb0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGdCQUFnQjs7QUFFaEI7QUFDQTs7QUFFQSxrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQztBQUNELENBQUM7O0FBRTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9lbGVtZW50cy9kaXN0L2VzbS9pbmRleC1iN2U1YjBjNS5qcz83NjdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ3JhZnRlZCB3aXRoIOKdpCBieSBpbm92ZXggR21iSFxuICovXG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUNvbW1vbmpzTW9kdWxlIH0gZnJvbSAnLi9fY29tbW9uanNIZWxwZXJzLTIxMmQ1NjdhLmpzJztcblxudmFyIGNsYXNzbmFtZXMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4vKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xufSk7XG5cbmV4cG9ydCB7IGNsYXNzbmFtZXMgYXMgYyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../elements/dist/esm/index-b7e5b0c5.js\n"));

/***/ }),

/***/ "../elements/dist/esm/ino-range.entry.js":
/*!***********************************************!*\
  !*** ../elements/dist/esm/ino-range.entry.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ino_range\": function() { return /* binding */ Range; }\n/* harmony export */ });\n/* harmony import */ var _index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-dbb9ab19.js */ \"../elements/dist/esm/index-dbb9ab19.js\");\n/* harmony import */ var _index_b7e5b0c5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-b7e5b0c5.js */ \"../elements/dist/esm/index-b7e5b0c5.js\");\n/* harmony import */ var _component_utils_1c4ae7be_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component-utils-1c4ae7be.js */ \"../elements/dist/esm/component-utils-1c4ae7be.js\");\n/* harmony import */ var _component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./component-97c8fef9.js */ \"../elements/dist/esm/component-97c8fef9.js\");\n/* harmony import */ var _component_780a5882_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./component-780a5882.js */ \"../elements/dist/esm/component-780a5882.js\");\n/* harmony import */ var _ponyfill_495ec32d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ponyfill-495ec32d.js */ \"../elements/dist/esm/ponyfill-495ec32d.js\");\n/* harmony import */ var _animationframe_28b556b2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./animationframe-28b556b2.js */ \"../elements/dist/esm/animationframe-28b556b2.js\");\n/* harmony import */ var _util_a712b6e1_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util-a712b6e1.js */ \"../elements/dist/esm/util-a712b6e1.js\");\n/* harmony import */ var _commonjsHelpers_212d567a_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./_commonjsHelpers-212d567a.js */ \"../elements/dist/esm/_commonjsHelpers-212d567a.js\");\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n\n\n\n\n\n\n\n\n\n\n/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/** Slider element classes. */\nvar cssClasses = {\n    DISABLED: 'mdc-slider--disabled',\n    DISCRETE: 'mdc-slider--discrete',\n    INPUT: 'mdc-slider__input',\n    RANGE: 'mdc-slider--range',\n    THUMB: 'mdc-slider__thumb',\n    // Applied when thumb is in the focused state.\n    THUMB_FOCUSED: 'mdc-slider__thumb--focused',\n    THUMB_KNOB: 'mdc-slider__thumb-knob',\n    // Class added to the top thumb (for overlapping thumbs in range slider).\n    THUMB_TOP: 'mdc-slider__thumb--top',\n    THUMB_WITH_INDICATOR: 'mdc-slider__thumb--with-indicator',\n    TICK_MARKS: 'mdc-slider--tick-marks',\n    TICK_MARKS_CONTAINER: 'mdc-slider__tick-marks',\n    TICK_MARK_ACTIVE: 'mdc-slider__tick-mark--active',\n    TICK_MARK_INACTIVE: 'mdc-slider__tick-mark--inactive',\n    TRACK: 'mdc-slider__track',\n    // The active track fill element that will be scaled as the value changes.\n    TRACK_ACTIVE: 'mdc-slider__track--active_fill',\n    VALUE_INDICATOR_TEXT: 'mdc-slider__value-indicator-text',\n};\n/** Slider numbers. */\nvar numbers = {\n    // Default step size.\n    STEP_SIZE: 1,\n    // Minimum absolute difference between clientX of move event / down event\n    // for which to update thumb, in the case of overlapping thumbs.\n    // This is needed to reduce chances of choosing the thumb based on\n    // pointer jitter.\n    THUMB_UPDATE_MIN_PX: 5,\n};\n/** Slider attributes. */\nvar attributes = {\n    ARIA_VALUETEXT: 'aria-valuetext',\n    INPUT_DISABLED: 'disabled',\n    INPUT_MIN: 'min',\n    INPUT_MAX: 'max',\n    INPUT_VALUE: 'value',\n    INPUT_STEP: 'step',\n};\n/** Slider events. */\nvar events = {\n    CHANGE: 'MDCSlider:change',\n    INPUT: 'MDCSlider:input',\n};\n\n/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/** Tick mark enum, for discrete sliders. */\nvar TickMark;\n(function (TickMark) {\n    TickMark[TickMark[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    TickMark[TickMark[\"INACTIVE\"] = 1] = \"INACTIVE\";\n})(TickMark || (TickMark = {}));\n/**\n * Thumb types: range slider has two thumbs (START, END) whereas single point\n * slider only has one thumb (END).\n */\nvar Thumb;\n(function (Thumb) {\n    // Thumb at start of slider (e.g. in LTR mode, left thumb on range slider).\n    Thumb[Thumb[\"START\"] = 1] = \"START\";\n    // Thumb at end of slider (e.g. in LTR mode, right thumb on range slider,\n    // or only thumb on single point slider).\n    Thumb[Thumb[\"END\"] = 2] = \"END\";\n})(Thumb || (Thumb = {}));\n\n/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar AnimationKeys;\n(function (AnimationKeys) {\n    AnimationKeys[\"SLIDER_UPDATE\"] = \"slider_update\";\n})(AnimationKeys || (AnimationKeys = {}));\n// Accessing `window` without a `typeof` check will throw on Node environments.\nvar HAS_WINDOW = typeof window !== 'undefined';\n/**\n * Foundation class for slider. Responsibilities include:\n * - Updating slider values (internal state and DOM updates) based on client\n *   'x' position.\n * - Updating DOM after slider property updates (e.g. min, max).\n */\nvar MDCSliderFoundation = /** @class */ (function (_super) {\n    (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_3__._)(MDCSliderFoundation, _super);\n    function MDCSliderFoundation(adapter) {\n        var _this = _super.call(this, (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_3__.a)((0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_3__.a)({}, MDCSliderFoundation.defaultAdapter), adapter)) || this;\n        // Whether the initial styles (to position the thumb, before component\n        // initialization) have been removed.\n        _this.initialStylesRemoved = false;\n        _this.isDisabled = false;\n        _this.isDiscrete = false;\n        _this.step = numbers.STEP_SIZE;\n        _this.hasTickMarks = false;\n        // The following properties are only set for range sliders.\n        _this.isRange = false;\n        // Tracks the thumb being moved across a slider pointer interaction (down,\n        // move event).\n        _this.thumb = null;\n        // `clientX` from the most recent down event. Used in subsequent move\n        // events to determine which thumb to move (in the case of\n        // overlapping thumbs).\n        _this.downEventClientX = null;\n        // Width of the start thumb knob.\n        _this.startThumbKnobWidth = 0;\n        // Width of the end thumb knob.\n        _this.endThumbKnobWidth = 0;\n        _this.animFrame = new _animationframe_28b556b2_js__WEBPACK_IMPORTED_MODULE_6__.A();\n        return _this;\n    }\n    Object.defineProperty(MDCSliderFoundation, \"defaultAdapter\", {\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same\n            // order as the adapter interface.\n            return {\n                hasClass: function () { return false; },\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                addThumbClass: function () { return undefined; },\n                removeThumbClass: function () { return undefined; },\n                getAttribute: function () { return null; },\n                getInputValue: function () { return ''; },\n                setInputValue: function () { return undefined; },\n                getInputAttribute: function () { return null; },\n                setInputAttribute: function () { return null; },\n                removeInputAttribute: function () { return null; },\n                focusInput: function () { return undefined; },\n                isInputFocused: function () { return false; },\n                getThumbKnobWidth: function () { return 0; },\n                getThumbBoundingClientRect: function () {\n                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });\n                },\n                getBoundingClientRect: function () {\n                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });\n                },\n                isRTL: function () { return false; },\n                setThumbStyleProperty: function () { return undefined; },\n                removeThumbStyleProperty: function () { return undefined; },\n                setTrackActiveStyleProperty: function () { return undefined; },\n                removeTrackActiveStyleProperty: function () { return undefined; },\n                setValueIndicatorText: function () { return undefined; },\n                getValueToAriaValueTextFn: function () { return null; },\n                updateTickMarks: function () { return undefined; },\n                setPointerCapture: function () { return undefined; },\n                emitChangeEvent: function () { return undefined; },\n                emitInputEvent: function () { return undefined; },\n                emitDragStartEvent: function () { return undefined; },\n                emitDragEndEvent: function () { return undefined; },\n                registerEventHandler: function () { return undefined; },\n                deregisterEventHandler: function () { return undefined; },\n                registerThumbEventHandler: function () { return undefined; },\n                deregisterThumbEventHandler: function () { return undefined; },\n                registerInputEventHandler: function () { return undefined; },\n                deregisterInputEventHandler: function () { return undefined; },\n                registerBodyEventHandler: function () { return undefined; },\n                deregisterBodyEventHandler: function () { return undefined; },\n                registerWindowEventHandler: function () { return undefined; },\n                deregisterWindowEventHandler: function () { return undefined; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCSliderFoundation.prototype.init = function () {\n        var _this = this;\n        this.isDisabled = this.adapter.hasClass(cssClasses.DISABLED);\n        this.isDiscrete = this.adapter.hasClass(cssClasses.DISCRETE);\n        this.hasTickMarks = this.adapter.hasClass(cssClasses.TICK_MARKS);\n        this.isRange = this.adapter.hasClass(cssClasses.RANGE);\n        var min = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_MIN, this.isRange ? Thumb.START : Thumb.END), attributes.INPUT_MIN);\n        var max = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_MAX, Thumb.END), attributes.INPUT_MAX);\n        var value = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_VALUE, Thumb.END), attributes.INPUT_VALUE);\n        var valueStart = this.isRange ?\n            this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_VALUE, Thumb.START), attributes.INPUT_VALUE) :\n            min;\n        var stepAttr = this.adapter.getInputAttribute(attributes.INPUT_STEP, Thumb.END);\n        var step = stepAttr ?\n            this.convertAttributeValueToNumber(stepAttr, attributes.INPUT_STEP) :\n            this.step;\n        this.validateProperties({ min: min, max: max, value: value, valueStart: valueStart, step: step });\n        this.min = min;\n        this.max = max;\n        this.value = value;\n        this.valueStart = valueStart;\n        this.step = step;\n        this.numDecimalPlaces = getNumDecimalPlaces(this.step);\n        this.valueBeforeDownEvent = value;\n        this.valueStartBeforeDownEvent = valueStart;\n        this.mousedownOrTouchstartListener =\n            this.handleMousedownOrTouchstart.bind(this);\n        this.moveListener = this.handleMove.bind(this);\n        this.pointerdownListener = this.handlePointerdown.bind(this);\n        this.pointerupListener = this.handlePointerup.bind(this);\n        this.thumbMouseenterListener = this.handleThumbMouseenter.bind(this);\n        this.thumbMouseleaveListener = this.handleThumbMouseleave.bind(this);\n        this.inputStartChangeListener = function () {\n            _this.handleInputChange(Thumb.START);\n        };\n        this.inputEndChangeListener = function () {\n            _this.handleInputChange(Thumb.END);\n        };\n        this.inputStartFocusListener = function () {\n            _this.handleInputFocus(Thumb.START);\n        };\n        this.inputEndFocusListener = function () {\n            _this.handleInputFocus(Thumb.END);\n        };\n        this.inputStartBlurListener = function () {\n            _this.handleInputBlur(Thumb.START);\n        };\n        this.inputEndBlurListener = function () {\n            _this.handleInputBlur(Thumb.END);\n        };\n        this.resizeListener = this.handleResize.bind(this);\n        this.registerEventHandlers();\n    };\n    MDCSliderFoundation.prototype.destroy = function () {\n        this.deregisterEventHandlers();\n    };\n    MDCSliderFoundation.prototype.setMin = function (value) {\n        this.min = value;\n        if (!this.isRange) {\n            this.valueStart = value;\n        }\n        this.updateUI();\n    };\n    MDCSliderFoundation.prototype.setMax = function (value) {\n        this.max = value;\n        this.updateUI();\n    };\n    MDCSliderFoundation.prototype.getMin = function () {\n        return this.min;\n    };\n    MDCSliderFoundation.prototype.getMax = function () {\n        return this.max;\n    };\n    /**\n     * - For single point sliders, returns the thumb value.\n     * - For range (two-thumb) sliders, returns the end thumb's value.\n     */\n    MDCSliderFoundation.prototype.getValue = function () {\n        return this.value;\n    };\n    /**\n     * - For single point sliders, sets the thumb value.\n     * - For range (two-thumb) sliders, sets the end thumb's value.\n     */\n    MDCSliderFoundation.prototype.setValue = function (value) {\n        if (this.isRange && value < this.valueStart) {\n            throw new Error(\"end thumb value (\" + value + \") must be >= start thumb \" +\n                (\"value (\" + this.valueStart + \")\"));\n        }\n        this.updateValue(value, Thumb.END);\n    };\n    /**\n     * Only applicable for range sliders.\n     * @return The start thumb's value.\n     */\n    MDCSliderFoundation.prototype.getValueStart = function () {\n        if (!this.isRange) {\n            throw new Error('`valueStart` is only applicable for range sliders.');\n        }\n        return this.valueStart;\n    };\n    /**\n     * Only applicable for range sliders. Sets the start thumb's value.\n     */\n    MDCSliderFoundation.prototype.setValueStart = function (valueStart) {\n        if (!this.isRange) {\n            throw new Error('`valueStart` is only applicable for range sliders.');\n        }\n        if (this.isRange && valueStart > this.value) {\n            throw new Error(\"start thumb value (\" + valueStart + \") must be <= end thumb \" +\n                (\"value (\" + this.value + \")\"));\n        }\n        this.updateValue(valueStart, Thumb.START);\n    };\n    MDCSliderFoundation.prototype.setStep = function (value) {\n        this.step = value;\n        this.numDecimalPlaces = getNumDecimalPlaces(value);\n        this.updateUI();\n    };\n    MDCSliderFoundation.prototype.setIsDiscrete = function (value) {\n        this.isDiscrete = value;\n        this.updateValueIndicatorUI();\n        this.updateTickMarksUI();\n    };\n    MDCSliderFoundation.prototype.getStep = function () {\n        return this.step;\n    };\n    MDCSliderFoundation.prototype.setHasTickMarks = function (value) {\n        this.hasTickMarks = value;\n        this.updateTickMarksUI();\n    };\n    MDCSliderFoundation.prototype.getDisabled = function () {\n        return this.isDisabled;\n    };\n    /**\n     * Sets disabled state, including updating styles and thumb tabindex.\n     */\n    MDCSliderFoundation.prototype.setDisabled = function (disabled) {\n        this.isDisabled = disabled;\n        if (disabled) {\n            this.adapter.addClass(cssClasses.DISABLED);\n            if (this.isRange) {\n                this.adapter.setInputAttribute(attributes.INPUT_DISABLED, '', Thumb.START);\n            }\n            this.adapter.setInputAttribute(attributes.INPUT_DISABLED, '', Thumb.END);\n        }\n        else {\n            this.adapter.removeClass(cssClasses.DISABLED);\n            if (this.isRange) {\n                this.adapter.removeInputAttribute(attributes.INPUT_DISABLED, Thumb.START);\n            }\n            this.adapter.removeInputAttribute(attributes.INPUT_DISABLED, Thumb.END);\n        }\n    };\n    /** @return Whether the slider is a range slider. */\n    MDCSliderFoundation.prototype.getIsRange = function () {\n        return this.isRange;\n    };\n    /**\n     * - Syncs slider boundingClientRect with the current DOM.\n     * - Updates UI based on internal state.\n     */\n    MDCSliderFoundation.prototype.layout = function (_a) {\n        var _b = _a === void 0 ? {} : _a, skipUpdateUI = _b.skipUpdateUI;\n        this.rect = this.adapter.getBoundingClientRect();\n        if (this.isRange) {\n            this.startThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.START);\n            this.endThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.END);\n        }\n        if (!skipUpdateUI) {\n            this.updateUI();\n        }\n    };\n    /** Handles resize events on the window. */\n    MDCSliderFoundation.prototype.handleResize = function () {\n        this.layout();\n    };\n    /**\n     * Handles pointer down events on the slider root element.\n     */\n    MDCSliderFoundation.prototype.handleDown = function (event) {\n        if (this.isDisabled)\n            return;\n        this.valueStartBeforeDownEvent = this.valueStart;\n        this.valueBeforeDownEvent = this.value;\n        var clientX = event.clientX != null ?\n            event.clientX :\n            event.targetTouches[0].clientX;\n        this.downEventClientX = clientX;\n        var value = this.mapClientXOnSliderScale(clientX);\n        this.thumb = this.getThumbFromDownEvent(clientX, value);\n        if (this.thumb === null)\n            return;\n        this.handleDragStart(event, value, this.thumb);\n        this.updateValue(value, this.thumb, { emitInputEvent: true });\n    };\n    /**\n     * Handles pointer move events on the slider root element.\n     */\n    MDCSliderFoundation.prototype.handleMove = function (event) {\n        if (this.isDisabled)\n            return;\n        // Prevent scrolling.\n        event.preventDefault();\n        var clientX = event.clientX != null ?\n            event.clientX :\n            event.targetTouches[0].clientX;\n        var dragAlreadyStarted = this.thumb != null;\n        this.thumb = this.getThumbFromMoveEvent(clientX);\n        if (this.thumb === null)\n            return;\n        var value = this.mapClientXOnSliderScale(clientX);\n        if (!dragAlreadyStarted) {\n            this.handleDragStart(event, value, this.thumb);\n            this.adapter.emitDragStartEvent(value, this.thumb);\n        }\n        this.updateValue(value, this.thumb, { emitInputEvent: true });\n    };\n    /**\n     * Handles pointer up events on the slider root element.\n     */\n    MDCSliderFoundation.prototype.handleUp = function () {\n        if (this.isDisabled || this.thumb === null)\n            return;\n        var oldValue = this.thumb === Thumb.START ?\n            this.valueStartBeforeDownEvent :\n            this.valueBeforeDownEvent;\n        var newValue = this.thumb === Thumb.START ? this.valueStart : this.value;\n        if (oldValue !== newValue) {\n            this.adapter.emitChangeEvent(newValue, this.thumb);\n        }\n        this.adapter.emitDragEndEvent(newValue, this.thumb);\n        this.thumb = null;\n    };\n    /**\n     * For range, discrete slider, shows the value indicator on both thumbs.\n     */\n    MDCSliderFoundation.prototype.handleThumbMouseenter = function () {\n        if (!this.isDiscrete || !this.isRange)\n            return;\n        this.adapter.addThumbClass(cssClasses.THUMB_WITH_INDICATOR, Thumb.START);\n        this.adapter.addThumbClass(cssClasses.THUMB_WITH_INDICATOR, Thumb.END);\n    };\n    /**\n     * For range, discrete slider, hides the value indicator on both thumbs.\n     */\n    MDCSliderFoundation.prototype.handleThumbMouseleave = function () {\n        if (!this.isDiscrete || !this.isRange)\n            return;\n        if (this.adapter.isInputFocused(Thumb.START) ||\n            this.adapter.isInputFocused(Thumb.END)) {\n            // Leave value indicator shown if either input is focused.\n            return;\n        }\n        this.adapter.removeThumbClass(cssClasses.THUMB_WITH_INDICATOR, Thumb.START);\n        this.adapter.removeThumbClass(cssClasses.THUMB_WITH_INDICATOR, Thumb.END);\n    };\n    MDCSliderFoundation.prototype.handleMousedownOrTouchstart = function (event) {\n        var _this = this;\n        var moveEventType = event.type === 'mousedown' ? 'mousemove' : 'touchmove';\n        // After a down event on the slider root, listen for move events on\n        // body (so the slider value is updated for events outside of the\n        // slider root).\n        this.adapter.registerBodyEventHandler(moveEventType, this.moveListener);\n        var upHandler = function () {\n            _this.handleUp();\n            // Once the drag is finished (up event on body), remove the move\n            // handler.\n            _this.adapter.deregisterBodyEventHandler(moveEventType, _this.moveListener);\n            // Also stop listening for subsequent up events.\n            _this.adapter.deregisterEventHandler('mouseup', upHandler);\n            _this.adapter.deregisterEventHandler('touchend', upHandler);\n        };\n        this.adapter.registerBodyEventHandler('mouseup', upHandler);\n        this.adapter.registerBodyEventHandler('touchend', upHandler);\n        this.handleDown(event);\n    };\n    MDCSliderFoundation.prototype.handlePointerdown = function (event) {\n        this.adapter.setPointerCapture(event.pointerId);\n        this.adapter.registerEventHandler('pointermove', this.moveListener);\n        this.handleDown(event);\n    };\n    /**\n     * Handles input `change` event by setting internal slider value to match\n     * input's new value.\n     */\n    MDCSliderFoundation.prototype.handleInputChange = function (thumb) {\n        var value = Number(this.adapter.getInputValue(thumb));\n        if (thumb === Thumb.START) {\n            this.setValueStart(value);\n        }\n        else {\n            this.setValue(value);\n        }\n        this.adapter.emitChangeEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);\n        this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);\n    };\n    /** Shows activated state and value indicator on thumb(s). */\n    MDCSliderFoundation.prototype.handleInputFocus = function (thumb) {\n        this.adapter.addThumbClass(cssClasses.THUMB_FOCUSED, thumb);\n        if (!this.isDiscrete)\n            return;\n        this.adapter.addThumbClass(cssClasses.THUMB_WITH_INDICATOR, thumb);\n        if (this.isRange) {\n            var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;\n            this.adapter.addThumbClass(cssClasses.THUMB_WITH_INDICATOR, otherThumb);\n        }\n    };\n    /** Removes activated state and value indicator from thumb(s). */\n    MDCSliderFoundation.prototype.handleInputBlur = function (thumb) {\n        this.adapter.removeThumbClass(cssClasses.THUMB_FOCUSED, thumb);\n        if (!this.isDiscrete)\n            return;\n        this.adapter.removeThumbClass(cssClasses.THUMB_WITH_INDICATOR, thumb);\n        if (this.isRange) {\n            var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;\n            this.adapter.removeThumbClass(cssClasses.THUMB_WITH_INDICATOR, otherThumb);\n        }\n    };\n    /**\n     * Emits custom dragStart event, along with focusing the underlying input.\n     */\n    MDCSliderFoundation.prototype.handleDragStart = function (event, value, thumb) {\n        this.adapter.emitDragStartEvent(value, thumb);\n        this.adapter.focusInput(thumb);\n        // Prevent the input (that we just focused) from losing focus.\n        event.preventDefault();\n    };\n    /**\n     * @return The thumb to be moved based on initial down event.\n     */\n    MDCSliderFoundation.prototype.getThumbFromDownEvent = function (clientX, value) {\n        // For single point slider, thumb to be moved is always the END (only)\n        // thumb.\n        if (!this.isRange)\n            return Thumb.END;\n        // Check if event press point is in the bounds of any thumb.\n        var thumbStartRect = this.adapter.getThumbBoundingClientRect(Thumb.START);\n        var thumbEndRect = this.adapter.getThumbBoundingClientRect(Thumb.END);\n        var inThumbStartBounds = clientX >= thumbStartRect.left && clientX <= thumbStartRect.right;\n        var inThumbEndBounds = clientX >= thumbEndRect.left && clientX <= thumbEndRect.right;\n        if (inThumbStartBounds && inThumbEndBounds) {\n            // Thumbs overlapping. Thumb to be moved cannot be determined yet.\n            return null;\n        }\n        // If press is in bounds for either thumb on down event, that's the thumb\n        // to be moved.\n        if (inThumbStartBounds) {\n            return Thumb.START;\n        }\n        if (inThumbEndBounds) {\n            return Thumb.END;\n        }\n        // For presses outside the range, return whichever thumb is closer.\n        if (value < this.valueStart) {\n            return Thumb.START;\n        }\n        if (value > this.value) {\n            return Thumb.END;\n        }\n        // For presses inside the range, return whichever thumb is closer.\n        return (value - this.valueStart <= this.value - value) ? Thumb.START :\n            Thumb.END;\n    };\n    /**\n     * @return The thumb to be moved based on move event (based on drag\n     *     direction from original down event). Only applicable if thumbs\n     *     were overlapping in the down event.\n     */\n    MDCSliderFoundation.prototype.getThumbFromMoveEvent = function (clientX) {\n        // Thumb has already been chosen.\n        if (this.thumb !== null)\n            return this.thumb;\n        if (this.downEventClientX === null) {\n            throw new Error('`downEventClientX` is null after move event.');\n        }\n        var moveDistanceUnderThreshold = Math.abs(this.downEventClientX - clientX) < numbers.THUMB_UPDATE_MIN_PX;\n        if (moveDistanceUnderThreshold)\n            return this.thumb;\n        var draggedThumbToLeft = clientX < this.downEventClientX;\n        if (draggedThumbToLeft) {\n            return this.adapter.isRTL() ? Thumb.END : Thumb.START;\n        }\n        else {\n            return this.adapter.isRTL() ? Thumb.START : Thumb.END;\n        }\n    };\n    /**\n     * Updates UI based on internal state.\n     * @param thumb Thumb whose value is being updated. If undefined, UI is\n     *     updated for both thumbs based on current internal state.\n     */\n    MDCSliderFoundation.prototype.updateUI = function (thumb) {\n        this.updateThumbAndInputAttributes(thumb);\n        this.updateThumbAndTrackUI(thumb);\n        this.updateValueIndicatorUI(thumb);\n        this.updateTickMarksUI();\n    };\n    /**\n     * Updates thumb and input attributes based on current value.\n     * @param thumb Thumb whose aria attributes to update.\n     */\n    MDCSliderFoundation.prototype.updateThumbAndInputAttributes = function (thumb) {\n        if (!thumb)\n            return;\n        var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;\n        var valueStr = String(value);\n        this.adapter.setInputAttribute(attributes.INPUT_VALUE, valueStr, thumb);\n        if (this.isRange && thumb === Thumb.START) {\n            this.adapter.setInputAttribute(attributes.INPUT_MIN, valueStr, Thumb.END);\n        }\n        else if (this.isRange && thumb === Thumb.END) {\n            this.adapter.setInputAttribute(attributes.INPUT_MAX, valueStr, Thumb.START);\n        }\n        // Sync attribute with property.\n        if (this.adapter.getInputValue(thumb) !== valueStr) {\n            this.adapter.setInputValue(valueStr, thumb);\n        }\n        var valueToAriaValueTextFn = this.adapter.getValueToAriaValueTextFn();\n        if (valueToAriaValueTextFn) {\n            this.adapter.setInputAttribute(attributes.ARIA_VALUETEXT, valueToAriaValueTextFn(value), thumb);\n        }\n    };\n    /**\n     * Updates value indicator UI based on current value.\n     * @param thumb Thumb whose value indicator to update. If undefined, all\n     *     thumbs' value indicators are updated.\n     */\n    MDCSliderFoundation.prototype.updateValueIndicatorUI = function (thumb) {\n        if (!this.isDiscrete)\n            return;\n        var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;\n        this.adapter.setValueIndicatorText(value, thumb === Thumb.START ? Thumb.START : Thumb.END);\n        if (!thumb && this.isRange) {\n            this.adapter.setValueIndicatorText(this.valueStart, Thumb.START);\n        }\n    };\n    /**\n     * Updates tick marks UI within slider, based on current min, max, and step.\n     */\n    MDCSliderFoundation.prototype.updateTickMarksUI = function () {\n        if (!this.isDiscrete || !this.hasTickMarks)\n            return;\n        var numTickMarksInactiveStart = (this.valueStart - this.min) / this.step;\n        var numTickMarksActive = (this.value - this.valueStart) / this.step + 1;\n        var numTickMarksInactiveEnd = (this.max - this.value) / this.step;\n        var tickMarksInactiveStart = Array.from({ length: numTickMarksInactiveStart })\n            .fill(TickMark.INACTIVE);\n        var tickMarksActive = Array.from({ length: numTickMarksActive })\n            .fill(TickMark.ACTIVE);\n        var tickMarksInactiveEnd = Array.from({ length: numTickMarksInactiveEnd })\n            .fill(TickMark.INACTIVE);\n        this.adapter.updateTickMarks(tickMarksInactiveStart.concat(tickMarksActive)\n            .concat(tickMarksInactiveEnd));\n    };\n    /** Maps clientX to a value on the slider scale. */\n    MDCSliderFoundation.prototype.mapClientXOnSliderScale = function (clientX) {\n        var xPos = clientX - this.rect.left;\n        var pctComplete = xPos / this.rect.width;\n        if (this.adapter.isRTL()) {\n            pctComplete = 1 - pctComplete;\n        }\n        // Fit the percentage complete between the range [min,max]\n        // by remapping from [0, 1] to [min, min+(max-min)].\n        var value = this.min + pctComplete * (this.max - this.min);\n        if (value === this.max || value === this.min) {\n            return value;\n        }\n        return Number(this.quantize(value).toFixed(this.numDecimalPlaces));\n    };\n    /** Calculates the quantized value based on step value. */\n    MDCSliderFoundation.prototype.quantize = function (value) {\n        var numSteps = Math.round((value - this.min) / this.step);\n        return this.min + numSteps * this.step;\n    };\n    /**\n     * Updates slider value (internal state and UI) based on the given value.\n     */\n    MDCSliderFoundation.prototype.updateValue = function (value, thumb, _a) {\n        var _b = _a === void 0 ? {} : _a, emitInputEvent = _b.emitInputEvent;\n        value = this.clampValue(value, thumb);\n        if (this.isRange && thumb === Thumb.START) {\n            // Exit early if current value is the same as the new value.\n            if (this.valueStart === value)\n                return;\n            this.valueStart = value;\n        }\n        else {\n            // Exit early if current value is the same as the new value.\n            if (this.value === value)\n                return;\n            this.value = value;\n        }\n        this.updateUI(thumb);\n        if (emitInputEvent) {\n            this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);\n        }\n    };\n    /**\n     * Clamps the given value for the given thumb based on slider properties:\n     * - Restricts value within [min, max].\n     * - If range slider, clamp start value <= end value, and\n     *   end value >= start value.\n     */\n    MDCSliderFoundation.prototype.clampValue = function (value, thumb) {\n        // Clamp value to [min, max] range.\n        value = Math.min(Math.max(value, this.min), this.max);\n        var thumbStartMovedPastThumbEnd = this.isRange && thumb === Thumb.START && value > this.value;\n        if (thumbStartMovedPastThumbEnd) {\n            return this.value;\n        }\n        var thumbEndMovedPastThumbStart = this.isRange && thumb === Thumb.END && value < this.valueStart;\n        if (thumbEndMovedPastThumbStart) {\n            return this.valueStart;\n        }\n        return value;\n    };\n    /**\n     * Updates the active track and thumb style properties to reflect current\n     * value.\n     */\n    MDCSliderFoundation.prototype.updateThumbAndTrackUI = function (thumb) {\n        var _this = this;\n        var _a = this, max = _a.max, min = _a.min;\n        var pctComplete = (this.value - this.valueStart) / (max - min);\n        var rangePx = pctComplete * this.rect.width;\n        var isRtl = this.adapter.isRTL();\n        var transformProp = HAS_WINDOW ? (0,_util_a712b6e1_js__WEBPACK_IMPORTED_MODULE_7__.g)(window, 'transform') : 'transform';\n        if (this.isRange) {\n            var thumbLeftPos_1 = this.adapter.isRTL() ?\n                (max - this.value) / (max - min) * this.rect.width :\n                (this.valueStart - min) / (max - min) * this.rect.width;\n            var thumbRightPos_1 = thumbLeftPos_1 + rangePx;\n            this.animFrame.request(AnimationKeys.SLIDER_UPDATE, function () {\n                // Set active track styles, accounting for animation direction by\n                // setting `transform-origin`.\n                var trackAnimatesFromRight = (!isRtl && thumb === Thumb.START) ||\n                    (isRtl && thumb !== Thumb.START);\n                if (trackAnimatesFromRight) {\n                    _this.adapter.setTrackActiveStyleProperty('transform-origin', 'right');\n                    _this.adapter.setTrackActiveStyleProperty('left', 'unset');\n                    _this.adapter.setTrackActiveStyleProperty('right', _this.rect.width - thumbRightPos_1 + \"px\");\n                }\n                else {\n                    _this.adapter.setTrackActiveStyleProperty('transform-origin', 'left');\n                    _this.adapter.setTrackActiveStyleProperty('right', 'unset');\n                    _this.adapter.setTrackActiveStyleProperty('left', thumbLeftPos_1 + \"px\");\n                }\n                _this.adapter.setTrackActiveStyleProperty(transformProp, \"scaleX(\" + pctComplete + \")\");\n                // Set thumb styles.\n                var thumbStartPos = isRtl ? thumbRightPos_1 : thumbLeftPos_1;\n                var thumbEndPos = _this.adapter.isRTL() ? thumbLeftPos_1 : thumbRightPos_1;\n                if (thumb === Thumb.START || !thumb || !_this.initialStylesRemoved) {\n                    _this.adapter.setThumbStyleProperty(transformProp, \"translateX(\" + thumbStartPos + \"px)\", Thumb.START);\n                }\n                if (thumb === Thumb.END || !thumb || !_this.initialStylesRemoved) {\n                    _this.adapter.setThumbStyleProperty(transformProp, \"translateX(\" + thumbEndPos + \"px)\", Thumb.END);\n                }\n                _this.removeInitialStyles(isRtl);\n                _this.updateOverlappingThumbsUI(thumbStartPos, thumbEndPos, thumb);\n            });\n        }\n        else {\n            this.animFrame.request(AnimationKeys.SLIDER_UPDATE, function () {\n                var thumbStartPos = isRtl ? _this.rect.width - rangePx : rangePx;\n                _this.adapter.setThumbStyleProperty(transformProp, \"translateX(\" + thumbStartPos + \"px)\", Thumb.END);\n                _this.adapter.setTrackActiveStyleProperty(transformProp, \"scaleX(\" + pctComplete + \")\");\n                _this.removeInitialStyles(isRtl);\n            });\n        }\n    };\n    /**\n     * Removes initial inline styles if not already removed. `left:<...>%`\n     * inline styles can be added to position the thumb correctly before JS\n     * initialization. However, they need to be removed before the JS starts\n     * positioning the thumb. This is because the JS uses\n     * `transform:translateX(<...>)px` (for performance reasons) to position\n     * the thumb (which is not possible for initial styles since we need the\n     * bounding rect measurements).\n     */\n    MDCSliderFoundation.prototype.removeInitialStyles = function (isRtl) {\n        if (this.initialStylesRemoved)\n            return;\n        // Remove thumb position properties that were added for initial render.\n        var position = isRtl ? 'right' : 'left';\n        this.adapter.removeThumbStyleProperty(position, Thumb.END);\n        if (this.isRange) {\n            this.adapter.removeThumbStyleProperty(position, Thumb.START);\n        }\n        this.initialStylesRemoved = true;\n        this.resetTrackAndThumbAnimation();\n    };\n    /**\n     * Resets track/thumb animation to prevent animation when adding\n     * `transform` styles to thumb initially.\n     */\n    MDCSliderFoundation.prototype.resetTrackAndThumbAnimation = function () {\n        var _this = this;\n        if (!this.isDiscrete)\n            return;\n        // Set transition properties to default (no animation), so that the\n        // newly added `transform` styles do not animate thumb/track from\n        // their default positions.\n        var transitionProp = HAS_WINDOW ?\n            (0,_util_a712b6e1_js__WEBPACK_IMPORTED_MODULE_7__.g)(window, 'transition') :\n            'transition';\n        var transitionDefault = 'all 0s ease 0s';\n        this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.END);\n        if (this.isRange) {\n            this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.START);\n        }\n        this.adapter.setTrackActiveStyleProperty(transitionProp, transitionDefault);\n        // In the next frame, remove the transition inline styles we just\n        // added, such that any animations added in the CSS can now take effect.\n        requestAnimationFrame(function () {\n            _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.END);\n            _this.adapter.removeTrackActiveStyleProperty(transitionProp);\n            if (_this.isRange) {\n                _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.START);\n            }\n        });\n    };\n    /**\n     * Adds THUMB_TOP class to active thumb if thumb knobs overlap; otherwise\n     * removes THUMB_TOP class from both thumbs.\n     * @param thumb Thumb that is active (being moved).\n     */\n    MDCSliderFoundation.prototype.updateOverlappingThumbsUI = function (thumbStartPos, thumbEndPos, thumb) {\n        var thumbsOverlap = false;\n        if (this.adapter.isRTL()) {\n            var startThumbLeftEdge = thumbStartPos - this.startThumbKnobWidth / 2;\n            var endThumbRightEdge = thumbEndPos + this.endThumbKnobWidth / 2;\n            thumbsOverlap = endThumbRightEdge >= startThumbLeftEdge;\n        }\n        else {\n            var startThumbRightEdge = thumbStartPos + this.startThumbKnobWidth / 2;\n            var endThumbLeftEdge = thumbEndPos - this.endThumbKnobWidth / 2;\n            thumbsOverlap = startThumbRightEdge >= endThumbLeftEdge;\n        }\n        if (thumbsOverlap) {\n            this.adapter.addThumbClass(cssClasses.THUMB_TOP, \n            // If no thumb was dragged (in the case of initial layout), end\n            // thumb is on top by default.\n            thumb || Thumb.END);\n            this.adapter.removeThumbClass(cssClasses.THUMB_TOP, thumb === Thumb.START ? Thumb.END : Thumb.START);\n        }\n        else {\n            this.adapter.removeThumbClass(cssClasses.THUMB_TOP, Thumb.START);\n            this.adapter.removeThumbClass(cssClasses.THUMB_TOP, Thumb.END);\n        }\n    };\n    /**\n     * Converts attribute value to a number, e.g. '100' => 100. Throws errors\n     * for invalid values.\n     * @param attributeValue Attribute value, e.g. 100.\n     * @param attributeName Attribute name, e.g. `aria-valuemax`.\n     */\n    MDCSliderFoundation.prototype.convertAttributeValueToNumber = function (attributeValue, attributeName) {\n        if (attributeValue === null) {\n            throw new Error(\"MDCSliderFoundation: `\" + attributeName + \"` must be non-null.\");\n        }\n        var value = Number(attributeValue);\n        if (isNaN(value)) {\n            throw new Error(\"MDCSliderFoundation: `\" + attributeName + \"` value is \" +\n                (\"`\" + attributeValue + \"`, but must be a number.\"));\n        }\n        return value;\n    };\n    /** Checks that the given properties are valid slider values. */\n    MDCSliderFoundation.prototype.validateProperties = function (_a) {\n        var min = _a.min, max = _a.max, value = _a.value, valueStart = _a.valueStart, step = _a.step;\n        if (min >= max) {\n            throw new Error(\"MDCSliderFoundation: min must be strictly less than max. \" +\n                (\"Current: [min: \" + min + \", max: \" + max + \"]\"));\n        }\n        if (step <= 0) {\n            throw new Error(\"MDCSliderFoundation: step must be a positive number. \" +\n                (\"Current step: \" + this.step));\n        }\n        if (this.isRange) {\n            if (value < min || value > max || valueStart < min || valueStart > max) {\n                throw new Error(\"MDCSliderFoundation: values must be in [min, max] range. \" +\n                    (\"Current values: [start value: \" + valueStart + \", end value: \" + value + \"]\"));\n            }\n            if (valueStart > value) {\n                throw new Error(\"MDCSliderFoundation: start value must be <= end value. \" +\n                    (\"Current values: [start value: \" + valueStart + \", end value: \" + value + \"]\"));\n            }\n            var numStepsValueStartFromMin = (valueStart - min) / step;\n            var numStepsValueFromMin = (value - min) / step;\n            if ((numStepsValueStartFromMin % 1) !== 0 ||\n                (numStepsValueFromMin % 1) !== 0) {\n                throw new Error(\"MDCSliderFoundation: Slider values must be valid based on the \" +\n                    (\"step value. Current values: [start value: \" + valueStart + \", \") +\n                    (\"end value: \" + value + \"]\"));\n            }\n        }\n        else { // Single point slider.\n            if (value < min || value > max) {\n                throw new Error(\"MDCSliderFoundation: value must be in [min, max] range. \" +\n                    (\"Current value: \" + value));\n            }\n            var numStepsValueFromMin = (value - min) / step;\n            if ((numStepsValueFromMin % 1) !== 0) {\n                throw new Error(\"MDCSliderFoundation: Slider value must be valid based on the \" +\n                    (\"step value. Current value: \" + value));\n            }\n        }\n    };\n    MDCSliderFoundation.prototype.registerEventHandlers = function () {\n        this.adapter.registerWindowEventHandler('resize', this.resizeListener);\n        if (MDCSliderFoundation.SUPPORTS_POINTER_EVENTS) {\n            // If supported, use pointer events API with #setPointerCapture.\n            this.adapter.registerEventHandler('pointerdown', this.pointerdownListener);\n            this.adapter.registerEventHandler('pointerup', this.pointerupListener);\n        }\n        else {\n            // Otherwise, fall back to mousedown/touchstart events.\n            this.adapter.registerEventHandler('mousedown', this.mousedownOrTouchstartListener);\n            this.adapter.registerEventHandler('touchstart', this.mousedownOrTouchstartListener);\n        }\n        if (this.isRange) {\n            this.adapter.registerThumbEventHandler(Thumb.START, 'mouseenter', this.thumbMouseenterListener);\n            this.adapter.registerThumbEventHandler(Thumb.START, 'mouseleave', this.thumbMouseleaveListener);\n            this.adapter.registerInputEventHandler(Thumb.START, 'change', this.inputStartChangeListener);\n            this.adapter.registerInputEventHandler(Thumb.START, 'focus', this.inputStartFocusListener);\n            this.adapter.registerInputEventHandler(Thumb.START, 'blur', this.inputStartBlurListener);\n        }\n        this.adapter.registerThumbEventHandler(Thumb.END, 'mouseenter', this.thumbMouseenterListener);\n        this.adapter.registerThumbEventHandler(Thumb.END, 'mouseleave', this.thumbMouseleaveListener);\n        this.adapter.registerInputEventHandler(Thumb.END, 'change', this.inputEndChangeListener);\n        this.adapter.registerInputEventHandler(Thumb.END, 'focus', this.inputEndFocusListener);\n        this.adapter.registerInputEventHandler(Thumb.END, 'blur', this.inputEndBlurListener);\n    };\n    MDCSliderFoundation.prototype.deregisterEventHandlers = function () {\n        this.adapter.deregisterWindowEventHandler('resize', this.resizeListener);\n        if (MDCSliderFoundation.SUPPORTS_POINTER_EVENTS) {\n            this.adapter.deregisterEventHandler('pointerdown', this.pointerdownListener);\n            this.adapter.deregisterEventHandler('pointerup', this.pointerupListener);\n        }\n        else {\n            this.adapter.deregisterEventHandler('mousedown', this.mousedownOrTouchstartListener);\n            this.adapter.deregisterEventHandler('touchstart', this.mousedownOrTouchstartListener);\n        }\n        if (this.isRange) {\n            this.adapter.deregisterThumbEventHandler(Thumb.START, 'mouseenter', this.thumbMouseenterListener);\n            this.adapter.deregisterThumbEventHandler(Thumb.START, 'mouseleave', this.thumbMouseleaveListener);\n            this.adapter.deregisterInputEventHandler(Thumb.START, 'change', this.inputStartChangeListener);\n            this.adapter.deregisterInputEventHandler(Thumb.START, 'focus', this.inputStartFocusListener);\n            this.adapter.deregisterInputEventHandler(Thumb.START, 'blur', this.inputStartBlurListener);\n        }\n        this.adapter.deregisterThumbEventHandler(Thumb.END, 'mouseenter', this.thumbMouseenterListener);\n        this.adapter.deregisterThumbEventHandler(Thumb.END, 'mouseleave', this.thumbMouseleaveListener);\n        this.adapter.deregisterInputEventHandler(Thumb.END, 'change', this.inputEndChangeListener);\n        this.adapter.deregisterInputEventHandler(Thumb.END, 'focus', this.inputEndFocusListener);\n        this.adapter.deregisterInputEventHandler(Thumb.END, 'blur', this.inputEndBlurListener);\n    };\n    MDCSliderFoundation.prototype.handlePointerup = function () {\n        this.handleUp();\n        this.adapter.deregisterEventHandler('pointermove', this.moveListener);\n    };\n    MDCSliderFoundation.SUPPORTS_POINTER_EVENTS = HAS_WINDOW && Boolean(window.PointerEvent) &&\n        // #setPointerCapture is buggy on iOS, so we can't use pointer events\n        // until the following bug is fixed:\n        // https://bugs.webkit.org/show_bug.cgi?id=220196\n        !isIOS();\n    return MDCSliderFoundation;\n}(_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_3__.M));\nfunction isIOS() {\n    // Source:\n    // https://stackoverflow.com/questions/9038625/detect-if-device-is-ios\n    return [\n        'iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone',\n        'iPod'\n    ].includes(navigator.platform)\n        // iPad on iOS 13 detection\n        || (navigator.userAgent.includes('Mac') && 'ontouchend' in document);\n}\n/**\n * Given a number, returns the number of digits that appear after the\n * decimal point.\n * See\n * https://stackoverflow.com/questions/9539513/is-there-a-reliable-way-in-javascript-to-obtain-the-number-of-decimal-places-of\n */\nfunction getNumDecimalPlaces(n) {\n    // Pull out the fraction and the exponent.\n    var match = /(?:\\.(\\d+))?(?:[eE]([+\\-]?\\d+))?$/.exec(String(n));\n    // NaN or Infinity or integer.\n    // We arbitrarily decide that Infinity is integral.\n    if (!match)\n        return 0;\n    var fraction = match[1] || ''; // E.g. 1.234e-2 => 234\n    var exponent = match[2] || 0; // E.g. 1.234e-2 => -2\n    // Count the number of digits in the fraction and subtract the\n    // exponent to simulate moving the decimal point left by exponent places.\n    // 1.234e+2 has 1 fraction digit and '234'.length -  2 == 1\n    // 1.234e-2 has 5 fraction digit and '234'.length - -2 == 5\n    return Math.max(0, // lower limit\n    (fraction === '0' ? 0 : fraction.length) - Number(exponent));\n}\n\n/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/** Vanilla JS implementation of slider component. */\nvar MDCSlider = /** @class */ (function (_super) {\n    (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_3__._)(MDCSlider, _super);\n    function MDCSlider() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.skipInitialUIUpdate = false;\n        // Function that maps a slider value to the value of the `aria-valuetext`\n        // attribute on the thumb element.\n        _this.valueToAriaValueTextFn = null;\n        return _this;\n    }\n    MDCSlider.attachTo = function (root, options) {\n        if (options === void 0) { options = {}; }\n        return new MDCSlider(root, undefined, options);\n    };\n    MDCSlider.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // tslint:disable:object-literal-sort-keys Methods should be in the same\n        // order as the adapter interface.\n        var adapter = {\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            addClass: function (className) {\n                _this.root.classList.add(className);\n            },\n            removeClass: function (className) {\n                _this.root.classList.remove(className);\n            },\n            addThumbClass: function (className, thumb) {\n                _this.getThumbEl(thumb).classList.add(className);\n            },\n            removeThumbClass: function (className, thumb) {\n                _this.getThumbEl(thumb).classList.remove(className);\n            },\n            getAttribute: function (attribute) { return _this.root.getAttribute(attribute); },\n            getInputValue: function (thumb) { return _this.getInput(thumb).value; },\n            setInputValue: function (value, thumb) {\n                _this.getInput(thumb).value = value;\n            },\n            getInputAttribute: function (attribute, thumb) {\n                return _this.getInput(thumb).getAttribute(attribute);\n            },\n            setInputAttribute: function (attribute, value, thumb) {\n                _this.getInput(thumb).setAttribute(attribute, value);\n            },\n            removeInputAttribute: function (attribute, thumb) {\n                _this.getInput(thumb).removeAttribute(attribute);\n            },\n            focusInput: function (thumb) {\n                _this.getInput(thumb).focus();\n            },\n            isInputFocused: function (thumb) {\n                return _this.getInput(thumb) === document.activeElement;\n            },\n            getThumbKnobWidth: function (thumb) {\n                return _this.getThumbEl(thumb)\n                    .querySelector(\".\" + cssClasses.THUMB_KNOB)\n                    .getBoundingClientRect()\n                    .width;\n            },\n            getThumbBoundingClientRect: function (thumb) {\n                return _this.getThumbEl(thumb).getBoundingClientRect();\n            },\n            getBoundingClientRect: function () { return _this.root.getBoundingClientRect(); },\n            isRTL: function () { return getComputedStyle(_this.root).direction === 'rtl'; },\n            setThumbStyleProperty: function (propertyName, value, thumb) {\n                _this.getThumbEl(thumb).style.setProperty(propertyName, value);\n            },\n            removeThumbStyleProperty: function (propertyName, thumb) {\n                _this.getThumbEl(thumb).style.removeProperty(propertyName);\n            },\n            setTrackActiveStyleProperty: function (propertyName, value) {\n                _this.trackActive.style.setProperty(propertyName, value);\n            },\n            removeTrackActiveStyleProperty: function (propertyName) {\n                _this.trackActive.style.removeProperty(propertyName);\n            },\n            setValueIndicatorText: function (value, thumb) {\n                var valueIndicatorEl = _this.getThumbEl(thumb).querySelector(\".\" + cssClasses.VALUE_INDICATOR_TEXT);\n                valueIndicatorEl.textContent = String(value);\n            },\n            getValueToAriaValueTextFn: function () { return _this.valueToAriaValueTextFn; },\n            updateTickMarks: function (tickMarks) {\n                var tickMarksContainer = _this.root.querySelector(\".\" + cssClasses.TICK_MARKS_CONTAINER);\n                if (!tickMarksContainer) {\n                    tickMarksContainer = document.createElement('div');\n                    tickMarksContainer.classList.add(cssClasses.TICK_MARKS_CONTAINER);\n                    var track = _this.root.querySelector(\".\" + cssClasses.TRACK);\n                    track.appendChild(tickMarksContainer);\n                }\n                if (tickMarks.length !== tickMarksContainer.children.length) {\n                    while (tickMarksContainer.firstChild) {\n                        tickMarksContainer.removeChild(tickMarksContainer.firstChild);\n                    }\n                    _this.addTickMarks(tickMarksContainer, tickMarks);\n                }\n                else {\n                    _this.updateTickMarks(tickMarksContainer, tickMarks);\n                }\n            },\n            setPointerCapture: function (pointerId) {\n                _this.root.setPointerCapture(pointerId);\n            },\n            emitChangeEvent: function (value, thumb) {\n                _this.emit(events.CHANGE, { value: value, thumb: thumb });\n            },\n            emitInputEvent: function (value, thumb) {\n                _this.emit(events.INPUT, { value: value, thumb: thumb });\n            },\n            emitDragStartEvent: function (_, thumb) {\n                // Emitting event is not yet implemented. See issue:\n                // https://github.com/material-components/material-components-web/issues/6448\n                _this.getRipple(thumb).activate();\n            },\n            emitDragEndEvent: function (_, thumb) {\n                // Emitting event is not yet implemented. See issue:\n                // https://github.com/material-components/material-components-web/issues/6448\n                _this.getRipple(thumb).deactivate();\n            },\n            registerEventHandler: function (evtType, handler) {\n                _this.listen(evtType, handler);\n            },\n            deregisterEventHandler: function (evtType, handler) {\n                _this.unlisten(evtType, handler);\n            },\n            registerThumbEventHandler: function (thumb, evtType, handler) {\n                _this.getThumbEl(thumb).addEventListener(evtType, handler);\n            },\n            deregisterThumbEventHandler: function (thumb, evtType, handler) {\n                _this.getThumbEl(thumb).removeEventListener(evtType, handler);\n            },\n            registerInputEventHandler: function (thumb, evtType, handler) {\n                _this.getInput(thumb).addEventListener(evtType, handler);\n            },\n            deregisterInputEventHandler: function (thumb, evtType, handler) {\n                _this.getInput(thumb).removeEventListener(evtType, handler);\n            },\n            registerBodyEventHandler: function (evtType, handler) {\n                document.body.addEventListener(evtType, handler);\n            },\n            deregisterBodyEventHandler: function (evtType, handler) {\n                document.body.removeEventListener(evtType, handler);\n            },\n            registerWindowEventHandler: function (evtType, handler) {\n                window.addEventListener(evtType, handler);\n            },\n            deregisterWindowEventHandler: function (evtType, handler) {\n                window.removeEventListener(evtType, handler);\n            },\n            // tslint:enable:object-literal-sort-keys\n        };\n        return new MDCSliderFoundation(adapter);\n    };\n    /**\n     * Initializes component, with the following options:\n     * - `skipInitialUIUpdate`: Whether to skip updating the UI when initially\n     *   syncing with the DOM. This should be enabled when the slider position\n     *   is set before component initialization.\n     */\n    MDCSlider.prototype.initialize = function (_a) {\n        var _b = _a === void 0 ? {} : _a, skipInitialUIUpdate = _b.skipInitialUIUpdate;\n        this.inputs =\n            [].slice.call(this.root.querySelectorAll(\".\" + cssClasses.INPUT));\n        this.thumbs =\n            [].slice.call(this.root.querySelectorAll(\".\" + cssClasses.THUMB));\n        this.trackActive =\n            this.root.querySelector(\".\" + cssClasses.TRACK_ACTIVE);\n        this.ripples = this.createRipples();\n        if (skipInitialUIUpdate) {\n            this.skipInitialUIUpdate = true;\n        }\n    };\n    MDCSlider.prototype.initialSyncWithDOM = function () {\n        this.foundation.layout({ skipUpdateUI: this.skipInitialUIUpdate });\n    };\n    /** Redraws UI based on DOM (e.g. element dimensions, RTL). */\n    MDCSlider.prototype.layout = function () {\n        this.foundation.layout();\n    };\n    MDCSlider.prototype.getValueStart = function () {\n        return this.foundation.getValueStart();\n    };\n    MDCSlider.prototype.setValueStart = function (valueStart) {\n        this.foundation.setValueStart(valueStart);\n    };\n    MDCSlider.prototype.getValue = function () {\n        return this.foundation.getValue();\n    };\n    MDCSlider.prototype.setValue = function (value) {\n        this.foundation.setValue(value);\n    };\n    /** @return Slider disabled state. */\n    MDCSlider.prototype.getDisabled = function () {\n        return this.foundation.getDisabled();\n    };\n    /** Sets slider disabled state. */\n    MDCSlider.prototype.setDisabled = function (disabled) {\n        this.foundation.setDisabled(disabled);\n    };\n    /**\n     * Sets a function that maps the slider value to the value of the\n     * `aria-valuetext` attribute on the thumb element.\n     */\n    MDCSlider.prototype.setValueToAriaValueTextFn = function (mapFn) {\n        this.valueToAriaValueTextFn = mapFn;\n    };\n    MDCSlider.prototype.getThumbEl = function (thumb) {\n        return thumb === Thumb.END ? this.thumbs[this.thumbs.length - 1] :\n            this.thumbs[0];\n    };\n    MDCSlider.prototype.getInput = function (thumb) {\n        return thumb === Thumb.END ? this.inputs[this.inputs.length - 1] :\n            this.inputs[0];\n    };\n    MDCSlider.prototype.getRipple = function (thumb) {\n        return thumb === Thumb.END ? this.ripples[this.ripples.length - 1] :\n            this.ripples[0];\n    };\n    /** Adds tick mark elements to the given container. */\n    MDCSlider.prototype.addTickMarks = function (tickMarkContainer, tickMarks) {\n        var fragment = document.createDocumentFragment();\n        for (var i = 0; i < tickMarks.length; i++) {\n            var div = document.createElement('div');\n            var tickMarkClass = tickMarks[i] === TickMark.ACTIVE ?\n                cssClasses.TICK_MARK_ACTIVE :\n                cssClasses.TICK_MARK_INACTIVE;\n            div.classList.add(tickMarkClass);\n            fragment.appendChild(div);\n        }\n        tickMarkContainer.appendChild(fragment);\n    };\n    /** Updates tick mark elements' classes in the given container. */\n    MDCSlider.prototype.updateTickMarks = function (tickMarkContainer, tickMarks) {\n        var tickMarkEls = Array.from(tickMarkContainer.children);\n        for (var i = 0; i < tickMarkEls.length; i++) {\n            if (tickMarks[i] === TickMark.ACTIVE) {\n                tickMarkEls[i].classList.add(cssClasses.TICK_MARK_ACTIVE);\n                tickMarkEls[i].classList.remove(cssClasses.TICK_MARK_INACTIVE);\n            }\n            else {\n                tickMarkEls[i].classList.add(cssClasses.TICK_MARK_INACTIVE);\n                tickMarkEls[i].classList.remove(cssClasses.TICK_MARK_ACTIVE);\n            }\n        }\n    };\n    /** Initializes thumb ripples. */\n    MDCSlider.prototype.createRipples = function () {\n        var ripples = [];\n        var rippleSurfaces = [].slice.call(this.root.querySelectorAll(\".\" + cssClasses.THUMB));\n        var _loop_1 = function (i) {\n            var rippleSurface = rippleSurfaces[i];\n            // Use the corresponding input as the focus source for the ripple (i.e.\n            // when the input is focused, the ripple is in the focused state).\n            var input = this_1.inputs[i];\n            var adapter = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_3__.a)((0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_3__.a)({}, _component_780a5882_js__WEBPACK_IMPORTED_MODULE_4__.M.createAdapter(this_1)), { addClass: function (className) {\n                    rippleSurface.classList.add(className);\n                }, computeBoundingRect: function () { return rippleSurface.getBoundingClientRect(); }, deregisterInteractionHandler: function (evtType, handler) {\n                    input.removeEventListener(evtType, handler);\n                }, isSurfaceActive: function () { return (0,_ponyfill_495ec32d_js__WEBPACK_IMPORTED_MODULE_5__.m)(input, ':active'); }, isUnbounded: function () { return true; }, registerInteractionHandler: function (evtType, handler) {\n                    input.addEventListener(evtType, handler, (0,_component_780a5882_js__WEBPACK_IMPORTED_MODULE_4__.a)());\n                }, removeClass: function (className) {\n                    rippleSurface.classList.remove(className);\n                }, updateCssVariable: function (varName, value) {\n                    rippleSurface.style.setProperty(varName, value);\n                } });\n            var ripple = new _component_780a5882_js__WEBPACK_IMPORTED_MODULE_4__.M(rippleSurface, new _component_780a5882_js__WEBPACK_IMPORTED_MODULE_4__.b(adapter));\n            ripple.unbounded = true;\n            ripples.push(ripple);\n        };\n        var this_1 = this;\n        for (var i = 0; i < rippleSurfaces.length; i++) {\n            _loop_1(i);\n        }\n        return ripples;\n    };\n    return MDCSlider;\n}(_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_3__.c));\n\nconst inoRangeCss = \"@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-slider__thumb{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0, 0, 0, 0);will-change:transform, opacity}.mdc-slider__thumb::before,.mdc-slider__thumb::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\"}.mdc-slider__thumb::before{transition:opacity 15ms linear, background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index, 1)}.mdc-slider__thumb::after{z-index:0;z-index:var(--mdc-ripple-z-index, 0)}.mdc-slider__thumb.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-slider__thumb.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-slider__thumb.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-slider__thumb.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards, mdc-ripple-fg-opacity-in 75ms forwards}.mdc-slider__thumb.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-slider__thumb::before,.mdc-slider__thumb::after{top:calc(50% - 50%);left:calc(50% - 50%);width:100%;height:100%}.mdc-slider__thumb.mdc-ripple-upgraded::before,.mdc-slider__thumb.mdc-ripple-upgraded::after{top:var(--mdc-ripple-top, calc(50% - 50%));left:var(--mdc-ripple-left, calc(50% - 50%));width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-slider__thumb.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-slider__thumb::before,.mdc-slider__thumb::after{background-color:#3d40f5;background-color:var(--mdc-ripple-color, var(--mdc-theme-primary, #3d40f5))}.mdc-slider__thumb:hover::before,.mdc-slider__thumb.mdc-ripple-surface--hover::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-slider__thumb.mdc-ripple-upgraded--background-focused::before,.mdc-slider__thumb:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-slider__thumb:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-slider__thumb:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-slider__thumb.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-slider{cursor:pointer;height:48px;margin:0 24px;position:relative;touch-action:pan-y}.mdc-slider .mdc-slider__track{height:4px;position:absolute;top:50%;transform:translateY(-50%);width:100%}.mdc-slider .mdc-slider__track--active,.mdc-slider .mdc-slider__track--inactive{display:flex;height:100%;position:absolute;width:100%}.mdc-slider .mdc-slider__track--active{border-radius:3px;height:6px;overflow:hidden;top:-1px}.mdc-slider .mdc-slider__track--active_fill{border-top:6px solid;box-sizing:border-box;height:100%;width:100%;position:relative;-webkit-transform-origin:left;transform-origin:left}[dir=rtl] .mdc-slider .mdc-slider__track--active_fill,.mdc-slider .mdc-slider__track--active_fill[dir=rtl]{-webkit-transform-origin:right;transform-origin:right;}.mdc-slider .mdc-slider__track--inactive{border-radius:2px;height:4px;left:0;top:0}.mdc-slider .mdc-slider__track--inactive::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid transparent;border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-slider .mdc-slider__track--active_fill{border-color:#3d40f5;border-color:var(--mdc-theme-primary, #3d40f5)}.mdc-slider.mdc-slider--disabled .mdc-slider__track--active_fill{border-color:#000;border-color:var(--mdc-theme-on-surface, #000)}.mdc-slider .mdc-slider__track--inactive{background-color:#3d40f5;background-color:var(--mdc-theme-primary, #3d40f5);opacity:0.24}.mdc-slider.mdc-slider--disabled .mdc-slider__track--inactive{background-color:#000;background-color:var(--mdc-theme-on-surface, #000);opacity:0.24}.mdc-slider .mdc-slider__value-indicator-container{bottom:44px;left:50%;pointer-events:none;position:absolute;transform:translateX(-50%)}.mdc-slider .mdc-slider__value-indicator{transition:transform 100ms 0ms cubic-bezier(0.4, 0, 1, 1);align-items:center;border-radius:4px;display:flex;height:32px;padding:0 12px;transform:scale(0);transform-origin:bottom}.mdc-slider .mdc-slider__value-indicator::before{border-left:6px solid transparent;border-right:6px solid transparent;border-top:6px solid;bottom:-5px;content:\\\"\\\";height:0;left:50%;position:absolute;transform:translateX(-50%);width:0}.mdc-slider .mdc-slider__value-indicator::after{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid transparent;border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator-container{pointer-events:auto}.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:transform 100ms 0ms cubic-bezier(0, 0, 0.2, 1);transform:scale(1)}@media (prefers-reduced-motion){.mdc-slider .mdc-slider__value-indicator,.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:none}}.mdc-slider .mdc-slider__value-indicator-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--ino-font-family, Lato, Verdana, sans-serif);font-family:var(--mdc-typography-subtitle2-font-family, var(--mdc-typography-font-family, var(--ino-font-family, Lato, Verdana, sans-serif)));font-size:0.875rem;font-size:var(--mdc-typography-subtitle2-font-size, 0.875rem);line-height:1.375rem;line-height:var(--mdc-typography-subtitle2-line-height, 1.375rem);font-weight:500;font-weight:var(--mdc-typography-subtitle2-font-weight, 500);letter-spacing:0.0071428571em;letter-spacing:var(--mdc-typography-subtitle2-letter-spacing, 0.0071428571em);text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle2-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle2-text-transform, inherit)}.mdc-slider .mdc-slider__value-indicator{background-color:#000;opacity:0.6}.mdc-slider .mdc-slider__value-indicator::before{border-top-color:#000}.mdc-slider .mdc-slider__value-indicator{color:#fff;color:var(--mdc-theme-on-primary, #fff)}.mdc-slider .mdc-slider__thumb{display:flex;height:48px;left:-24px;outline:none;position:absolute;user-select:none;width:48px}.mdc-slider .mdc-slider__thumb--top{z-index:1}.mdc-slider .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-style:solid;border-width:1px;box-sizing:content-box}.mdc-slider .mdc-slider__thumb-knob{box-shadow:0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);border:10px solid;border-radius:50%;box-sizing:border-box;height:20px;left:50%;position:absolute;top:50%;transform:translate(-50%, -50%);width:20px}.mdc-slider .mdc-slider__thumb-knob{background-color:#3d40f5;background-color:var(--mdc-theme-primary, #3d40f5);border-color:#3d40f5;border-color:var(--mdc-theme-primary, #3d40f5)}.mdc-slider .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mdc-slider.mdc-slider--disabled .mdc-slider__thumb-knob{background-color:#000;background-color:var(--mdc-theme-on-surface, #000);border-color:#000;border-color:var(--mdc-theme-on-surface, #000)}.mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mdc-slider .mdc-slider__thumb::before,.mdc-slider .mdc-slider__thumb::after{background-color:#3d40f5;background-color:var(--mdc-ripple-color, var(--mdc-theme-primary, #3d40f5))}.mdc-slider .mdc-slider__thumb:hover::before,.mdc-slider .mdc-slider__thumb.mdc-ripple-surface--hover::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-slider .mdc-slider__thumb.mdc-ripple-upgraded--background-focused::before,.mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-slider .mdc-slider__thumb.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-slider .mdc-slider__tick-marks{align-items:center;box-sizing:border-box;display:flex;height:100%;justify-content:space-between;padding:0 1px;position:absolute;width:100%}.mdc-slider .mdc-slider__tick-mark--active,.mdc-slider .mdc-slider__tick-mark--inactive{border-radius:50%;height:2px;width:2px}.mdc-slider .mdc-slider__tick-mark--active{background-color:#fff;background-color:var(--mdc-theme-on-primary, #fff);opacity:0.6}.mdc-slider.mdc-slider--disabled .mdc-slider__tick-mark--active{background-color:#fff;background-color:var(--mdc-theme-on-primary, #fff);opacity:0.6}.mdc-slider .mdc-slider__tick-mark--inactive{background-color:#3d40f5;background-color:var(--mdc-theme-primary, #3d40f5);opacity:0.6}.mdc-slider.mdc-slider--disabled .mdc-slider__tick-mark--inactive{background-color:#000;background-color:var(--mdc-theme-on-surface, #000);opacity:0.6}.mdc-slider.mdc-slider--disabled{opacity:0.38;cursor:auto}.mdc-slider.mdc-slider--disabled .mdc-slider__thumb{pointer-events:none}.mdc-slider--discrete .mdc-slider__thumb,.mdc-slider--discrete .mdc-slider__track--active_fill{transition:transform 80ms ease}@media (prefers-reduced-motion){.mdc-slider--discrete .mdc-slider__thumb,.mdc-slider--discrete .mdc-slider__track--active_fill{transition:none}}.mdc-slider__input{cursor:pointer;left:0;margin:0;height:100%;opacity:0;pointer-events:none;position:absolute;top:0;width:100%}ino-range .mdc-slider .mdc-slider__track--active_fill{border-color:#2C02FF}ino-range .mdc-slider .mdc-slider__track--inactive{background-color:#CBD0E0;opacity:0.24}ino-range .mdc-slider .mdc-slider__thumb-knob{background-color:#2C02FF;border-color:#2C02FF}ino-range .mdc-slider .mdc-slider__thumb--top .mdc-slider__thumb-knob,ino-range .mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,ino-range .mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}ino-range .mdc-slider .mdc-slider__thumb::before,ino-range .mdc-slider .mdc-slider__thumb::after{content:none}ino-range .mdc-slider .mdc-slider__thumb:hover::before,ino-range .mdc-slider .mdc-slider__thumb.mdc-ripple-surface--hover::before{opacity:0.08;opacity:var(--mdc-ripple-hover-opacity, 0.08)}ino-range .mdc-slider .mdc-slider__thumb.mdc-ripple-upgraded--background-focused::before,ino-range .mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-focus-opacity, 0.24)}ino-range .mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}ino-range .mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-press-opacity, 0.24)}ino-range .mdc-slider .mdc-slider__thumb.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.24)}ino-range .mdc-slider .mdc-slider__tick-mark--inactive{background-color:#000;opacity:0.6}ino-range .mdc-slider .mdc-slider__value-indicator{color:#fff}ino-range .mdc-slider .mdc-slider__track .mdc-slider__track--active,ino-range .mdc-slider .mdc-slider__track .mdc-slider__track--inactive{height:2px;border-radius:10px;top:1px}ino-range .mdc-slider .mdc-slider__thumb-knob{height:16px;width:16px;border:0px;box-shadow:0px 0px 0px 0px #2D5DFF4D;transition:ease-in 0.1s}ino-range .mdc-slider .mdc-slider__thumb-knob:hover{background-color:#4B4EFF}ino-range .mdc-slider__thumb--focused .mdc-slider__thumb-knob{box-shadow:0px 0px 0px 4px #2D5DFF4D}ino-range .mdc-slider.mdc-slider--disabled{opacity:1}ino-range .mdc-slider.mdc-slider--disabled .mdc-slider__track--active_fill{border-color:#CBD0E0}ino-range .mdc-slider.mdc-slider--disabled .mdc-slider__track--inactive{background-color:#EDEFF5;opacity:1}ino-range .mdc-slider.mdc-slider--disabled .mdc-slider__thumb-knob{border:1.5px solid #CBD0E0;background-color:#fff;box-shadow:none}\";\n\nconst Range = class {\n  constructor(hostRef) {\n    (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.valueChange = (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"valueChange\", 7);\n    this.valueStartChange = (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"valueStartChange\", 7);\n    this.valueEndChange = (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"valueEndChange\", 7);\n    /**\n     * The min value of this element.\n     */\n    this.min = 0;\n    /**\n     * Allows to input an interval.\n     * Use `valueStart` and `valueEnd` to provide values.\n     */\n    this.ranged = false;\n    /**\n     * The step size for this element.\n     * Only applicable if `discrete` is enabled.\n     * Is used to calculate the number of markers.\n     */\n    this.step = 1;\n    this.handleInput = (e) => {\n      e.stopPropagation();\n      const { thumb, value } = e.detail;\n      if (!this.ranged) {\n        this.sliderInstance.setValue(this.value); // reset value to make it controlled\n        this.valueChange.emit(value);\n        return;\n      }\n      if (thumb === Thumb.START) {\n        this.sliderInstance.setValueStart(this.valueStart); // reset value to make it controlled\n        this.valueStartChange.emit(value);\n        return;\n      }\n      if (thumb === Thumb.END) {\n        this.sliderInstance.setValue(this.valueEnd); // reset value to make it controlled\n        this.valueEndChange.emit(value);\n        return;\n      }\n    };\n  }\n  handleValueChange(newValue) {\n    this.sliderInstance.setValue(newValue);\n  }\n  handleRangedValueChanged(newValue) {\n    this.sliderInstance.setValueStart(newValue);\n  }\n  componentDidLoad() {\n    var _a;\n    /**\n     * this is required for the MDCSlider to work properly. The value attribute of the input element is hidden, which\n     * prevents the underlying MDCSliderFoundation to be initialised properly as it is trying to acquire the values\n     * of the min, max, and value attributes from the input element.\n     */\n    this.inputElEnd.setAttribute('value', `${this.valueEnd || this.value || this.min}`);\n    (_a = this.inputElStart) === null || _a === void 0 ? void 0 : _a.setAttribute('value', `${this.valueStart}`);\n    this.sliderInstance = new MDCSlider(this.sliderEl);\n    this.sliderInstance.listen('MDCSlider:change', _component_utils_1c4ae7be_js__WEBPACK_IMPORTED_MODULE_2__.p);\n    this.sliderInstance.listen('MDCSlider:input', this.handleInput);\n  }\n  disconnectedCallback() {\n    var _a, _b, _c;\n    (_a = this.sliderInstance) === null || _a === void 0 ? void 0 : _a.unlisten('MDCSlider:change', _component_utils_1c4ae7be_js__WEBPACK_IMPORTED_MODULE_2__.p);\n    (_b = this.sliderInstance) === null || _b === void 0 ? void 0 : _b.unlisten('MDCSlider:input', this.handleInput);\n    (_c = this.sliderInstance) === null || _c === void 0 ? void 0 : _c.destroy();\n  }\n  /**\n   * Should be used to make the component accessible.\n   * If the value is not user-friendly (e.g. a number to represent the day of the week),\n   * use this method to set a function that maps the slider `value` to value of the `aria-valuetext` attribute (e.g. `0` => `monday`).\n   *\n   * e.g.:\n   *\n   * `const rangeEl = document.querySelector(\"ino-range\")`\n   * `rangeEl.setFnToMapValueToAriaText((value: number) => value + \". day in this week\")`\n   *\n   * @param fn A function that maps the numeric value to a user-friendly string.\n   */\n  async setValueToAriaTextMapperFn(fn) {\n    this.sliderInstance.setValueToAriaValueTextFn(fn);\n  }\n  render() {\n    const sliderClasses = (0,_index_b7e5b0c5_js__WEBPACK_IMPORTED_MODULE_1__.c)({\n      'mdc-slider': true,\n      'mdc-slider--discrete': this.discrete,\n      'mdc-slider--tick-marks': this.markers,\n      'mdc-slider--disabled': this.disabled,\n      'mdc-slider--range': this.ranged,\n    });\n    return ((0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { ref: (el) => (this.sliderEl = el), class: sliderClasses }, this.ranged && ((0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { ref: (el) => (this.inputElStart = el), class: \"mdc-slider__input\", type: \"range\", min: this.min, max: this.valueEnd, value: this.valueStart || this.max || 0 })), (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { ref: (el) => (this.inputElEnd = el), class: \"mdc-slider__input\", type: \"range\", min: this.ranged ? this.valueStart : this.min, max: this.max, step: this.step, value: this.valueEnd || this.value || this.min || 0, disabled: this.disabled, name: this.name, \"aria-label\": this.name }), (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__track\" }, (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__track--inactive\" }), (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__track--active\" }, (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__track--active_fill\" })), this.markers && ((0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__tick-marks\" }, (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__tick-mark--active\" })))), (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__thumb\" }, this.discrete &&\n      Range.renderValueIndicator(this.value || this.valueStart), (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__thumb-knob\" })), this.ranged && ((0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__thumb\" }, this.discrete && Range.renderValueIndicator(this.valueEnd), (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__thumb-knob\" }))))));\n  }\n  static renderValueIndicator(value) {\n    return ((0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__value-indicator-container\", \"aria-hidden\": true }, (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-slider__value-indicator\" }, (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"mdc-slider__value-indicator-text\" }, value))));\n  }\n  get el() { return (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n  static get watchers() { return {\n    \"value\": [\"handleValueChange\"],\n    \"valueEnd\": [\"handleValueChange\"],\n    \"valueStart\": [\"handleRangedValueChanged\"]\n  }; }\n};\nRange.style = inoRangeCss;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../elements/dist/esm/ino-range.entry.js\n"));

/***/ }),

/***/ "../elements/dist/esm/ponyfill-495ec32d.js":
/*!*************************************************!*\
  !*** ../elements/dist/esm/ponyfill-495ec32d.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"c\": function() { return /* binding */ closest; },\n/* harmony export */   \"e\": function() { return /* binding */ estimateScrollWidth; },\n/* harmony export */   \"m\": function() { return /* binding */ matches; }\n/* harmony export */ });\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * @fileoverview A \"ponyfill\" is a polyfill that doesn't modify the global prototype chain.\n * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.\n */\nfunction closest(element, selector) {\n    if (element.closest) {\n        return element.closest(selector);\n    }\n    var el = element;\n    while (el) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentElement;\n    }\n    return null;\n}\nfunction matches(element, selector) {\n    var nativeMatches = element.matches\n        || element.webkitMatchesSelector\n        || element.msMatchesSelector;\n    return nativeMatches.call(element, selector);\n}\n/**\n * Used to compute the estimated scroll width of elements. When an element is\n * hidden due to display: none; being applied to a parent element, the width is\n * returned as 0. However, the element will have a true width once no longer\n * inside a display: none context. This method computes an estimated width when\n * the element is hidden or returns the true width when the element is visble.\n * @param {Element} element the element whose width to estimate\n */\nfunction estimateScrollWidth(element) {\n    // Check the offsetParent. If the element inherits display: none from any\n    // parent, the offsetParent property will be null (see\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).\n    // This check ensures we only clone the node when necessary.\n    var htmlEl = element;\n    if (htmlEl.offsetParent !== null) {\n        return htmlEl.scrollWidth;\n    }\n    var clone = htmlEl.cloneNode(true);\n    clone.style.setProperty('position', 'absolute');\n    clone.style.setProperty('transform', 'translate(-9999px, -9999px)');\n    document.documentElement.appendChild(clone);\n    var scrollWidth = clone.scrollWidth;\n    document.documentElement.removeChild(clone);\n    return scrollWidth;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vcG9ueWZpbGwtNDk1ZWMzMmQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVnRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vZWxlbWVudHMvZGlzdC9lc20vcG9ueWZpbGwtNDk1ZWMzMmQuanM/ZmU1OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENyYWZ0ZWQgd2l0aCDinaQgYnkgaW5vdmV4IEdtYkhcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBcInBvbnlmaWxsXCIgaXMgYSBwb2x5ZmlsbCB0aGF0IGRvZXNuJ3QgbW9kaWZ5IHRoZSBnbG9iYWwgcHJvdG90eXBlIGNoYWluLlxuICogVGhpcyBtYWtlcyBwb255ZmlsbHMgc2FmZXIgdGhhbiB0cmFkaXRpb25hbCBwb2x5ZmlsbHMsIGVzcGVjaWFsbHkgZm9yIGxpYnJhcmllcyBsaWtlIE1EQy5cbiAqL1xuZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGlmIChlbGVtZW50LmNsb3Nlc3QpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2xvc2VzdChzZWxlY3Rvcik7XG4gICAgfVxuICAgIHZhciBlbCA9IGVsZW1lbnQ7XG4gICAgd2hpbGUgKGVsKSB7XG4gICAgICAgIGlmIChtYXRjaGVzKGVsLCBzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgfVxuICAgICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIHZhciBuYXRpdmVNYXRjaGVzID0gZWxlbWVudC5tYXRjaGVzXG4gICAgICAgIHx8IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3I7XG4gICAgcmV0dXJuIG5hdGl2ZU1hdGNoZXMuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG59XG4vKipcbiAqIFVzZWQgdG8gY29tcHV0ZSB0aGUgZXN0aW1hdGVkIHNjcm9sbCB3aWR0aCBvZiBlbGVtZW50cy4gV2hlbiBhbiBlbGVtZW50IGlzXG4gKiBoaWRkZW4gZHVlIHRvIGRpc3BsYXk6IG5vbmU7IGJlaW5nIGFwcGxpZWQgdG8gYSBwYXJlbnQgZWxlbWVudCwgdGhlIHdpZHRoIGlzXG4gKiByZXR1cm5lZCBhcyAwLiBIb3dldmVyLCB0aGUgZWxlbWVudCB3aWxsIGhhdmUgYSB0cnVlIHdpZHRoIG9uY2Ugbm8gbG9uZ2VyXG4gKiBpbnNpZGUgYSBkaXNwbGF5OiBub25lIGNvbnRleHQuIFRoaXMgbWV0aG9kIGNvbXB1dGVzIGFuIGVzdGltYXRlZCB3aWR0aCB3aGVuXG4gKiB0aGUgZWxlbWVudCBpcyBoaWRkZW4gb3IgcmV0dXJucyB0aGUgdHJ1ZSB3aWR0aCB3aGVuIHRoZSBlbGVtZW50IGlzIHZpc2JsZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aG9zZSB3aWR0aCB0byBlc3RpbWF0ZVxuICovXG5mdW5jdGlvbiBlc3RpbWF0ZVNjcm9sbFdpZHRoKGVsZW1lbnQpIHtcbiAgICAvLyBDaGVjayB0aGUgb2Zmc2V0UGFyZW50LiBJZiB0aGUgZWxlbWVudCBpbmhlcml0cyBkaXNwbGF5OiBub25lIGZyb20gYW55XG4gICAgLy8gcGFyZW50LCB0aGUgb2Zmc2V0UGFyZW50IHByb3BlcnR5IHdpbGwgYmUgbnVsbCAoc2VlXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxFbGVtZW50L29mZnNldFBhcmVudCkuXG4gICAgLy8gVGhpcyBjaGVjayBlbnN1cmVzIHdlIG9ubHkgY2xvbmUgdGhlIG5vZGUgd2hlbiBuZWNlc3NhcnkuXG4gICAgdmFyIGh0bWxFbCA9IGVsZW1lbnQ7XG4gICAgaWYgKGh0bWxFbC5vZmZzZXRQYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxFbC5zY3JvbGxXaWR0aDtcbiAgICB9XG4gICAgdmFyIGNsb25lID0gaHRtbEVsLmNsb25lTm9kZSh0cnVlKTtcbiAgICBjbG9uZS5zdHlsZS5zZXRQcm9wZXJ0eSgncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgICBjbG9uZS5zdHlsZS5zZXRQcm9wZXJ0eSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgtOTk5OXB4LCAtOTk5OXB4KScpO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgdmFyIHNjcm9sbFdpZHRoID0gY2xvbmUuc2Nyb2xsV2lkdGg7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICByZXR1cm4gc2Nyb2xsV2lkdGg7XG59XG5cbmV4cG9ydCB7IGNsb3Nlc3QgYXMgYywgZXN0aW1hdGVTY3JvbGxXaWR0aCBhcyBlLCBtYXRjaGVzIGFzIG0gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../elements/dist/esm/ponyfill-495ec32d.js\n"));

/***/ }),

/***/ "../elements/dist/esm/util-a712b6e1.js":
/*!*********************************************!*\
  !*** ../elements/dist/esm/util-a712b6e1.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"a\": function() { return /* binding */ getCorrectEventName; },\n/* harmony export */   \"g\": function() { return /* binding */ getCorrectPropertyName; }\n/* harmony export */ });\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar cssPropertyNameMap = {\n    animation: {\n        prefixed: '-webkit-animation',\n        standard: 'animation',\n    },\n    transform: {\n        prefixed: '-webkit-transform',\n        standard: 'transform',\n    },\n    transition: {\n        prefixed: '-webkit-transition',\n        standard: 'transition',\n    },\n};\nvar jsEventTypeMap = {\n    animationend: {\n        cssProperty: 'animation',\n        prefixed: 'webkitAnimationEnd',\n        standard: 'animationend',\n    },\n    animationiteration: {\n        cssProperty: 'animation',\n        prefixed: 'webkitAnimationIteration',\n        standard: 'animationiteration',\n    },\n    animationstart: {\n        cssProperty: 'animation',\n        prefixed: 'webkitAnimationStart',\n        standard: 'animationstart',\n    },\n    transitionend: {\n        cssProperty: 'transition',\n        prefixed: 'webkitTransitionEnd',\n        standard: 'transitionend',\n    },\n};\nfunction isWindow(windowObj) {\n    return Boolean(windowObj.document) && typeof windowObj.document.createElement === 'function';\n}\nfunction getCorrectPropertyName(windowObj, cssProperty) {\n    if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {\n        var el = windowObj.document.createElement('div');\n        var _a = cssPropertyNameMap[cssProperty], standard = _a.standard, prefixed = _a.prefixed;\n        var isStandard = standard in el.style;\n        return isStandard ? standard : prefixed;\n    }\n    return cssProperty;\n}\nfunction getCorrectEventName(windowObj, eventType) {\n    if (isWindow(windowObj) && eventType in jsEventTypeMap) {\n        var el = windowObj.document.createElement('div');\n        var _a = jsEventTypeMap[eventType], standard = _a.standard, prefixed = _a.prefixed, cssProperty = _a.cssProperty;\n        var isStandard = cssProperty in el.style;\n        return isStandard ? standard : prefixed;\n    }\n    return eventType;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vdXRpbC1hNzEyYjZlMS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9lbGVtZW50cy9kaXN0L2VzbS91dGlsLWE3MTJiNmUxLmpzP2JlNzYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDcmFmdGVkIHdpdGgg4p2kIGJ5IGlub3ZleCBHbWJIXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xudmFyIGNzc1Byb3BlcnR5TmFtZU1hcCA9IHtcbiAgICBhbmltYXRpb246IHtcbiAgICAgICAgcHJlZml4ZWQ6ICctd2Via2l0LWFuaW1hdGlvbicsXG4gICAgICAgIHN0YW5kYXJkOiAnYW5pbWF0aW9uJyxcbiAgICB9LFxuICAgIHRyYW5zZm9ybToge1xuICAgICAgICBwcmVmaXhlZDogJy13ZWJraXQtdHJhbnNmb3JtJyxcbiAgICAgICAgc3RhbmRhcmQ6ICd0cmFuc2Zvcm0nLFxuICAgIH0sXG4gICAgdHJhbnNpdGlvbjoge1xuICAgICAgICBwcmVmaXhlZDogJy13ZWJraXQtdHJhbnNpdGlvbicsXG4gICAgICAgIHN0YW5kYXJkOiAndHJhbnNpdGlvbicsXG4gICAgfSxcbn07XG52YXIganNFdmVudFR5cGVNYXAgPSB7XG4gICAgYW5pbWF0aW9uZW5kOiB7XG4gICAgICAgIGNzc1Byb3BlcnR5OiAnYW5pbWF0aW9uJyxcbiAgICAgICAgcHJlZml4ZWQ6ICd3ZWJraXRBbmltYXRpb25FbmQnLFxuICAgICAgICBzdGFuZGFyZDogJ2FuaW1hdGlvbmVuZCcsXG4gICAgfSxcbiAgICBhbmltYXRpb25pdGVyYXRpb246IHtcbiAgICAgICAgY3NzUHJvcGVydHk6ICdhbmltYXRpb24nLFxuICAgICAgICBwcmVmaXhlZDogJ3dlYmtpdEFuaW1hdGlvbkl0ZXJhdGlvbicsXG4gICAgICAgIHN0YW5kYXJkOiAnYW5pbWF0aW9uaXRlcmF0aW9uJyxcbiAgICB9LFxuICAgIGFuaW1hdGlvbnN0YXJ0OiB7XG4gICAgICAgIGNzc1Byb3BlcnR5OiAnYW5pbWF0aW9uJyxcbiAgICAgICAgcHJlZml4ZWQ6ICd3ZWJraXRBbmltYXRpb25TdGFydCcsXG4gICAgICAgIHN0YW5kYXJkOiAnYW5pbWF0aW9uc3RhcnQnLFxuICAgIH0sXG4gICAgdHJhbnNpdGlvbmVuZDoge1xuICAgICAgICBjc3NQcm9wZXJ0eTogJ3RyYW5zaXRpb24nLFxuICAgICAgICBwcmVmaXhlZDogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgICBzdGFuZGFyZDogJ3RyYW5zaXRpb25lbmQnLFxuICAgIH0sXG59O1xuZnVuY3Rpb24gaXNXaW5kb3cod2luZG93T2JqKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4od2luZG93T2JqLmRvY3VtZW50KSAmJiB0eXBlb2Ygd2luZG93T2JqLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBnZXRDb3JyZWN0UHJvcGVydHlOYW1lKHdpbmRvd09iaiwgY3NzUHJvcGVydHkpIHtcbiAgICBpZiAoaXNXaW5kb3cod2luZG93T2JqKSAmJiBjc3NQcm9wZXJ0eSBpbiBjc3NQcm9wZXJ0eU5hbWVNYXApIHtcbiAgICAgICAgdmFyIGVsID0gd2luZG93T2JqLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB2YXIgX2EgPSBjc3NQcm9wZXJ0eU5hbWVNYXBbY3NzUHJvcGVydHldLCBzdGFuZGFyZCA9IF9hLnN0YW5kYXJkLCBwcmVmaXhlZCA9IF9hLnByZWZpeGVkO1xuICAgICAgICB2YXIgaXNTdGFuZGFyZCA9IHN0YW5kYXJkIGluIGVsLnN0eWxlO1xuICAgICAgICByZXR1cm4gaXNTdGFuZGFyZCA/IHN0YW5kYXJkIDogcHJlZml4ZWQ7XG4gICAgfVxuICAgIHJldHVybiBjc3NQcm9wZXJ0eTtcbn1cbmZ1bmN0aW9uIGdldENvcnJlY3RFdmVudE5hbWUod2luZG93T2JqLCBldmVudFR5cGUpIHtcbiAgICBpZiAoaXNXaW5kb3cod2luZG93T2JqKSAmJiBldmVudFR5cGUgaW4ganNFdmVudFR5cGVNYXApIHtcbiAgICAgICAgdmFyIGVsID0gd2luZG93T2JqLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB2YXIgX2EgPSBqc0V2ZW50VHlwZU1hcFtldmVudFR5cGVdLCBzdGFuZGFyZCA9IF9hLnN0YW5kYXJkLCBwcmVmaXhlZCA9IF9hLnByZWZpeGVkLCBjc3NQcm9wZXJ0eSA9IF9hLmNzc1Byb3BlcnR5O1xuICAgICAgICB2YXIgaXNTdGFuZGFyZCA9IGNzc1Byb3BlcnR5IGluIGVsLnN0eWxlO1xuICAgICAgICByZXR1cm4gaXNTdGFuZGFyZCA/IHN0YW5kYXJkIDogcHJlZml4ZWQ7XG4gICAgfVxuICAgIHJldHVybiBldmVudFR5cGU7XG59XG5cbmV4cG9ydCB7IGdldENvcnJlY3RFdmVudE5hbWUgYXMgYSwgZ2V0Q29ycmVjdFByb3BlcnR5TmFtZSBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../elements/dist/esm/util-a712b6e1.js\n"));

/***/ })

}]);