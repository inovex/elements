"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["elements_dist_esm_ino-switch_entry_js"],{

/***/ "../elements/dist/esm/_commonjsHelpers-212d567a.js":
/*!*********************************************************!*\
  !*** ../elements/dist/esm/_commonjsHelpers-212d567a.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"a\": function() { return /* binding */ commonjsGlobal; },\n/* harmony export */   \"c\": function() { return /* binding */ createCommonjsModule; },\n/* harmony export */   \"g\": function() { return /* binding */ getDefaultExportFromCjs; }\n/* harmony export */ });\n/*!\n * Crafted with ❤ by inovex GmbH\n */\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, basedir, module) {\n\treturn module = {\n\t\tpath: basedir,\n\t\texports: {},\n\t\trequire: function (path, base) {\n\t\t\treturn commonjsRequire();\n\t\t}\n\t}, fn(module, module.exports), module.exports;\n}\n\nfunction commonjsRequire () {\n\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vX2NvbW1vbmpzSGVscGVycy0yMTJkNTY3YS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxzSEFBc0gscUJBQU0sbUJBQW1CLHFCQUFNOztBQUVySjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7O0FBRXdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9lbGVtZW50cy9kaXN0L2VzbS9fY29tbW9uanNIZWxwZXJzLTIxMmQ1NjdhLmpzPzAxMTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDcmFmdGVkIHdpdGgg4p2kIGJ5IGlub3ZleCBHbWJIXG4gKi9cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyAoeCkge1xuXHRyZXR1cm4geCAmJiB4Ll9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdkZWZhdWx0JykgPyB4WydkZWZhdWx0J10gOiB4O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgYmFzZWRpciwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7XG5cdFx0cGF0aDogYmFzZWRpcixcblx0XHRleHBvcnRzOiB7fSxcblx0XHRyZXF1aXJlOiBmdW5jdGlvbiAocGF0aCwgYmFzZSkge1xuXHRcdFx0cmV0dXJuIGNvbW1vbmpzUmVxdWlyZSgpO1xuXHRcdH1cblx0fSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG5mdW5jdGlvbiBjb21tb25qc1JlcXVpcmUgKCkge1xuXHR0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IEByb2xsdXAvcGx1Z2luLWNvbW1vbmpzJyk7XG59XG5cbmV4cG9ydCB7IGNvbW1vbmpzR2xvYmFsIGFzIGEsIGNyZWF0ZUNvbW1vbmpzTW9kdWxlIGFzIGMsIGdldERlZmF1bHRFeHBvcnRGcm9tQ2pzIGFzIGcgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../elements/dist/esm/_commonjsHelpers-212d567a.js\n"));

/***/ }),

/***/ "../elements/dist/esm/component-780a5882.js":
/*!**************************************************!*\
  !*** ../elements/dist/esm/component-780a5882.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"M\": function() { return /* binding */ MDCRipple; },\n/* harmony export */   \"a\": function() { return /* binding */ applyPassive; },\n/* harmony export */   \"b\": function() { return /* binding */ MDCRippleFoundation; }\n/* harmony export */ });\n/* harmony import */ var _component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component-97c8fef9.js */ \"../elements/dist/esm/component-97c8fef9.js\");\n/* harmony import */ var _ponyfill_495ec32d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ponyfill-495ec32d.js */ \"../elements/dist/esm/ponyfill-495ec32d.js\");\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n\n\n\n/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Determine whether the current browser supports passive event listeners, and\n * if so, use them.\n */\nfunction applyPassive(globalObj) {\n    if (globalObj === void 0) { globalObj = window; }\n    return supportsPassiveOption(globalObj) ?\n        { passive: true } :\n        false;\n}\nfunction supportsPassiveOption(globalObj) {\n    if (globalObj === void 0) { globalObj = window; }\n    // See\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n    var passiveSupported = false;\n    try {\n        var options = {\n            // This function will be called when the browser\n            // attempts to access the passive property.\n            get passive() {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        var handler = function () { };\n        globalObj.document.addEventListener('test', handler, options);\n        globalObj.document.removeEventListener('test', handler, options);\n    }\n    catch (err) {\n        passiveSupported = false;\n    }\n    return passiveSupported;\n}\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar cssClasses = {\n    // Ripple is a special case where the \"root\" component is really a \"mixin\" of sorts,\n    // given that it's an 'upgrade' to an existing component. That being said it is the root\n    // CSS class that all other CSS classes derive from.\n    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',\n    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',\n    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',\n    ROOT: 'mdc-ripple-upgraded',\n    UNBOUNDED: 'mdc-ripple-upgraded--unbounded',\n};\nvar strings = {\n    VAR_FG_SCALE: '--mdc-ripple-fg-scale',\n    VAR_FG_SIZE: '--mdc-ripple-fg-size',\n    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',\n    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',\n    VAR_LEFT: '--mdc-ripple-left',\n    VAR_TOP: '--mdc-ripple-top',\n};\nvar numbers = {\n    DEACTIVATION_TIMEOUT_MS: 225,\n    FG_DEACTIVATION_MS: 150,\n    INITIAL_ORIGIN_SCALE: 0.6,\n    PADDING: 10,\n    TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices\n};\n\n/**\n * Stores result from supportsCssVariables to avoid redundant processing to\n * detect CSS custom variable support.\n */\nvar supportsCssVariables_;\nfunction supportsCssVariables(windowObj, forceRefresh) {\n    if (forceRefresh === void 0) { forceRefresh = false; }\n    var CSS = windowObj.CSS;\n    var supportsCssVars = supportsCssVariables_;\n    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {\n        return supportsCssVariables_;\n    }\n    var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';\n    if (!supportsFunctionPresent) {\n        return false;\n    }\n    var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');\n    // See: https://bugs.webkit.org/show_bug.cgi?id=154669\n    // See: README section on Safari\n    var weAreFeatureDetectingSafari10plus = (CSS.supports('(--css-vars: yes)') &&\n        CSS.supports('color', '#00000000'));\n    supportsCssVars =\n        explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;\n    if (!forceRefresh) {\n        supportsCssVariables_ = supportsCssVars;\n    }\n    return supportsCssVars;\n}\nfunction getNormalizedEventCoords(evt, pageOffset, clientRect) {\n    if (!evt) {\n        return { x: 0, y: 0 };\n    }\n    var x = pageOffset.x, y = pageOffset.y;\n    var documentX = x + clientRect.left;\n    var documentY = y + clientRect.top;\n    var normalizedX;\n    var normalizedY;\n    // Determine touch point relative to the ripple container.\n    if (evt.type === 'touchstart') {\n        var touchEvent = evt;\n        normalizedX = touchEvent.changedTouches[0].pageX - documentX;\n        normalizedY = touchEvent.changedTouches[0].pageY - documentY;\n    }\n    else {\n        var mouseEvent = evt;\n        normalizedX = mouseEvent.pageX - documentX;\n        normalizedY = mouseEvent.pageY - documentY;\n    }\n    return { x: normalizedX, y: normalizedY };\n}\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n// Activation events registered on the root element of each instance for activation\nvar ACTIVATION_EVENT_TYPES = [\n    'touchstart', 'pointerdown', 'mousedown', 'keydown',\n];\n// Deactivation events registered on documentElement when a pointer-related down event occurs\nvar POINTER_DEACTIVATION_EVENT_TYPES = [\n    'touchend', 'pointerup', 'mouseup', 'contextmenu',\n];\n// simultaneous nested activations\nvar activatedTargets = [];\nvar MDCRippleFoundation = /** @class */ (function (_super) {\n    (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__._)(MDCRippleFoundation, _super);\n    function MDCRippleFoundation(adapter) {\n        var _this = _super.call(this, (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.a)({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;\n        _this.activationAnimationHasEnded = false;\n        _this.activationTimer = 0;\n        _this.fgDeactivationRemovalTimer = 0;\n        _this.fgScale = '0';\n        _this.frame = { width: 0, height: 0 };\n        _this.initialSize = 0;\n        _this.layoutFrame = 0;\n        _this.maxRadius = 0;\n        _this.unboundedCoords = { left: 0, top: 0 };\n        _this.activationState = _this.defaultActivationState();\n        _this.activationTimerCallback = function () {\n            _this.activationAnimationHasEnded = true;\n            _this.runDeactivationUXLogicIfReady();\n        };\n        _this.activateHandler = function (e) {\n            _this.activateImpl(e);\n        };\n        _this.deactivateHandler = function () {\n            _this.deactivateImpl();\n        };\n        _this.focusHandler = function () {\n            _this.handleFocus();\n        };\n        _this.blurHandler = function () {\n            _this.handleBlur();\n        };\n        _this.resizeHandler = function () {\n            _this.layout();\n        };\n        return _this;\n    }\n    Object.defineProperty(MDCRippleFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                addClass: function () { return undefined; },\n                browserSupportsCssVars: function () { return true; },\n                computeBoundingRect: function () {\n                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });\n                },\n                containsEventTarget: function () { return true; },\n                deregisterDocumentInteractionHandler: function () { return undefined; },\n                deregisterInteractionHandler: function () { return undefined; },\n                deregisterResizeHandler: function () { return undefined; },\n                getWindowPageOffset: function () { return ({ x: 0, y: 0 }); },\n                isSurfaceActive: function () { return true; },\n                isSurfaceDisabled: function () { return true; },\n                isUnbounded: function () { return true; },\n                registerDocumentInteractionHandler: function () { return undefined; },\n                registerInteractionHandler: function () { return undefined; },\n                registerResizeHandler: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                updateCssVariable: function () { return undefined; },\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCRippleFoundation.prototype.init = function () {\n        var _this = this;\n        var supportsPressRipple = this.supportsPressRipple();\n        this.registerRootHandlers(supportsPressRipple);\n        if (supportsPressRipple) {\n            var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;\n            requestAnimationFrame(function () {\n                _this.adapter.addClass(ROOT_1);\n                if (_this.adapter.isUnbounded()) {\n                    _this.adapter.addClass(UNBOUNDED_1);\n                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n                    _this.layoutInternal();\n                }\n            });\n        }\n    };\n    MDCRippleFoundation.prototype.destroy = function () {\n        var _this = this;\n        if (this.supportsPressRipple()) {\n            if (this.activationTimer) {\n                clearTimeout(this.activationTimer);\n                this.activationTimer = 0;\n                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);\n            }\n            if (this.fgDeactivationRemovalTimer) {\n                clearTimeout(this.fgDeactivationRemovalTimer);\n                this.fgDeactivationRemovalTimer = 0;\n                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);\n            }\n            var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;\n            requestAnimationFrame(function () {\n                _this.adapter.removeClass(ROOT_2);\n                _this.adapter.removeClass(UNBOUNDED_2);\n                _this.removeCssVars();\n            });\n        }\n        this.deregisterRootHandlers();\n        this.deregisterDeactivationHandlers();\n    };\n    /**\n     * @param evt Optional event containing position information.\n     */\n    MDCRippleFoundation.prototype.activate = function (evt) {\n        this.activateImpl(evt);\n    };\n    MDCRippleFoundation.prototype.deactivate = function () {\n        this.deactivateImpl();\n    };\n    MDCRippleFoundation.prototype.layout = function () {\n        var _this = this;\n        if (this.layoutFrame) {\n            cancelAnimationFrame(this.layoutFrame);\n        }\n        this.layoutFrame = requestAnimationFrame(function () {\n            _this.layoutInternal();\n            _this.layoutFrame = 0;\n        });\n    };\n    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {\n        var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;\n        if (unbounded) {\n            this.adapter.addClass(UNBOUNDED);\n        }\n        else {\n            this.adapter.removeClass(UNBOUNDED);\n        }\n    };\n    MDCRippleFoundation.prototype.handleFocus = function () {\n        var _this = this;\n        requestAnimationFrame(function () { return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });\n    };\n    MDCRippleFoundation.prototype.handleBlur = function () {\n        var _this = this;\n        requestAnimationFrame(function () { return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });\n    };\n    /**\n     * We compute this property so that we are not querying information about the client\n     * until the point in time where the foundation requests it. This prevents scenarios where\n     * client-side feature-detection may happen too early, such as when components are rendered on the server\n     * and then initialized at mount time on the client.\n     */\n    MDCRippleFoundation.prototype.supportsPressRipple = function () {\n        return this.adapter.browserSupportsCssVars();\n    };\n    MDCRippleFoundation.prototype.defaultActivationState = function () {\n        return {\n            activationEvent: undefined,\n            hasDeactivationUXRun: false,\n            isActivated: false,\n            isProgrammatic: false,\n            wasActivatedByPointer: false,\n            wasElementMadeActive: false,\n        };\n    };\n    /**\n     * supportsPressRipple Passed from init to save a redundant function call\n     */\n    MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {\n        var e_1, _a;\n        if (supportsPressRipple) {\n            try {\n                for (var ACTIVATION_EVENT_TYPES_1 = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.b)(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {\n                    var evtType = ACTIVATION_EVENT_TYPES_1_1.value;\n                    this.adapter.registerInteractionHandler(evtType, this.activateHandler);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            if (this.adapter.isUnbounded()) {\n                this.adapter.registerResizeHandler(this.resizeHandler);\n            }\n        }\n        this.adapter.registerInteractionHandler('focus', this.focusHandler);\n        this.adapter.registerInteractionHandler('blur', this.blurHandler);\n    };\n    MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {\n        var e_2, _a;\n        if (evt.type === 'keydown') {\n            this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);\n        }\n        else {\n            try {\n                for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.b)(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {\n                    var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;\n                    this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n    };\n    MDCRippleFoundation.prototype.deregisterRootHandlers = function () {\n        var e_3, _a;\n        try {\n            for (var ACTIVATION_EVENT_TYPES_2 = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.b)(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {\n                var evtType = ACTIVATION_EVENT_TYPES_2_1.value;\n                this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        this.adapter.deregisterInteractionHandler('focus', this.focusHandler);\n        this.adapter.deregisterInteractionHandler('blur', this.blurHandler);\n        if (this.adapter.isUnbounded()) {\n            this.adapter.deregisterResizeHandler(this.resizeHandler);\n        }\n    };\n    MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {\n        var e_4, _a;\n        this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);\n        try {\n            for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.b)(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {\n                var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;\n                this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n    };\n    MDCRippleFoundation.prototype.removeCssVars = function () {\n        var _this = this;\n        var rippleStrings = MDCRippleFoundation.strings;\n        var keys = Object.keys(rippleStrings);\n        keys.forEach(function (key) {\n            if (key.indexOf('VAR_') === 0) {\n                _this.adapter.updateCssVariable(rippleStrings[key], null);\n            }\n        });\n    };\n    MDCRippleFoundation.prototype.activateImpl = function (evt) {\n        var _this = this;\n        if (this.adapter.isSurfaceDisabled()) {\n            return;\n        }\n        var activationState = this.activationState;\n        if (activationState.isActivated) {\n            return;\n        }\n        // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n        var previousActivationEvent = this.previousActivationEvent;\n        var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;\n        if (isSameInteraction) {\n            return;\n        }\n        activationState.isActivated = true;\n        activationState.isProgrammatic = evt === undefined;\n        activationState.activationEvent = evt;\n        activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');\n        var hasActivatedChild = evt !== undefined &&\n            activatedTargets.length > 0 &&\n            activatedTargets.some(function (target) { return _this.adapter.containsEventTarget(target); });\n        if (hasActivatedChild) {\n            // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n            this.resetActivationState();\n            return;\n        }\n        if (evt !== undefined) {\n            activatedTargets.push(evt.target);\n            this.registerDeactivationHandlers(evt);\n        }\n        activationState.wasElementMadeActive = this.checkElementMadeActive(evt);\n        if (activationState.wasElementMadeActive) {\n            this.animateActivation();\n        }\n        requestAnimationFrame(function () {\n            // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n            activatedTargets = [];\n            if (!activationState.wasElementMadeActive\n                && evt !== undefined\n                && (evt.key === ' ' || evt.keyCode === 32)) {\n                // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n                // active states inconsistently when they're called within event handling code:\n                // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n                // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n                // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n                // variable is set within a rAF callback for a submit button interaction (#2241).\n                activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);\n                if (activationState.wasElementMadeActive) {\n                    _this.animateActivation();\n                }\n            }\n            if (!activationState.wasElementMadeActive) {\n                // Reset activation state immediately if element was not made active.\n                _this.activationState = _this.defaultActivationState();\n            }\n        });\n    };\n    MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {\n        return (evt !== undefined && evt.type === 'keydown') ?\n            this.adapter.isSurfaceActive() :\n            true;\n    };\n    MDCRippleFoundation.prototype.animateActivation = function () {\n        var _this = this;\n        var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;\n        var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;\n        var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;\n        this.layoutInternal();\n        var translateStart = '';\n        var translateEnd = '';\n        if (!this.adapter.isUnbounded()) {\n            var _c = this.getFgTranslationCoordinates(), startPoint = _c.startPoint, endPoint = _c.endPoint;\n            translateStart = startPoint.x + \"px, \" + startPoint.y + \"px\";\n            translateEnd = endPoint.x + \"px, \" + endPoint.y + \"px\";\n        }\n        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);\n        // Cancel any ongoing activation/deactivation animations\n        clearTimeout(this.activationTimer);\n        clearTimeout(this.fgDeactivationRemovalTimer);\n        this.rmBoundedActivationClasses();\n        this.adapter.removeClass(FG_DEACTIVATION);\n        // Force layout in order to re-trigger the animation.\n        this.adapter.computeBoundingRect();\n        this.adapter.addClass(FG_ACTIVATION);\n        this.activationTimer = setTimeout(function () {\n            _this.activationTimerCallback();\n        }, DEACTIVATION_TIMEOUT_MS);\n    };\n    MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {\n        var _a = this.activationState, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;\n        var startPoint;\n        if (wasActivatedByPointer) {\n            startPoint = getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());\n        }\n        else {\n            startPoint = {\n                x: this.frame.width / 2,\n                y: this.frame.height / 2,\n            };\n        }\n        // Center the element around the start point.\n        startPoint = {\n            x: startPoint.x - (this.initialSize / 2),\n            y: startPoint.y - (this.initialSize / 2),\n        };\n        var endPoint = {\n            x: (this.frame.width / 2) - (this.initialSize / 2),\n            y: (this.frame.height / 2) - (this.initialSize / 2),\n        };\n        return { startPoint: startPoint, endPoint: endPoint };\n    };\n    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {\n        var _this = this;\n        // This method is called both when a pointing device is released, and when the activation animation ends.\n        // The deactivation animation should only run after both of those occur.\n        var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;\n        var _a = this.activationState, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;\n        var activationHasEnded = hasDeactivationUXRun || !isActivated;\n        if (activationHasEnded && this.activationAnimationHasEnded) {\n            this.rmBoundedActivationClasses();\n            this.adapter.addClass(FG_DEACTIVATION);\n            this.fgDeactivationRemovalTimer = setTimeout(function () {\n                _this.adapter.removeClass(FG_DEACTIVATION);\n            }, numbers.FG_DEACTIVATION_MS);\n        }\n    };\n    MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {\n        var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n        this.adapter.removeClass(FG_ACTIVATION);\n        this.activationAnimationHasEnded = false;\n        this.adapter.computeBoundingRect();\n    };\n    MDCRippleFoundation.prototype.resetActivationState = function () {\n        var _this = this;\n        this.previousActivationEvent = this.activationState.activationEvent;\n        this.activationState = this.defaultActivationState();\n        // Touch devices may fire additional events for the same interaction within a short time.\n        // Store the previous event until it's safe to assume that subsequent events are for new interactions.\n        setTimeout(function () { return _this.previousActivationEvent = undefined; }, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n    };\n    MDCRippleFoundation.prototype.deactivateImpl = function () {\n        var _this = this;\n        var activationState = this.activationState;\n        // This can happen in scenarios such as when you have a keyup event that blurs the element.\n        if (!activationState.isActivated) {\n            return;\n        }\n        var state = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.a)({}, activationState);\n        if (activationState.isProgrammatic) {\n            requestAnimationFrame(function () {\n                _this.animateDeactivation(state);\n            });\n            this.resetActivationState();\n        }\n        else {\n            this.deregisterDeactivationHandlers();\n            requestAnimationFrame(function () {\n                _this.activationState.hasDeactivationUXRun = true;\n                _this.animateDeactivation(state);\n                _this.resetActivationState();\n            });\n        }\n    };\n    MDCRippleFoundation.prototype.animateDeactivation = function (_a) {\n        var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;\n        if (wasActivatedByPointer || wasElementMadeActive) {\n            this.runDeactivationUXLogicIfReady();\n        }\n    };\n    MDCRippleFoundation.prototype.layoutInternal = function () {\n        var _this = this;\n        this.frame = this.adapter.computeBoundingRect();\n        var maxDim = Math.max(this.frame.height, this.frame.width);\n        // Surface diameter is treated differently for unbounded vs. bounded ripples.\n        // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n        // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n        // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter\n        // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via\n        // `overflow: hidden`.\n        var getBoundedRadius = function () {\n            var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));\n            return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n        };\n        this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();\n        // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n        var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);\n        // Unbounded ripple size should always be even number to equally center align.\n        if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {\n            this.initialSize = initialSize - 1;\n        }\n        else {\n            this.initialSize = initialSize;\n        }\n        this.fgScale = \"\" + this.maxRadius / this.initialSize;\n        this.updateLayoutCssVars();\n    };\n    MDCRippleFoundation.prototype.updateLayoutCssVars = function () {\n        var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;\n        this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + \"px\");\n        this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);\n        if (this.adapter.isUnbounded()) {\n            this.unboundedCoords = {\n                left: Math.round((this.frame.width / 2) - (this.initialSize / 2)),\n                top: Math.round((this.frame.height / 2) - (this.initialSize / 2)),\n            };\n            this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + \"px\");\n            this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + \"px\");\n        }\n    };\n    return MDCRippleFoundation;\n}(_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.M));\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCRipple = /** @class */ (function (_super) {\n    (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__._)(MDCRipple, _super);\n    function MDCRipple() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.disabled = false;\n        return _this;\n    }\n    MDCRipple.attachTo = function (root, opts) {\n        if (opts === void 0) { opts = {\n            isUnbounded: undefined\n        }; }\n        var ripple = new MDCRipple(root);\n        // Only override unbounded behavior if option is explicitly specified\n        if (opts.isUnbounded !== undefined) {\n            ripple.unbounded = opts.isUnbounded;\n        }\n        return ripple;\n    };\n    MDCRipple.createAdapter = function (instance) {\n        return {\n            addClass: function (className) { return instance.root.classList.add(className); },\n            browserSupportsCssVars: function () { return supportsCssVariables(window); },\n            computeBoundingRect: function () { return instance.root.getBoundingClientRect(); },\n            containsEventTarget: function (target) { return instance.root.contains(target); },\n            deregisterDocumentInteractionHandler: function (evtType, handler) {\n                return document.documentElement.removeEventListener(evtType, handler, applyPassive());\n            },\n            deregisterInteractionHandler: function (evtType, handler) {\n                return instance.root\n                    .removeEventListener(evtType, handler, applyPassive());\n            },\n            deregisterResizeHandler: function (handler) {\n                return window.removeEventListener('resize', handler);\n            },\n            getWindowPageOffset: function () {\n                return ({ x: window.pageXOffset, y: window.pageYOffset });\n            },\n            isSurfaceActive: function () { return (0,_ponyfill_495ec32d_js__WEBPACK_IMPORTED_MODULE_1__.m)(instance.root, ':active'); },\n            isSurfaceDisabled: function () { return Boolean(instance.disabled); },\n            isUnbounded: function () { return Boolean(instance.unbounded); },\n            registerDocumentInteractionHandler: function (evtType, handler) {\n                return document.documentElement.addEventListener(evtType, handler, applyPassive());\n            },\n            registerInteractionHandler: function (evtType, handler) {\n                return instance.root\n                    .addEventListener(evtType, handler, applyPassive());\n            },\n            registerResizeHandler: function (handler) {\n                return window.addEventListener('resize', handler);\n            },\n            removeClass: function (className) { return instance.root.classList.remove(className); },\n            updateCssVariable: function (varName, value) {\n                return instance.root.style.setProperty(varName, value);\n            },\n        };\n    };\n    Object.defineProperty(MDCRipple.prototype, \"unbounded\", {\n        get: function () {\n            return Boolean(this.isUnbounded);\n        },\n        set: function (unbounded) {\n            this.isUnbounded = Boolean(unbounded);\n            this.setUnbounded();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCRipple.prototype.activate = function () {\n        this.foundation.activate();\n    };\n    MDCRipple.prototype.deactivate = function () {\n        this.foundation.deactivate();\n    };\n    MDCRipple.prototype.layout = function () {\n        this.foundation.layout();\n    };\n    MDCRipple.prototype.getDefaultFoundation = function () {\n        return new MDCRippleFoundation(MDCRipple.createAdapter(this));\n    };\n    MDCRipple.prototype.initialSyncWithDOM = function () {\n        var root = this.root;\n        this.isUnbounded = 'mdcRippleIsUnbounded' in root.dataset;\n    };\n    /**\n     * Closure Compiler throws an access control error when directly accessing a\n     * protected or private property inside a getter/setter, like unbounded above.\n     * By accessing the protected property inside a method, we solve that problem.\n     * That's why this function exists.\n     */\n    MDCRipple.prototype.setUnbounded = function () {\n        this.foundation.setUnbounded(Boolean(this.isUnbounded));\n    };\n    return MDCRipple;\n}(_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_0__.c));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vY29tcG9uZW50LTc4MGE1ODgyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQzhIO0FBQ3hFOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQSxVQUFVLGdCQUFnQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHlEQUFTO0FBQ2I7QUFDQSxzQ0FBc0MseURBQVEsQ0FBQyx5REFBUSxHQUFHO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxtQkFBbUI7QUFDM0Qsc0RBQXNELGNBQWM7QUFDcEU7QUFDQSw4QkFBOEIsMkRBQTJEO0FBQ3pGLGlCQUFpQjtBQUNqQixtREFBbUQsY0FBYztBQUNqRSxvRUFBb0UsbUJBQW1CO0FBQ3ZGLDREQUE0RCxtQkFBbUI7QUFDL0UsdURBQXVELG1CQUFtQjtBQUMxRSxtREFBbUQsVUFBVSxZQUFZLElBQUk7QUFDN0UsK0NBQStDLGNBQWM7QUFDN0QsaURBQWlELGNBQWM7QUFDL0QsMkNBQTJDLGNBQWM7QUFDekQsa0VBQWtFLG1CQUFtQjtBQUNyRiwwREFBMEQsbUJBQW1CO0FBQzdFLHFEQUFxRCxtQkFBbUI7QUFDeEUsMkNBQTJDLG1CQUFtQjtBQUM5RCxpREFBaUQsbUJBQW1CO0FBQ3BFO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLDJFQUEyRTtBQUN2SDtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsOEVBQThFO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCx5REFBUSx3RkFBd0Ysa0NBQWtDO0FBQ3RMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFFBQVE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELHlEQUFRLHNIQUFzSCw0Q0FBNEM7QUFDeE87QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QseURBQVEsd0ZBQXdGLGtDQUFrQztBQUNsTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQseURBQVEsc0hBQXNILDRDQUE0QztBQUNwTztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELG1EQUFtRDtBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLG1EQUFtRDtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHlEQUFRLEdBQUc7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLENBQUMscURBQWE7O0FBRWY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkseURBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxnREFBZ0Q7QUFDN0Ysa0RBQWtELHNDQUFzQztBQUN4RiwrQ0FBK0MsK0NBQStDO0FBQzlGLHFEQUFxRCx3Q0FBd0M7QUFDN0Y7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDBCQUEwQiw4Q0FBOEM7QUFDeEUsYUFBYTtBQUNiLDJDQUEyQyxPQUFPLHdEQUFPLDZCQUE2QjtBQUN0Riw2Q0FBNkMsb0NBQW9DO0FBQ2pGLHVDQUF1QyxxQ0FBcUM7QUFDNUU7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYixnREFBZ0QsbURBQW1EO0FBQ25HO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLHFEQUFZOztBQUV5RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vZWxlbWVudHMvZGlzdC9lc20vY29tcG9uZW50LTc4MGE1ODgyLmpzP2I3YzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDcmFmdGVkIHdpdGgg4p2kIGJ5IGlub3ZleCBHbWJIXG4gKi9cbmltcG9ydCB7IF8gYXMgX19leHRlbmRzLCBhIGFzIF9fYXNzaWduLCBiIGFzIF9fdmFsdWVzLCBNIGFzIE1EQ0ZvdW5kYXRpb24sIGMgYXMgTURDQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQtOTdjOGZlZjkuanMnO1xuaW1wb3J0IHsgbSBhcyBtYXRjaGVzIH0gZnJvbSAnLi9wb255ZmlsbC00OTVlYzMyZC5qcyc7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgY3VycmVudCBicm93c2VyIHN1cHBvcnRzIHBhc3NpdmUgZXZlbnQgbGlzdGVuZXJzLCBhbmRcbiAqIGlmIHNvLCB1c2UgdGhlbS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlQYXNzaXZlKGdsb2JhbE9iaikge1xuICAgIGlmIChnbG9iYWxPYmogPT09IHZvaWQgMCkgeyBnbG9iYWxPYmogPSB3aW5kb3c7IH1cbiAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlT3B0aW9uKGdsb2JhbE9iaikgP1xuICAgICAgICB7IHBhc3NpdmU6IHRydWUgfSA6XG4gICAgICAgIGZhbHNlO1xufVxuZnVuY3Rpb24gc3VwcG9ydHNQYXNzaXZlT3B0aW9uKGdsb2JhbE9iaikge1xuICAgIGlmIChnbG9iYWxPYmogPT09IHZvaWQgMCkgeyBnbG9iYWxPYmogPSB3aW5kb3c7IH1cbiAgICAvLyBTZWVcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lclxuICAgIHZhciBwYXNzaXZlU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGJyb3dzZXJcbiAgICAgICAgICAgIC8vIGF0dGVtcHRzIHRvIGFjY2VzcyB0aGUgcGFzc2l2ZSBwcm9wZXJ0eS5cbiAgICAgICAgICAgIGdldCBwYXNzaXZlKCkge1xuICAgICAgICAgICAgICAgIHBhc3NpdmVTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIGdsb2JhbE9iai5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgICAgIGdsb2JhbE9iai5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0JywgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gcGFzc2l2ZVN1cHBvcnRlZDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgY3NzQ2xhc3NlcyA9IHtcbiAgICAvLyBSaXBwbGUgaXMgYSBzcGVjaWFsIGNhc2Ugd2hlcmUgdGhlIFwicm9vdFwiIGNvbXBvbmVudCBpcyByZWFsbHkgYSBcIm1peGluXCIgb2Ygc29ydHMsXG4gICAgLy8gZ2l2ZW4gdGhhdCBpdCdzIGFuICd1cGdyYWRlJyB0byBhbiBleGlzdGluZyBjb21wb25lbnQuIFRoYXQgYmVpbmcgc2FpZCBpdCBpcyB0aGUgcm9vdFxuICAgIC8vIENTUyBjbGFzcyB0aGF0IGFsbCBvdGhlciBDU1MgY2xhc3NlcyBkZXJpdmUgZnJvbS5cbiAgICBCR19GT0NVU0VEOiAnbWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkJyxcbiAgICBGR19BQ1RJVkFUSU9OOiAnbWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1hY3RpdmF0aW9uJyxcbiAgICBGR19ERUFDVElWQVRJT046ICdtZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWRlYWN0aXZhdGlvbicsXG4gICAgUk9PVDogJ21kYy1yaXBwbGUtdXBncmFkZWQnLFxuICAgIFVOQk9VTkRFRDogJ21kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZCcsXG59O1xudmFyIHN0cmluZ3MgPSB7XG4gICAgVkFSX0ZHX1NDQUxFOiAnLS1tZGMtcmlwcGxlLWZnLXNjYWxlJyxcbiAgICBWQVJfRkdfU0laRTogJy0tbWRjLXJpcHBsZS1mZy1zaXplJyxcbiAgICBWQVJfRkdfVFJBTlNMQVRFX0VORDogJy0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kJyxcbiAgICBWQVJfRkdfVFJBTlNMQVRFX1NUQVJUOiAnLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1zdGFydCcsXG4gICAgVkFSX0xFRlQ6ICctLW1kYy1yaXBwbGUtbGVmdCcsXG4gICAgVkFSX1RPUDogJy0tbWRjLXJpcHBsZS10b3AnLFxufTtcbnZhciBudW1iZXJzID0ge1xuICAgIERFQUNUSVZBVElPTl9USU1FT1VUX01TOiAyMjUsXG4gICAgRkdfREVBQ1RJVkFUSU9OX01TOiAxNTAsXG4gICAgSU5JVElBTF9PUklHSU5fU0NBTEU6IDAuNixcbiAgICBQQURESU5HOiAxMCxcbiAgICBUQVBfREVMQVlfTVM6IDMwMCwgLy8gRGVsYXkgYmV0d2VlbiB0b3VjaCBhbmQgc2ltdWxhdGVkIG1vdXNlIGV2ZW50cyBvbiB0b3VjaCBkZXZpY2VzXG59O1xuXG4vKipcbiAqIFN0b3JlcyByZXN1bHQgZnJvbSBzdXBwb3J0c0Nzc1ZhcmlhYmxlcyB0byBhdm9pZCByZWR1bmRhbnQgcHJvY2Vzc2luZyB0b1xuICogZGV0ZWN0IENTUyBjdXN0b20gdmFyaWFibGUgc3VwcG9ydC5cbiAqL1xudmFyIHN1cHBvcnRzQ3NzVmFyaWFibGVzXztcbmZ1bmN0aW9uIHN1cHBvcnRzQ3NzVmFyaWFibGVzKHdpbmRvd09iaiwgZm9yY2VSZWZyZXNoKSB7XG4gICAgaWYgKGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwKSB7IGZvcmNlUmVmcmVzaCA9IGZhbHNlOyB9XG4gICAgdmFyIENTUyA9IHdpbmRvd09iai5DU1M7XG4gICAgdmFyIHN1cHBvcnRzQ3NzVmFycyA9IHN1cHBvcnRzQ3NzVmFyaWFibGVzXztcbiAgICBpZiAodHlwZW9mIHN1cHBvcnRzQ3NzVmFyaWFibGVzXyA9PT0gJ2Jvb2xlYW4nICYmICFmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRzQ3NzVmFyaWFibGVzXztcbiAgICB9XG4gICAgdmFyIHN1cHBvcnRzRnVuY3Rpb25QcmVzZW50ID0gQ1NTICYmIHR5cGVvZiBDU1Muc3VwcG9ydHMgPT09ICdmdW5jdGlvbic7XG4gICAgaWYgKCFzdXBwb3J0c0Z1bmN0aW9uUHJlc2VudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBleHBsaWNpdGx5U3VwcG9ydHNDc3NWYXJzID0gQ1NTLnN1cHBvcnRzKCctLWNzcy12YXJzJywgJ3llcycpO1xuICAgIC8vIFNlZTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NDY2OVxuICAgIC8vIFNlZTogUkVBRE1FIHNlY3Rpb24gb24gU2FmYXJpXG4gICAgdmFyIHdlQXJlRmVhdHVyZURldGVjdGluZ1NhZmFyaTEwcGx1cyA9IChDU1Muc3VwcG9ydHMoJygtLWNzcy12YXJzOiB5ZXMpJykgJiZcbiAgICAgICAgQ1NTLnN1cHBvcnRzKCdjb2xvcicsICcjMDAwMDAwMDAnKSk7XG4gICAgc3VwcG9ydHNDc3NWYXJzID1cbiAgICAgICAgZXhwbGljaXRseVN1cHBvcnRzQ3NzVmFycyB8fCB3ZUFyZUZlYXR1cmVEZXRlY3RpbmdTYWZhcmkxMHBsdXM7XG4gICAgaWYgKCFmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgc3VwcG9ydHNDc3NWYXJpYWJsZXNfID0gc3VwcG9ydHNDc3NWYXJzO1xuICAgIH1cbiAgICByZXR1cm4gc3VwcG9ydHNDc3NWYXJzO1xufVxuZnVuY3Rpb24gZ2V0Tm9ybWFsaXplZEV2ZW50Q29vcmRzKGV2dCwgcGFnZU9mZnNldCwgY2xpZW50UmVjdCkge1xuICAgIGlmICghZXZ0KSB7XG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAgfTtcbiAgICB9XG4gICAgdmFyIHggPSBwYWdlT2Zmc2V0LngsIHkgPSBwYWdlT2Zmc2V0Lnk7XG4gICAgdmFyIGRvY3VtZW50WCA9IHggKyBjbGllbnRSZWN0LmxlZnQ7XG4gICAgdmFyIGRvY3VtZW50WSA9IHkgKyBjbGllbnRSZWN0LnRvcDtcbiAgICB2YXIgbm9ybWFsaXplZFg7XG4gICAgdmFyIG5vcm1hbGl6ZWRZO1xuICAgIC8vIERldGVybWluZSB0b3VjaCBwb2ludCByZWxhdGl2ZSB0byB0aGUgcmlwcGxlIGNvbnRhaW5lci5cbiAgICBpZiAoZXZ0LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICB2YXIgdG91Y2hFdmVudCA9IGV2dDtcbiAgICAgICAgbm9ybWFsaXplZFggPSB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIC0gZG9jdW1lbnRYO1xuICAgICAgICBub3JtYWxpemVkWSA9IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSBkb2N1bWVudFk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbW91c2VFdmVudCA9IGV2dDtcbiAgICAgICAgbm9ybWFsaXplZFggPSBtb3VzZUV2ZW50LnBhZ2VYIC0gZG9jdW1lbnRYO1xuICAgICAgICBub3JtYWxpemVkWSA9IG1vdXNlRXZlbnQucGFnZVkgLSBkb2N1bWVudFk7XG4gICAgfVxuICAgIHJldHVybiB7IHg6IG5vcm1hbGl6ZWRYLCB5OiBub3JtYWxpemVkWSB9O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbi8vIEFjdGl2YXRpb24gZXZlbnRzIHJlZ2lzdGVyZWQgb24gdGhlIHJvb3QgZWxlbWVudCBvZiBlYWNoIGluc3RhbmNlIGZvciBhY3RpdmF0aW9uXG52YXIgQUNUSVZBVElPTl9FVkVOVF9UWVBFUyA9IFtcbiAgICAndG91Y2hzdGFydCcsICdwb2ludGVyZG93bicsICdtb3VzZWRvd24nLCAna2V5ZG93bicsXG5dO1xuLy8gRGVhY3RpdmF0aW9uIGV2ZW50cyByZWdpc3RlcmVkIG9uIGRvY3VtZW50RWxlbWVudCB3aGVuIGEgcG9pbnRlci1yZWxhdGVkIGRvd24gZXZlbnQgb2NjdXJzXG52YXIgUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVMgPSBbXG4gICAgJ3RvdWNoZW5kJywgJ3BvaW50ZXJ1cCcsICdtb3VzZXVwJywgJ2NvbnRleHRtZW51Jyxcbl07XG4vLyBzaW11bHRhbmVvdXMgbmVzdGVkIGFjdGl2YXRpb25zXG52YXIgYWN0aXZhdGVkVGFyZ2V0cyA9IFtdO1xudmFyIE1EQ1JpcHBsZUZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ1JpcHBsZUZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDUmlwcGxlRm91bmRhdGlvbihhZGFwdGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENSaXBwbGVGb3VuZGF0aW9uLmRlZmF1bHRBZGFwdGVyKSwgYWRhcHRlcikpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjdGl2YXRpb25BbmltYXRpb25IYXNFbmRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5hY3RpdmF0aW9uVGltZXIgPSAwO1xuICAgICAgICBfdGhpcy5mZ0RlYWN0aXZhdGlvblJlbW92YWxUaW1lciA9IDA7XG4gICAgICAgIF90aGlzLmZnU2NhbGUgPSAnMCc7XG4gICAgICAgIF90aGlzLmZyYW1lID0geyB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XG4gICAgICAgIF90aGlzLmluaXRpYWxTaXplID0gMDtcbiAgICAgICAgX3RoaXMubGF5b3V0RnJhbWUgPSAwO1xuICAgICAgICBfdGhpcy5tYXhSYWRpdXMgPSAwO1xuICAgICAgICBfdGhpcy51bmJvdW5kZWRDb29yZHMgPSB7IGxlZnQ6IDAsIHRvcDogMCB9O1xuICAgICAgICBfdGhpcy5hY3RpdmF0aW9uU3RhdGUgPSBfdGhpcy5kZWZhdWx0QWN0aXZhdGlvblN0YXRlKCk7XG4gICAgICAgIF90aGlzLmFjdGl2YXRpb25UaW1lckNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuYWN0aXZhdGlvbkFuaW1hdGlvbkhhc0VuZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIF90aGlzLnJ1bkRlYWN0aXZhdGlvblVYTG9naWNJZlJlYWR5KCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmFjdGl2YXRlSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBfdGhpcy5hY3RpdmF0ZUltcGwoZSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmRlYWN0aXZhdGVIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuZGVhY3RpdmF0ZUltcGwoKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuZm9jdXNIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlRm9jdXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuYmx1ckhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVCbHVyKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnJlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5sYXlvdXQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDUmlwcGxlRm91bmRhdGlvbiwgXCJjc3NDbGFzc2VzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3NzQ2xhc3NlcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENSaXBwbGVGb3VuZGF0aW9uLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1JpcHBsZUZvdW5kYXRpb24sIFwibnVtYmVyc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcnM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDUmlwcGxlRm91bmRhdGlvbiwgXCJkZWZhdWx0QWRhcHRlclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGJyb3dzZXJTdXBwb3J0c0Nzc1ZhcnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgICAgICAgICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHsgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udGFpbnNFdmVudFRhcmdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgICAgICBkZXJlZ2lzdGVyRG9jdW1lbnRJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBkZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZGVyZWdpc3RlclJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBnZXRXaW5kb3dQYWdlT2Zmc2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAoeyB4OiAwLCB5OiAwIH0pOyB9LFxuICAgICAgICAgICAgICAgIGlzU3VyZmFjZUFjdGl2ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgICAgICBpc1N1cmZhY2VEaXNhYmxlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgICAgICBpc1VuYm91bmRlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgICAgICByZWdpc3RlckRvY3VtZW50SW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZWdpc3RlclJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUNzc1ZhcmlhYmxlOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHN1cHBvcnRzUHJlc3NSaXBwbGUgPSB0aGlzLnN1cHBvcnRzUHJlc3NSaXBwbGUoKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlclJvb3RIYW5kbGVycyhzdXBwb3J0c1ByZXNzUmlwcGxlKTtcbiAgICAgICAgaWYgKHN1cHBvcnRzUHJlc3NSaXBwbGUpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3NlcywgUk9PVF8xID0gX2EuUk9PVCwgVU5CT1VOREVEXzEgPSBfYS5VTkJPVU5ERUQ7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoUk9PVF8xKTtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuYWRhcHRlci5pc1VuYm91bmRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoVU5CT1VOREVEXzEpO1xuICAgICAgICAgICAgICAgICAgICAvLyBVbmJvdW5kZWQgcmlwcGxlcyBuZWVkIGxheW91dCBsb2dpYyBhcHBsaWVkIGltbWVkaWF0ZWx5IHRvIHNldCBjb29yZGluYXRlcyBmb3IgYm90aCBzaGFkZSBhbmQgcmlwcGxlXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxheW91dEludGVybmFsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLnN1cHBvcnRzUHJlc3NSaXBwbGUoKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZhdGlvblRpbWVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYWN0aXZhdGlvblRpbWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2YXRpb25UaW1lciA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5GR19BQ1RJVkFUSU9OKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmZnRGVhY3RpdmF0aW9uUmVtb3ZhbFRpbWVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZmdEZWFjdGl2YXRpb25SZW1vdmFsVGltZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmdEZWFjdGl2YXRpb25SZW1vdmFsVGltZXIgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhNRENSaXBwbGVGb3VuZGF0aW9uLmNzc0NsYXNzZXMuRkdfREVBQ1RJVkFUSU9OKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfYSA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3NlcywgUk9PVF8yID0gX2EuUk9PVCwgVU5CT1VOREVEXzIgPSBfYS5VTkJPVU5ERUQ7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoUk9PVF8yKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKFVOQk9VTkRFRF8yKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmVDc3NWYXJzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlcmVnaXN0ZXJSb290SGFuZGxlcnMoKTtcbiAgICAgICAgdGhpcy5kZXJlZ2lzdGVyRGVhY3RpdmF0aW9uSGFuZGxlcnMoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBldnQgT3B0aW9uYWwgZXZlbnQgY29udGFpbmluZyBwb3NpdGlvbiBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdGhpcy5hY3RpdmF0ZUltcGwoZXZ0KTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGVhY3RpdmF0ZUltcGwoKTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMubGF5b3V0RnJhbWUpIHtcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMubGF5b3V0RnJhbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGF5b3V0RnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubGF5b3V0SW50ZXJuYWwoKTtcbiAgICAgICAgICAgIF90aGlzLmxheW91dEZyYW1lID0gMDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRVbmJvdW5kZWQgPSBmdW5jdGlvbiAodW5ib3VuZGVkKSB7XG4gICAgICAgIHZhciBVTkJPVU5ERUQgPSBNRENSaXBwbGVGb3VuZGF0aW9uLmNzc0NsYXNzZXMuVU5CT1VOREVEO1xuICAgICAgICBpZiAodW5ib3VuZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoVU5CT1VOREVEKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhVTkJPVU5ERUQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzLkJHX0ZPQ1VTRUQpOyB9KTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5CR19GT0NVU0VEKTsgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXZSBjb21wdXRlIHRoaXMgcHJvcGVydHkgc28gdGhhdCB3ZSBhcmUgbm90IHF1ZXJ5aW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjbGllbnRcbiAgICAgKiB1bnRpbCB0aGUgcG9pbnQgaW4gdGltZSB3aGVyZSB0aGUgZm91bmRhdGlvbiByZXF1ZXN0cyBpdC4gVGhpcyBwcmV2ZW50cyBzY2VuYXJpb3Mgd2hlcmVcbiAgICAgKiBjbGllbnQtc2lkZSBmZWF0dXJlLWRldGVjdGlvbiBtYXkgaGFwcGVuIHRvbyBlYXJseSwgc3VjaCBhcyB3aGVuIGNvbXBvbmVudHMgYXJlIHJlbmRlcmVkIG9uIHRoZSBzZXJ2ZXJcbiAgICAgKiBhbmQgdGhlbiBpbml0aWFsaXplZCBhdCBtb3VudCB0aW1lIG9uIHRoZSBjbGllbnQuXG4gICAgICovXG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuc3VwcG9ydHNQcmVzc1JpcHBsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRhcHRlci5icm93c2VyU3VwcG9ydHNDc3NWYXJzKCk7XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5kZWZhdWx0QWN0aXZhdGlvblN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWN0aXZhdGlvbkV2ZW50OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBoYXNEZWFjdGl2YXRpb25VWFJ1bjogZmFsc2UsXG4gICAgICAgICAgICBpc0FjdGl2YXRlZDogZmFsc2UsXG4gICAgICAgICAgICBpc1Byb2dyYW1tYXRpYzogZmFsc2UsXG4gICAgICAgICAgICB3YXNBY3RpdmF0ZWRCeVBvaW50ZXI6IGZhbHNlLFxuICAgICAgICAgICAgd2FzRWxlbWVudE1hZGVBY3RpdmU6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogc3VwcG9ydHNQcmVzc1JpcHBsZSBQYXNzZWQgZnJvbSBpbml0IHRvIHNhdmUgYSByZWR1bmRhbnQgZnVuY3Rpb24gY2FsbFxuICAgICAqL1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLnJlZ2lzdGVyUm9vdEhhbmRsZXJzID0gZnVuY3Rpb24gKHN1cHBvcnRzUHJlc3NSaXBwbGUpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIGlmIChzdXBwb3J0c1ByZXNzUmlwcGxlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMSA9IF9fdmFsdWVzKEFDVElWQVRJT05fRVZFTlRfVFlQRVMpLCBBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzFfMSA9IEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMS5uZXh0KCk7ICFBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzFfMS5kb25lOyBBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzFfMSA9IEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2dFR5cGUgPSBBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKGV2dFR5cGUsIHRoaXMuYWN0aXZhdGVIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMV8xICYmICFBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzFfMS5kb25lICYmIChfYSA9IEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMS5yZXR1cm4pKSBfYS5jYWxsKEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNVbmJvdW5kZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZWdpc3RlclJlc2l6ZUhhbmRsZXIodGhpcy5yZXNpemVIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2ZvY3VzJywgdGhpcy5mb2N1c0hhbmRsZXIpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2JsdXInLCB0aGlzLmJsdXJIYW5kbGVyKTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLnJlZ2lzdGVyRGVhY3RpdmF0aW9uSGFuZGxlcnMgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciBlXzIsIF9hO1xuICAgICAgICBpZiAoZXZ0LnR5cGUgPT09ICdrZXlkb3duJykge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdrZXl1cCcsIHRoaXMuZGVhY3RpdmF0ZUhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xID0gX192YWx1ZXMoUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVMpLCBQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xXzEgPSBQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xLm5leHQoKTsgIVBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzFfMS5kb25lOyBQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xXzEgPSBQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZ0VHlwZSA9IFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlZ2lzdGVyRG9jdW1lbnRJbnRlcmFjdGlvbkhhbmRsZXIoZXZ0VHlwZSwgdGhpcy5kZWFjdGl2YXRlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xXzEgJiYgIVBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzFfMS5kb25lICYmIChfYSA9IFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzEucmV0dXJuKSkgX2EuY2FsbChQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5kZXJlZ2lzdGVyUm9vdEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8zLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMiA9IF9fdmFsdWVzKEFDVElWQVRJT05fRVZFTlRfVFlQRVMpLCBBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzJfMSA9IEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMi5uZXh0KCk7ICFBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzJfMS5kb25lOyBBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzJfMSA9IEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZ0VHlwZSA9IEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMl8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKGV2dFR5cGUsIHRoaXMuYWN0aXZhdGVIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8zXzEpIHsgZV8zID0geyBlcnJvcjogZV8zXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMl8xICYmICFBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzJfMS5kb25lICYmIChfYSA9IEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMi5yZXR1cm4pKSBfYS5jYWxsKEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMykgdGhyb3cgZV8zLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGFwdGVyLmRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2ZvY3VzJywgdGhpcy5mb2N1c0hhbmRsZXIpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcignYmx1cicsIHRoaXMuYmx1ckhhbmRsZXIpO1xuICAgICAgICBpZiAodGhpcy5hZGFwdGVyLmlzVW5ib3VuZGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVyUmVzaXplSGFuZGxlcih0aGlzLnJlc2l6ZUhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5kZXJlZ2lzdGVyRGVhY3RpdmF0aW9uSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzQsIF9hO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcigna2V5dXAnLCB0aGlzLmRlYWN0aXZhdGVIYW5kbGVyKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzIgPSBfX3ZhbHVlcyhQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFUyksIFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzJfMSA9IFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzIubmV4dCgpOyAhUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMl8xLmRvbmU7IFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzJfMSA9IFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzIubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2dFR5cGUgPSBQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18yXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmRlcmVnaXN0ZXJEb2N1bWVudEludGVyYWN0aW9uSGFuZGxlcihldnRUeXBlLCB0aGlzLmRlYWN0aXZhdGVIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV80XzEpIHsgZV80ID0geyBlcnJvcjogZV80XzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzJfMSAmJiAhUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMl8xLmRvbmUgJiYgKF9hID0gUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMi5yZXR1cm4pKSBfYS5jYWxsKFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzQpIHRocm93IGVfNC5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5yZW1vdmVDc3NWYXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmlwcGxlU3RyaW5ncyA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uc3RyaW5ncztcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhyaXBwbGVTdHJpbmdzKTtcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignVkFSXycpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlci51cGRhdGVDc3NWYXJpYWJsZShyaXBwbGVTdHJpbmdzW2tleV0sIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmFjdGl2YXRlSW1wbCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuYWRhcHRlci5pc1N1cmZhY2VEaXNhYmxlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFjdGl2YXRpb25TdGF0ZSA9IHRoaXMuYWN0aXZhdGlvblN0YXRlO1xuICAgICAgICBpZiAoYWN0aXZhdGlvblN0YXRlLmlzQWN0aXZhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXZvaWQgcmVhY3RpbmcgdG8gZm9sbG93LW9uIGV2ZW50cyBmaXJlZCBieSB0b3VjaCBkZXZpY2UgYWZ0ZXIgYW4gYWxyZWFkeS1wcm9jZXNzZWQgdXNlciBpbnRlcmFjdGlvblxuICAgICAgICB2YXIgcHJldmlvdXNBY3RpdmF0aW9uRXZlbnQgPSB0aGlzLnByZXZpb3VzQWN0aXZhdGlvbkV2ZW50O1xuICAgICAgICB2YXIgaXNTYW1lSW50ZXJhY3Rpb24gPSBwcmV2aW91c0FjdGl2YXRpb25FdmVudCAmJiBldnQgIT09IHVuZGVmaW5lZCAmJiBwcmV2aW91c0FjdGl2YXRpb25FdmVudC50eXBlICE9PSBldnQudHlwZTtcbiAgICAgICAgaWYgKGlzU2FtZUludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYWN0aXZhdGlvblN0YXRlLmlzQWN0aXZhdGVkID0gdHJ1ZTtcbiAgICAgICAgYWN0aXZhdGlvblN0YXRlLmlzUHJvZ3JhbW1hdGljID0gZXZ0ID09PSB1bmRlZmluZWQ7XG4gICAgICAgIGFjdGl2YXRpb25TdGF0ZS5hY3RpdmF0aW9uRXZlbnQgPSBldnQ7XG4gICAgICAgIGFjdGl2YXRpb25TdGF0ZS53YXNBY3RpdmF0ZWRCeVBvaW50ZXIgPSBhY3RpdmF0aW9uU3RhdGUuaXNQcm9ncmFtbWF0aWMgPyBmYWxzZSA6IGV2dCAhPT0gdW5kZWZpbmVkICYmIChldnQudHlwZSA9PT0gJ21vdXNlZG93bicgfHwgZXZ0LnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBldnQudHlwZSA9PT0gJ3BvaW50ZXJkb3duJyk7XG4gICAgICAgIHZhciBoYXNBY3RpdmF0ZWRDaGlsZCA9IGV2dCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBhY3RpdmF0ZWRUYXJnZXRzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgIGFjdGl2YXRlZFRhcmdldHMuc29tZShmdW5jdGlvbiAodGFyZ2V0KSB7IHJldHVybiBfdGhpcy5hZGFwdGVyLmNvbnRhaW5zRXZlbnRUYXJnZXQodGFyZ2V0KTsgfSk7XG4gICAgICAgIGlmIChoYXNBY3RpdmF0ZWRDaGlsZCkge1xuICAgICAgICAgICAgLy8gSW1tZWRpYXRlbHkgcmVzZXQgYWN0aXZhdGlvbiBzdGF0ZSwgd2hpbGUgcHJlc2VydmluZyBsb2dpYyB0aGF0IHByZXZlbnRzIHRvdWNoIGZvbGxvdy1vbiBldmVudHNcbiAgICAgICAgICAgIHRoaXMucmVzZXRBY3RpdmF0aW9uU3RhdGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFjdGl2YXRlZFRhcmdldHMucHVzaChldnQudGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVycyhldnQpO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2YXRpb25TdGF0ZS53YXNFbGVtZW50TWFkZUFjdGl2ZSA9IHRoaXMuY2hlY2tFbGVtZW50TWFkZUFjdGl2ZShldnQpO1xuICAgICAgICBpZiAoYWN0aXZhdGlvblN0YXRlLndhc0VsZW1lbnRNYWRlQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGVBY3RpdmF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFJlc2V0IGFycmF5IG9uIG5leHQgZnJhbWUgYWZ0ZXIgdGhlIGN1cnJlbnQgZXZlbnQgaGFzIGhhZCBhIGNoYW5jZSB0byBidWJibGUgdG8gcHJldmVudCBhbmNlc3RvciByaXBwbGVzXG4gICAgICAgICAgICBhY3RpdmF0ZWRUYXJnZXRzID0gW107XG4gICAgICAgICAgICBpZiAoIWFjdGl2YXRpb25TdGF0ZS53YXNFbGVtZW50TWFkZUFjdGl2ZVxuICAgICAgICAgICAgICAgICYmIGV2dCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgJiYgKGV2dC5rZXkgPT09ICcgJyB8fCBldnQua2V5Q29kZSA9PT0gMzIpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgc3BhY2Ugd2FzIHByZXNzZWQsIHRyeSBhZ2FpbiB3aXRoaW4gYW4gckFGIGNhbGwgdG8gZGV0ZWN0IDphY3RpdmUsIGJlY2F1c2UgZGlmZmVyZW50IFVBcyByZXBvcnRcbiAgICAgICAgICAgICAgICAvLyBhY3RpdmUgc3RhdGVzIGluY29uc2lzdGVudGx5IHdoZW4gdGhleSdyZSBjYWxsZWQgd2l0aGluIGV2ZW50IGhhbmRsaW5nIGNvZGU6XG4gICAgICAgICAgICAgICAgLy8gLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD02MzU5NzFcbiAgICAgICAgICAgICAgICAvLyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEyOTM3NDFcbiAgICAgICAgICAgICAgICAvLyBXZSB0cnkgZmlyc3Qgb3V0c2lkZSByQUYgdG8gc3VwcG9ydCBFZGdlLCB3aGljaCBkb2VzIG5vdCBleGhpYml0IHRoaXMgcHJvYmxlbSwgYnV0IHdpbGwgY3Jhc2ggaWYgYSBDU1NcbiAgICAgICAgICAgICAgICAvLyB2YXJpYWJsZSBpcyBzZXQgd2l0aGluIGEgckFGIGNhbGxiYWNrIGZvciBhIHN1Ym1pdCBidXR0b24gaW50ZXJhY3Rpb24gKCMyMjQxKS5cbiAgICAgICAgICAgICAgICBhY3RpdmF0aW9uU3RhdGUud2FzRWxlbWVudE1hZGVBY3RpdmUgPSBfdGhpcy5jaGVja0VsZW1lbnRNYWRlQWN0aXZlKGV2dCk7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2YXRpb25TdGF0ZS53YXNFbGVtZW50TWFkZUFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5hbmltYXRlQWN0aXZhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYWN0aXZhdGlvblN0YXRlLndhc0VsZW1lbnRNYWRlQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgYWN0aXZhdGlvbiBzdGF0ZSBpbW1lZGlhdGVseSBpZiBlbGVtZW50IHdhcyBub3QgbWFkZSBhY3RpdmUuXG4gICAgICAgICAgICAgICAgX3RoaXMuYWN0aXZhdGlvblN0YXRlID0gX3RoaXMuZGVmYXVsdEFjdGl2YXRpb25TdGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmNoZWNrRWxlbWVudE1hZGVBY3RpdmUgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHJldHVybiAoZXZ0ICE9PSB1bmRlZmluZWQgJiYgZXZ0LnR5cGUgPT09ICdrZXlkb3duJykgP1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmlzU3VyZmFjZUFjdGl2ZSgpIDpcbiAgICAgICAgICAgIHRydWU7XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5hbmltYXRlQWN0aXZhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gTURDUmlwcGxlRm91bmRhdGlvbi5zdHJpbmdzLCBWQVJfRkdfVFJBTlNMQVRFX1NUQVJUID0gX2EuVkFSX0ZHX1RSQU5TTEFURV9TVEFSVCwgVkFSX0ZHX1RSQU5TTEFURV9FTkQgPSBfYS5WQVJfRkdfVFJBTlNMQVRFX0VORDtcbiAgICAgICAgdmFyIF9iID0gTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzLCBGR19ERUFDVElWQVRJT04gPSBfYi5GR19ERUFDVElWQVRJT04sIEZHX0FDVElWQVRJT04gPSBfYi5GR19BQ1RJVkFUSU9OO1xuICAgICAgICB2YXIgREVBQ1RJVkFUSU9OX1RJTUVPVVRfTVMgPSBNRENSaXBwbGVGb3VuZGF0aW9uLm51bWJlcnMuREVBQ1RJVkFUSU9OX1RJTUVPVVRfTVM7XG4gICAgICAgIHRoaXMubGF5b3V0SW50ZXJuYWwoKTtcbiAgICAgICAgdmFyIHRyYW5zbGF0ZVN0YXJ0ID0gJyc7XG4gICAgICAgIHZhciB0cmFuc2xhdGVFbmQgPSAnJztcbiAgICAgICAgaWYgKCF0aGlzLmFkYXB0ZXIuaXNVbmJvdW5kZWQoKSkge1xuICAgICAgICAgICAgdmFyIF9jID0gdGhpcy5nZXRGZ1RyYW5zbGF0aW9uQ29vcmRpbmF0ZXMoKSwgc3RhcnRQb2ludCA9IF9jLnN0YXJ0UG9pbnQsIGVuZFBvaW50ID0gX2MuZW5kUG9pbnQ7XG4gICAgICAgICAgICB0cmFuc2xhdGVTdGFydCA9IHN0YXJ0UG9pbnQueCArIFwicHgsIFwiICsgc3RhcnRQb2ludC55ICsgXCJweFwiO1xuICAgICAgICAgICAgdHJhbnNsYXRlRW5kID0gZW5kUG9pbnQueCArIFwicHgsIFwiICsgZW5kUG9pbnQueSArIFwicHhcIjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkYXB0ZXIudXBkYXRlQ3NzVmFyaWFibGUoVkFSX0ZHX1RSQU5TTEFURV9TVEFSVCwgdHJhbnNsYXRlU3RhcnQpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIudXBkYXRlQ3NzVmFyaWFibGUoVkFSX0ZHX1RSQU5TTEFURV9FTkQsIHRyYW5zbGF0ZUVuZCk7XG4gICAgICAgIC8vIENhbmNlbCBhbnkgb25nb2luZyBhY3RpdmF0aW9uL2RlYWN0aXZhdGlvbiBhbmltYXRpb25zXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmFjdGl2YXRpb25UaW1lcik7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZnRGVhY3RpdmF0aW9uUmVtb3ZhbFRpbWVyKTtcbiAgICAgICAgdGhpcy5ybUJvdW5kZWRBY3RpdmF0aW9uQ2xhc3NlcygpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoRkdfREVBQ1RJVkFUSU9OKTtcbiAgICAgICAgLy8gRm9yY2UgbGF5b3V0IGluIG9yZGVyIHRvIHJlLXRyaWdnZXIgdGhlIGFuaW1hdGlvbi5cbiAgICAgICAgdGhpcy5hZGFwdGVyLmNvbXB1dGVCb3VuZGluZ1JlY3QoKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKEZHX0FDVElWQVRJT04pO1xuICAgICAgICB0aGlzLmFjdGl2YXRpb25UaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuYWN0aXZhdGlvblRpbWVyQ2FsbGJhY2soKTtcbiAgICAgICAgfSwgREVBQ1RJVkFUSU9OX1RJTUVPVVRfTVMpO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0RmdUcmFuc2xhdGlvbkNvb3JkaW5hdGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmFjdGl2YXRpb25TdGF0ZSwgYWN0aXZhdGlvbkV2ZW50ID0gX2EuYWN0aXZhdGlvbkV2ZW50LCB3YXNBY3RpdmF0ZWRCeVBvaW50ZXIgPSBfYS53YXNBY3RpdmF0ZWRCeVBvaW50ZXI7XG4gICAgICAgIHZhciBzdGFydFBvaW50O1xuICAgICAgICBpZiAod2FzQWN0aXZhdGVkQnlQb2ludGVyKSB7XG4gICAgICAgICAgICBzdGFydFBvaW50ID0gZ2V0Tm9ybWFsaXplZEV2ZW50Q29vcmRzKGFjdGl2YXRpb25FdmVudCwgdGhpcy5hZGFwdGVyLmdldFdpbmRvd1BhZ2VPZmZzZXQoKSwgdGhpcy5hZGFwdGVyLmNvbXB1dGVCb3VuZGluZ1JlY3QoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGFydFBvaW50ID0ge1xuICAgICAgICAgICAgICAgIHg6IHRoaXMuZnJhbWUud2lkdGggLyAyLFxuICAgICAgICAgICAgICAgIHk6IHRoaXMuZnJhbWUuaGVpZ2h0IC8gMixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2VudGVyIHRoZSBlbGVtZW50IGFyb3VuZCB0aGUgc3RhcnQgcG9pbnQuXG4gICAgICAgIHN0YXJ0UG9pbnQgPSB7XG4gICAgICAgICAgICB4OiBzdGFydFBvaW50LnggLSAodGhpcy5pbml0aWFsU2l6ZSAvIDIpLFxuICAgICAgICAgICAgeTogc3RhcnRQb2ludC55IC0gKHRoaXMuaW5pdGlhbFNpemUgLyAyKSxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGVuZFBvaW50ID0ge1xuICAgICAgICAgICAgeDogKHRoaXMuZnJhbWUud2lkdGggLyAyKSAtICh0aGlzLmluaXRpYWxTaXplIC8gMiksXG4gICAgICAgICAgICB5OiAodGhpcy5mcmFtZS5oZWlnaHQgLyAyKSAtICh0aGlzLmluaXRpYWxTaXplIC8gMiksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7IHN0YXJ0UG9pbnQ6IHN0YXJ0UG9pbnQsIGVuZFBvaW50OiBlbmRQb2ludCB9O1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUucnVuRGVhY3RpdmF0aW9uVVhMb2dpY0lmUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBib3RoIHdoZW4gYSBwb2ludGluZyBkZXZpY2UgaXMgcmVsZWFzZWQsIGFuZCB3aGVuIHRoZSBhY3RpdmF0aW9uIGFuaW1hdGlvbiBlbmRzLlxuICAgICAgICAvLyBUaGUgZGVhY3RpdmF0aW9uIGFuaW1hdGlvbiBzaG91bGQgb25seSBydW4gYWZ0ZXIgYm90aCBvZiB0aG9zZSBvY2N1ci5cbiAgICAgICAgdmFyIEZHX0RFQUNUSVZBVElPTiA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5GR19ERUFDVElWQVRJT047XG4gICAgICAgIHZhciBfYSA9IHRoaXMuYWN0aXZhdGlvblN0YXRlLCBoYXNEZWFjdGl2YXRpb25VWFJ1biA9IF9hLmhhc0RlYWN0aXZhdGlvblVYUnVuLCBpc0FjdGl2YXRlZCA9IF9hLmlzQWN0aXZhdGVkO1xuICAgICAgICB2YXIgYWN0aXZhdGlvbkhhc0VuZGVkID0gaGFzRGVhY3RpdmF0aW9uVVhSdW4gfHwgIWlzQWN0aXZhdGVkO1xuICAgICAgICBpZiAoYWN0aXZhdGlvbkhhc0VuZGVkICYmIHRoaXMuYWN0aXZhdGlvbkFuaW1hdGlvbkhhc0VuZGVkKSB7XG4gICAgICAgICAgICB0aGlzLnJtQm91bmRlZEFjdGl2YXRpb25DbGFzc2VzKCk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoRkdfREVBQ1RJVkFUSU9OKTtcbiAgICAgICAgICAgIHRoaXMuZmdEZWFjdGl2YXRpb25SZW1vdmFsVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKEZHX0RFQUNUSVZBVElPTik7XG4gICAgICAgICAgICB9LCBudW1iZXJzLkZHX0RFQUNUSVZBVElPTl9NUyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLnJtQm91bmRlZEFjdGl2YXRpb25DbGFzc2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgRkdfQUNUSVZBVElPTiA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5GR19BQ1RJVkFUSU9OO1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoRkdfQUNUSVZBVElPTik7XG4gICAgICAgIHRoaXMuYWN0aXZhdGlvbkFuaW1hdGlvbkhhc0VuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWRhcHRlci5jb21wdXRlQm91bmRpbmdSZWN0KCk7XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5yZXNldEFjdGl2YXRpb25TdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5wcmV2aW91c0FjdGl2YXRpb25FdmVudCA9IHRoaXMuYWN0aXZhdGlvblN0YXRlLmFjdGl2YXRpb25FdmVudDtcbiAgICAgICAgdGhpcy5hY3RpdmF0aW9uU3RhdGUgPSB0aGlzLmRlZmF1bHRBY3RpdmF0aW9uU3RhdGUoKTtcbiAgICAgICAgLy8gVG91Y2ggZGV2aWNlcyBtYXkgZmlyZSBhZGRpdGlvbmFsIGV2ZW50cyBmb3IgdGhlIHNhbWUgaW50ZXJhY3Rpb24gd2l0aGluIGEgc2hvcnQgdGltZS5cbiAgICAgICAgLy8gU3RvcmUgdGhlIHByZXZpb3VzIGV2ZW50IHVudGlsIGl0J3Mgc2FmZSB0byBhc3N1bWUgdGhhdCBzdWJzZXF1ZW50IGV2ZW50cyBhcmUgZm9yIG5ldyBpbnRlcmFjdGlvbnMuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucHJldmlvdXNBY3RpdmF0aW9uRXZlbnQgPSB1bmRlZmluZWQ7IH0sIE1EQ1JpcHBsZUZvdW5kYXRpb24ubnVtYmVycy5UQVBfREVMQVlfTVMpO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuZGVhY3RpdmF0ZUltcGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhY3RpdmF0aW9uU3RhdGUgPSB0aGlzLmFjdGl2YXRpb25TdGF0ZTtcbiAgICAgICAgLy8gVGhpcyBjYW4gaGFwcGVuIGluIHNjZW5hcmlvcyBzdWNoIGFzIHdoZW4geW91IGhhdmUgYSBrZXl1cCBldmVudCB0aGF0IGJsdXJzIHRoZSBlbGVtZW50LlxuICAgICAgICBpZiAoIWFjdGl2YXRpb25TdGF0ZS5pc0FjdGl2YXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGF0ZSA9IF9fYXNzaWduKHt9LCBhY3RpdmF0aW9uU3RhdGUpO1xuICAgICAgICBpZiAoYWN0aXZhdGlvblN0YXRlLmlzUHJvZ3JhbW1hdGljKSB7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGVEZWFjdGl2YXRpb24oc3RhdGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0QWN0aXZhdGlvblN0YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlcmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVycygpO1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hY3RpdmF0aW9uU3RhdGUuaGFzRGVhY3RpdmF0aW9uVVhSdW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGVEZWFjdGl2YXRpb24oc3RhdGUpO1xuICAgICAgICAgICAgICAgIF90aGlzLnJlc2V0QWN0aXZhdGlvblN0YXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuYW5pbWF0ZURlYWN0aXZhdGlvbiA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgd2FzQWN0aXZhdGVkQnlQb2ludGVyID0gX2Eud2FzQWN0aXZhdGVkQnlQb2ludGVyLCB3YXNFbGVtZW50TWFkZUFjdGl2ZSA9IF9hLndhc0VsZW1lbnRNYWRlQWN0aXZlO1xuICAgICAgICBpZiAod2FzQWN0aXZhdGVkQnlQb2ludGVyIHx8IHdhc0VsZW1lbnRNYWRlQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnJ1bkRlYWN0aXZhdGlvblVYTG9naWNJZlJlYWR5KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmxheW91dEludGVybmFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmZyYW1lID0gdGhpcy5hZGFwdGVyLmNvbXB1dGVCb3VuZGluZ1JlY3QoKTtcbiAgICAgICAgdmFyIG1heERpbSA9IE1hdGgubWF4KHRoaXMuZnJhbWUuaGVpZ2h0LCB0aGlzLmZyYW1lLndpZHRoKTtcbiAgICAgICAgLy8gU3VyZmFjZSBkaWFtZXRlciBpcyB0cmVhdGVkIGRpZmZlcmVudGx5IGZvciB1bmJvdW5kZWQgdnMuIGJvdW5kZWQgcmlwcGxlcy5cbiAgICAgICAgLy8gVW5ib3VuZGVkIHJpcHBsZSBkaWFtZXRlciBpcyBjYWxjdWxhdGVkIHNtYWxsZXIgc2luY2UgdGhlIHN1cmZhY2UgaXMgZXhwZWN0ZWQgdG8gYWxyZWFkeSBiZSBwYWRkZWQgYXBwcm9wcmlhdGVseVxuICAgICAgICAvLyB0byBleHRlbmQgdGhlIGhpdGJveCwgYW5kIHRoZSByaXBwbGUgaXMgZXhwZWN0ZWQgdG8gbWVldCB0aGUgZWRnZXMgb2YgdGhlIHBhZGRlZCBoaXRib3ggKHdoaWNoIGlzIHR5cGljYWxseVxuICAgICAgICAvLyBzcXVhcmUpLiBCb3VuZGVkIHJpcHBsZXMsIG9uIHRoZSBvdGhlciBoYW5kLCBhcmUgZnVsbHkgZXhwZWN0ZWQgdG8gZXhwYW5kIGJleW9uZCB0aGUgc3VyZmFjZSdzIGxvbmdlc3QgZGlhbWV0ZXJcbiAgICAgICAgLy8gKGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIGRpYWdvbmFsIHBsdXMgYSBjb25zdGFudCBwYWRkaW5nKSwgYW5kIGFyZSBjbGlwcGVkIGF0IHRoZSBzdXJmYWNlJ3MgYm9yZGVyIHZpYVxuICAgICAgICAvLyBgb3ZlcmZsb3c6IGhpZGRlbmAuXG4gICAgICAgIHZhciBnZXRCb3VuZGVkUmFkaXVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGh5cG90ZW51c2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coX3RoaXMuZnJhbWUud2lkdGgsIDIpICsgTWF0aC5wb3coX3RoaXMuZnJhbWUuaGVpZ2h0LCAyKSk7XG4gICAgICAgICAgICByZXR1cm4gaHlwb3RlbnVzZSArIE1EQ1JpcHBsZUZvdW5kYXRpb24ubnVtYmVycy5QQURESU5HO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm1heFJhZGl1cyA9IHRoaXMuYWRhcHRlci5pc1VuYm91bmRlZCgpID8gbWF4RGltIDogZ2V0Qm91bmRlZFJhZGl1cygpO1xuICAgICAgICAvLyBSaXBwbGUgaXMgc2l6ZWQgYXMgYSBmcmFjdGlvbiBvZiB0aGUgbGFyZ2VzdCBkaW1lbnNpb24gb2YgdGhlIHN1cmZhY2UsIHRoZW4gc2NhbGVzIHVwIHVzaW5nIGEgQ1NTIHNjYWxlIHRyYW5zZm9ybVxuICAgICAgICB2YXIgaW5pdGlhbFNpemUgPSBNYXRoLmZsb29yKG1heERpbSAqIE1EQ1JpcHBsZUZvdW5kYXRpb24ubnVtYmVycy5JTklUSUFMX09SSUdJTl9TQ0FMRSk7XG4gICAgICAgIC8vIFVuYm91bmRlZCByaXBwbGUgc2l6ZSBzaG91bGQgYWx3YXlzIGJlIGV2ZW4gbnVtYmVyIHRvIGVxdWFsbHkgY2VudGVyIGFsaWduLlxuICAgICAgICBpZiAodGhpcy5hZGFwdGVyLmlzVW5ib3VuZGVkKCkgJiYgaW5pdGlhbFNpemUgJSAyICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxTaXplID0gaW5pdGlhbFNpemUgLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsU2l6ZSA9IGluaXRpYWxTaXplO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmdTY2FsZSA9IFwiXCIgKyB0aGlzLm1heFJhZGl1cyAvIHRoaXMuaW5pdGlhbFNpemU7XG4gICAgICAgIHRoaXMudXBkYXRlTGF5b3V0Q3NzVmFycygpO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUudXBkYXRlTGF5b3V0Q3NzVmFycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gTURDUmlwcGxlRm91bmRhdGlvbi5zdHJpbmdzLCBWQVJfRkdfU0laRSA9IF9hLlZBUl9GR19TSVpFLCBWQVJfTEVGVCA9IF9hLlZBUl9MRUZULCBWQVJfVE9QID0gX2EuVkFSX1RPUCwgVkFSX0ZHX1NDQUxFID0gX2EuVkFSX0ZHX1NDQUxFO1xuICAgICAgICB0aGlzLmFkYXB0ZXIudXBkYXRlQ3NzVmFyaWFibGUoVkFSX0ZHX1NJWkUsIHRoaXMuaW5pdGlhbFNpemUgKyBcInB4XCIpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIudXBkYXRlQ3NzVmFyaWFibGUoVkFSX0ZHX1NDQUxFLCB0aGlzLmZnU2NhbGUpO1xuICAgICAgICBpZiAodGhpcy5hZGFwdGVyLmlzVW5ib3VuZGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMudW5ib3VuZGVkQ29vcmRzID0ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQoKHRoaXMuZnJhbWUud2lkdGggLyAyKSAtICh0aGlzLmluaXRpYWxTaXplIC8gMikpLFxuICAgICAgICAgICAgICAgIHRvcDogTWF0aC5yb3VuZCgodGhpcy5mcmFtZS5oZWlnaHQgLyAyKSAtICh0aGlzLmluaXRpYWxTaXplIC8gMikpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci51cGRhdGVDc3NWYXJpYWJsZShWQVJfTEVGVCwgdGhpcy51bmJvdW5kZWRDb29yZHMubGVmdCArIFwicHhcIik7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIudXBkYXRlQ3NzVmFyaWFibGUoVkFSX1RPUCwgdGhpcy51bmJvdW5kZWRDb29yZHMudG9wICsgXCJweFwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ1JpcHBsZUZvdW5kYXRpb247XG59KE1EQ0ZvdW5kYXRpb24pKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgTURDUmlwcGxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENSaXBwbGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDUmlwcGxlKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNRENSaXBwbGUuYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCwgb3B0cykge1xuICAgICAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7IG9wdHMgPSB7XG4gICAgICAgICAgICBpc1VuYm91bmRlZDogdW5kZWZpbmVkXG4gICAgICAgIH07IH1cbiAgICAgICAgdmFyIHJpcHBsZSA9IG5ldyBNRENSaXBwbGUocm9vdCk7XG4gICAgICAgIC8vIE9ubHkgb3ZlcnJpZGUgdW5ib3VuZGVkIGJlaGF2aW9yIGlmIG9wdGlvbiBpcyBleHBsaWNpdGx5IHNwZWNpZmllZFxuICAgICAgICBpZiAob3B0cy5pc1VuYm91bmRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByaXBwbGUudW5ib3VuZGVkID0gb3B0cy5pc1VuYm91bmRlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmlwcGxlO1xuICAgIH07XG4gICAgTURDUmlwcGxlLmNyZWF0ZUFkYXB0ZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBpbnN0YW5jZS5yb290LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIGJyb3dzZXJTdXBwb3J0c0Nzc1ZhcnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1cHBvcnRzQ3NzVmFyaWFibGVzKHdpbmRvdyk7IH0sXG4gICAgICAgICAgICBjb21wdXRlQm91bmRpbmdSZWN0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnN0YW5jZS5yb290LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyB9LFxuICAgICAgICAgICAgY29udGFpbnNFdmVudFRhcmdldDogZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gaW5zdGFuY2Uucm9vdC5jb250YWlucyh0YXJnZXQpOyB9LFxuICAgICAgICAgICAgZGVyZWdpc3RlckRvY3VtZW50SW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoZXZ0VHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyLCBhcHBseVBhc3NpdmUoKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2Uucm9vdFxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyLCBhcHBseVBhc3NpdmUoKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVyZWdpc3RlclJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRXaW5kb3dQYWdlT2Zmc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh7IHg6IHdpbmRvdy5wYWdlWE9mZnNldCwgeTogd2luZG93LnBhZ2VZT2Zmc2V0IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzU3VyZmFjZUFjdGl2ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWF0Y2hlcyhpbnN0YW5jZS5yb290LCAnOmFjdGl2ZScpOyB9LFxuICAgICAgICAgICAgaXNTdXJmYWNlRGlzYWJsZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJvb2xlYW4oaW5zdGFuY2UuZGlzYWJsZWQpOyB9LFxuICAgICAgICAgICAgaXNVbmJvdW5kZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJvb2xlYW4oaW5zdGFuY2UudW5ib3VuZGVkKTsgfSxcbiAgICAgICAgICAgIHJlZ2lzdGVyRG9jdW1lbnRJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2dFR5cGUsIGhhbmRsZXIsIGFwcGx5UGFzc2l2ZSgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2Uucm9vdFxuICAgICAgICAgICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyLCBhcHBseVBhc3NpdmUoKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVnaXN0ZXJSZXNpemVIYW5kbGVyOiBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIGluc3RhbmNlLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgdXBkYXRlQ3NzVmFyaWFibGU6IGZ1bmN0aW9uICh2YXJOYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZS5yb290LnN0eWxlLnNldFByb3BlcnR5KHZhck5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDUmlwcGxlLnByb3RvdHlwZSwgXCJ1bmJvdW5kZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuaXNVbmJvdW5kZWQpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh1bmJvdW5kZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNVbmJvdW5kZWQgPSBCb29sZWFuKHVuYm91bmRlZCk7XG4gICAgICAgICAgICB0aGlzLnNldFVuYm91bmRlZCgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDUmlwcGxlLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmFjdGl2YXRlKCk7XG4gICAgfTtcbiAgICBNRENSaXBwbGUucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5kZWFjdGl2YXRlKCk7XG4gICAgfTtcbiAgICBNRENSaXBwbGUucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmxheW91dCgpO1xuICAgIH07XG4gICAgTURDUmlwcGxlLnByb3RvdHlwZS5nZXREZWZhdWx0Rm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENSaXBwbGVGb3VuZGF0aW9uKE1EQ1JpcHBsZS5jcmVhdGVBZGFwdGVyKHRoaXMpKTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZS5wcm90b3R5cGUuaW5pdGlhbFN5bmNXaXRoRE9NID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdDtcbiAgICAgICAgdGhpcy5pc1VuYm91bmRlZCA9ICdtZGNSaXBwbGVJc1VuYm91bmRlZCcgaW4gcm9vdC5kYXRhc2V0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xvc3VyZSBDb21waWxlciB0aHJvd3MgYW4gYWNjZXNzIGNvbnRyb2wgZXJyb3Igd2hlbiBkaXJlY3RseSBhY2Nlc3NpbmcgYVxuICAgICAqIHByb3RlY3RlZCBvciBwcml2YXRlIHByb3BlcnR5IGluc2lkZSBhIGdldHRlci9zZXR0ZXIsIGxpa2UgdW5ib3VuZGVkIGFib3ZlLlxuICAgICAqIEJ5IGFjY2Vzc2luZyB0aGUgcHJvdGVjdGVkIHByb3BlcnR5IGluc2lkZSBhIG1ldGhvZCwgd2Ugc29sdmUgdGhhdCBwcm9ibGVtLlxuICAgICAqIFRoYXQncyB3aHkgdGhpcyBmdW5jdGlvbiBleGlzdHMuXG4gICAgICovXG4gICAgTURDUmlwcGxlLnByb3RvdHlwZS5zZXRVbmJvdW5kZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRVbmJvdW5kZWQoQm9vbGVhbih0aGlzLmlzVW5ib3VuZGVkKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTURDUmlwcGxlO1xufShNRENDb21wb25lbnQpKTtcblxuZXhwb3J0IHsgTURDUmlwcGxlIGFzIE0sIGFwcGx5UGFzc2l2ZSBhcyBhLCBNRENSaXBwbGVGb3VuZGF0aW9uIGFzIGIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../elements/dist/esm/component-780a5882.js\n"));

/***/ }),

/***/ "../elements/dist/esm/component-97c8fef9.js":
/*!**************************************************!*\
  !*** ../elements/dist/esm/component-97c8fef9.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"M\": function() { return /* binding */ MDCFoundation; },\n/* harmony export */   \"_\": function() { return /* binding */ __extends; },\n/* harmony export */   \"a\": function() { return /* binding */ __assign; },\n/* harmony export */   \"b\": function() { return /* binding */ __values; },\n/* harmony export */   \"c\": function() { return /* binding */ MDCComponent; },\n/* harmony export */   \"d\": function() { return /* binding */ __spreadArray; },\n/* harmony export */   \"e\": function() { return /* binding */ __read; }\n/* harmony export */ });\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCFoundation = /** @class */ (function () {\n    function MDCFoundation(adapter) {\n        if (adapter === void 0) { adapter = {}; }\n        this.adapter = adapter;\n    }\n    Object.defineProperty(MDCFoundation, \"cssClasses\", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports every\n            // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"strings\", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports all\n            // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"numbers\", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports all\n            // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"defaultAdapter\", {\n        get: function () {\n            // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n            // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n            // validation.\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCFoundation.prototype.init = function () {\n        // Subclasses should override this method to perform initialization routines (registering events, etc.)\n    };\n    MDCFoundation.prototype.destroy = function () {\n        // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n    };\n    return MDCFoundation;\n}());\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCComponent = /** @class */ (function () {\n    function MDCComponent(root, foundation) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        this.root = root;\n        this.initialize.apply(this, __spreadArray([], __read(args)));\n        // Note that we initialize foundation here and not within the constructor's\n        // default param so that this.root is defined and can be used within the\n        // foundation class.\n        this.foundation =\n            foundation === undefined ? this.getDefaultFoundation() : foundation;\n        this.foundation.init();\n        this.initialSyncWithDOM();\n    }\n    MDCComponent.attachTo = function (root) {\n        // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n        // returns an instantiated component with its root set to that element. Also note that in the cases of\n        // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n        // from getDefaultFoundation().\n        return new MDCComponent(root, new MDCFoundation({}));\n    };\n    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */\n    MDCComponent.prototype.initialize = function () {\n        var _args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            _args[_i] = arguments[_i];\n        }\n        // Subclasses can override this to do any additional setup work that would be considered part of a\n        // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n        // initialized. Any additional arguments besides root and foundation will be passed in here.\n    };\n    MDCComponent.prototype.getDefaultFoundation = function () {\n        // Subclasses must override this method to return a properly configured foundation class for the\n        // component.\n        throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +\n            'foundation class');\n    };\n    MDCComponent.prototype.initialSyncWithDOM = function () {\n        // Subclasses should override this method if they need to perform work to synchronize with a host DOM\n        // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n        // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n        // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n    };\n    MDCComponent.prototype.destroy = function () {\n        // Subclasses may implement this method to release any resources / deregister any listeners they have\n        // attached. An example of this might be deregistering a resize event from the window object.\n        this.foundation.destroy();\n    };\n    MDCComponent.prototype.listen = function (evtType, handler, options) {\n        this.root.addEventListener(evtType, handler, options);\n    };\n    MDCComponent.prototype.unlisten = function (evtType, handler, options) {\n        this.root.removeEventListener(evtType, handler, options);\n    };\n    /**\n     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.\n     */\n    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {\n        if (shouldBubble === void 0) { shouldBubble = false; }\n        var evt;\n        if (typeof CustomEvent === 'function') {\n            evt = new CustomEvent(evtType, {\n                bubbles: shouldBubble,\n                detail: evtData,\n            });\n        }\n        else {\n            evt = document.createEvent('CustomEvent');\n            evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n        }\n        this.root.dispatchEvent(evt);\n    };\n    return MDCComponent;\n}());\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../elements/dist/esm/component-97c8fef9.js\n"));

/***/ }),

/***/ "../elements/dist/esm/component-utils-1c4ae7be.js":
/*!********************************************************!*\
  !*** ../elements/dist/esm/component-utils-1c4ae7be.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"a\": function() { return /* binding */ generateUniqueId; },\n/* harmony export */   \"f\": function() { return /* binding */ focusIfExists; },\n/* harmony export */   \"g\": function() { return /* binding */ getSlotContent; },\n/* harmony export */   \"h\": function() { return /* binding */ hasSlotContent; },\n/* harmony export */   \"m\": function() { return /* binding */ moveCursorToEnd; },\n/* harmony export */   \"p\": function() { return /* binding */ preventEvent; }\n/* harmony export */ });\n/*!\n * Crafted with ❤ by inovex GmbH\n */\nfunction generateUniqueId() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\nfunction getSlotContent(el, slotName) {\n  return el.querySelector(`[slot=\"${slotName}\"]`);\n}\n/**\n * Checks if the given element has at least one child node at the given slot\n * @param el The element which has a (named) slot inside\n * @param slotName The name of the slot to check. If not provided default slot is used.\n * @return `true` if a child at the slot exists, otherwise `false`\n */\nfunction hasSlotContent(el, slotName) {\n  var _a;\n  return slotName\n    ? el.querySelectorAll(`[slot=\"${slotName}\"]`).length > 0\n    : ((_a = el.querySelector('slot')) === null || _a === void 0 ? void 0 : _a.assignedElements().length) === 0;\n}\n/**\n * Focuses the first element that has the `data-ino-focus` attribute.\n *\n * @param el The host element to search in\n */\nfunction focusIfExists(el) {\n  var _a;\n  (_a = el.querySelector('[data-ino-focus]')) === null || _a === void 0 ? void 0 : _a.focus();\n}\nfunction moveCursorToEnd(el) {\n  const len = el.value.length;\n  if (el.setSelectionRange) {\n    el.focus();\n    el.setSelectionRange(len, len);\n  }\n}\nfunction preventEvent(event) {\n  event.stopPropagation();\n  event.preventDefault();\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vY29tcG9uZW50LXV0aWxzLTFjNGFlN2JlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLFNBQVM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsU0FBUztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFd0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL2VsZW1lbnRzL2Rpc3QvZXNtL2NvbXBvbmVudC11dGlscy0xYzRhZTdiZS5qcz83YTBlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ3JhZnRlZCB3aXRoIOKdpCBieSBpbm92ZXggR21iSFxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVVuaXF1ZUlkKCkge1xuICAvLyBNYXRoLnJhbmRvbSBzaG91bGQgYmUgdW5pcXVlIGJlY2F1c2Ugb2YgaXRzIHNlZWRpbmcgYWxnb3JpdGhtLlxuICAvLyBDb252ZXJ0IGl0IHRvIGJhc2UgMzYgKG51bWJlcnMgKyBsZXR0ZXJzKSwgYW5kIGdyYWIgdGhlIGZpcnN0IDkgY2hhcmFjdGVyc1xuICAvLyBhZnRlciB0aGUgZGVjaW1hbC5cbiAgcmV0dXJuICdfJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KTtcbn1cbmZ1bmN0aW9uIGdldFNsb3RDb250ZW50KGVsLCBzbG90TmFtZSkge1xuICByZXR1cm4gZWwucXVlcnlTZWxlY3RvcihgW3Nsb3Q9XCIke3Nsb3ROYW1lfVwiXWApO1xufVxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaGFzIGF0IGxlYXN0IG9uZSBjaGlsZCBub2RlIGF0IHRoZSBnaXZlbiBzbG90XG4gKiBAcGFyYW0gZWwgVGhlIGVsZW1lbnQgd2hpY2ggaGFzIGEgKG5hbWVkKSBzbG90IGluc2lkZVxuICogQHBhcmFtIHNsb3ROYW1lIFRoZSBuYW1lIG9mIHRoZSBzbG90IHRvIGNoZWNrLiBJZiBub3QgcHJvdmlkZWQgZGVmYXVsdCBzbG90IGlzIHVzZWQuXG4gKiBAcmV0dXJuIGB0cnVlYCBpZiBhIGNoaWxkIGF0IHRoZSBzbG90IGV4aXN0cywgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xuZnVuY3Rpb24gaGFzU2xvdENvbnRlbnQoZWwsIHNsb3ROYW1lKSB7XG4gIHZhciBfYTtcbiAgcmV0dXJuIHNsb3ROYW1lXG4gICAgPyBlbC5xdWVyeVNlbGVjdG9yQWxsKGBbc2xvdD1cIiR7c2xvdE5hbWV9XCJdYCkubGVuZ3RoID4gMFxuICAgIDogKChfYSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ3Nsb3QnKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFzc2lnbmVkRWxlbWVudHMoKS5sZW5ndGgpID09PSAwO1xufVxuLyoqXG4gKiBGb2N1c2VzIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaGFzIHRoZSBgZGF0YS1pbm8tZm9jdXNgIGF0dHJpYnV0ZS5cbiAqXG4gKiBAcGFyYW0gZWwgVGhlIGhvc3QgZWxlbWVudCB0byBzZWFyY2ggaW5cbiAqL1xuZnVuY3Rpb24gZm9jdXNJZkV4aXN0cyhlbCkge1xuICB2YXIgX2E7XG4gIChfYSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWluby1mb2N1c10nKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG59XG5mdW5jdGlvbiBtb3ZlQ3Vyc29yVG9FbmQoZWwpIHtcbiAgY29uc3QgbGVuID0gZWwudmFsdWUubGVuZ3RoO1xuICBpZiAoZWwuc2V0U2VsZWN0aW9uUmFuZ2UpIHtcbiAgICBlbC5mb2N1cygpO1xuICAgIGVsLnNldFNlbGVjdGlvblJhbmdlKGxlbiwgbGVuKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJldmVudEV2ZW50KGV2ZW50KSB7XG4gIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5leHBvcnQgeyBnZW5lcmF0ZVVuaXF1ZUlkIGFzIGEsIGZvY3VzSWZFeGlzdHMgYXMgZiwgZ2V0U2xvdENvbnRlbnQgYXMgZywgaGFzU2xvdENvbnRlbnQgYXMgaCwgbW92ZUN1cnNvclRvRW5kIGFzIG0sIHByZXZlbnRFdmVudCBhcyBwIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../elements/dist/esm/component-utils-1c4ae7be.js\n"));

/***/ }),

/***/ "../elements/dist/esm/helpers-289dd016.js":
/*!************************************************!*\
  !*** ../elements/dist/esm/helpers-289dd016.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"r\": function() { return /* binding */ renderHiddenInput; }\n/* harmony export */ });\n/*!\n * Crafted with ❤ by inovex GmbH\n */\nconst renderHiddenInput = (container, name, value, disabled) => {\n  let input = container.querySelector('input.aux-input');\n  if (!input) {\n    input = container.ownerDocument.createElement('input');\n    input.type = 'hidden';\n    input.classList.add('aux-input');\n    container.appendChild(input);\n  }\n  input.disabled = disabled;\n  input.name = name;\n  input.value = value || '';\n  return input;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vaGVscGVycy0yODlkZDAxNi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9lbGVtZW50cy9kaXN0L2VzbS9oZWxwZXJzLTI4OWRkMDE2LmpzPzVjZmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDcmFmdGVkIHdpdGgg4p2kIGJ5IGlub3ZleCBHbWJIXG4gKi9cbmNvbnN0IHJlbmRlckhpZGRlbklucHV0ID0gKGNvbnRhaW5lciwgbmFtZSwgdmFsdWUsIGRpc2FibGVkKSA9PiB7XG4gIGxldCBpbnB1dCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdpbnB1dC5hdXgtaW5wdXQnKTtcbiAgaWYgKCFpbnB1dCkge1xuICAgIGlucHV0ID0gY29udGFpbmVyLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBpbnB1dC50eXBlID0gJ2hpZGRlbic7XG4gICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnYXV4LWlucHV0Jyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlucHV0KTtcbiAgfVxuICBpbnB1dC5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICBpbnB1dC5uYW1lID0gbmFtZTtcbiAgaW5wdXQudmFsdWUgPSB2YWx1ZSB8fCAnJztcbiAgcmV0dXJuIGlucHV0O1xufTtcblxuZXhwb3J0IHsgcmVuZGVySGlkZGVuSW5wdXQgYXMgciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../elements/dist/esm/helpers-289dd016.js\n"));

/***/ }),

/***/ "../elements/dist/esm/index-b7e5b0c5.js":
/*!**********************************************!*\
  !*** ../elements/dist/esm/index-b7e5b0c5.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"c\": function() { return /* binding */ classnames; }\n/* harmony export */ });\n/* harmony import */ var _commonjsHelpers_212d567a_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_commonjsHelpers-212d567a.js */ \"../elements/dist/esm/_commonjsHelpers-212d567a.js\");\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n\n\nvar classnames = (0,_commonjsHelpers_212d567a_js__WEBPACK_IMPORTED_MODULE_0__.c)(function (module) {\n/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vaW5kZXgtYjdlNWIwYzUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDMkU7O0FBRTNFLGlCQUFpQiwrREFBb0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGdCQUFnQjs7QUFFaEI7QUFDQTs7QUFFQSxrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQztBQUNELENBQUM7O0FBRTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9lbGVtZW50cy9kaXN0L2VzbS9pbmRleC1iN2U1YjBjNS5qcz83NjdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ3JhZnRlZCB3aXRoIOKdpCBieSBpbm92ZXggR21iSFxuICovXG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUNvbW1vbmpzTW9kdWxlIH0gZnJvbSAnLi9fY29tbW9uanNIZWxwZXJzLTIxMmQ1NjdhLmpzJztcblxudmFyIGNsYXNzbmFtZXMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4vKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xufSk7XG5cbmV4cG9ydCB7IGNsYXNzbmFtZXMgYXMgYyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../elements/dist/esm/index-b7e5b0c5.js\n"));

/***/ }),

/***/ "../elements/dist/esm/ino-switch.entry.js":
/*!************************************************!*\
  !*** ../elements/dist/esm/ino-switch.entry.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ino_switch\": function() { return /* binding */ Switch; }\n/* harmony export */ });\n/* harmony import */ var _index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-dbb9ab19.js */ \"../elements/dist/esm/index-dbb9ab19.js\");\n/* harmony import */ var _index_b7e5b0c5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-b7e5b0c5.js */ \"../elements/dist/esm/index-b7e5b0c5.js\");\n/* harmony import */ var _component_utils_1c4ae7be_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component-utils-1c4ae7be.js */ \"../elements/dist/esm/component-utils-1c4ae7be.js\");\n/* harmony import */ var _helpers_289dd016_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers-289dd016.js */ \"../elements/dist/esm/helpers-289dd016.js\");\n/* harmony import */ var _component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./component-97c8fef9.js */ \"../elements/dist/esm/component-97c8fef9.js\");\n/* harmony import */ var _component_780a5882_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./component-780a5882.js */ \"../elements/dist/esm/component-780a5882.js\");\n/* harmony import */ var _commonjsHelpers_212d567a_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_commonjsHelpers-212d567a.js */ \"../elements/dist/esm/_commonjsHelpers-212d567a.js\");\n/* harmony import */ var _ponyfill_495ec32d_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ponyfill-495ec32d.js */ \"../elements/dist/esm/ponyfill-495ec32d.js\");\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n\n\n\n\n\n\n\n\n\n/**\n * @license\n * Copyright 2021 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * CSS classes used for switch.\n */\nvar CssClasses;\n(function (CssClasses) {\n    CssClasses[\"PROCESSING\"] = \"mdc-switch--processing\";\n    CssClasses[\"SELECTED\"] = \"mdc-switch--selected\";\n    CssClasses[\"UNSELECTED\"] = \"mdc-switch--unselected\";\n})(CssClasses || (CssClasses = {}));\n/**\n * Query selectors used for switch.\n */\nvar Selectors;\n(function (Selectors) {\n    Selectors[\"RIPPLE\"] = \".mdc-switch__ripple\";\n})(Selectors || (Selectors = {}));\n\n/**\n * @license\n * Copyright 2021 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Observe a target's property for changes. When a property changes, the\n * provided `Observer` function will be invoked with the properties current and\n * previous values.\n *\n * The returned cleanup function will stop listening to changes for the\n * provided `Observer`.\n *\n * @template T The observed target type.\n * @template K The observed property.\n * @param target - The target to observe.\n * @param property - The property of the target to observe.\n * @param observer - An observer function to invoke each time the property\n *     changes.\n * @return A cleanup function that will stop observing changes for the provided\n *     `Observer`.\n */\nfunction observeProperty(target, property, observer) {\n    var targetObservers = installObserver(target, property);\n    var observers = targetObservers.getObservers(property);\n    observers.push(observer);\n    return function () {\n        observers.splice(observers.indexOf(observer), 1);\n    };\n}\n/**\n * A Map of all `TargetObservers` that have been installed.\n */\nvar allTargetObservers = new WeakMap();\n/**\n * Installs a `TargetObservers` for the provided target (if not already\n * installed), and replaces the given property with a getter and setter that\n * will respond to changes and call `TargetObservers`.\n *\n * Subsequent calls to `installObserver()` with the same target and property\n * will not override the property's previously installed getter/setter.\n *\n * @template T The observed target type.\n * @template K The observed property to create a getter/setter for.\n * @param target - The target to observe.\n * @param property - The property to create a getter/setter for, if needed.\n * @return The installed `TargetObservers` for the provided target.\n */\nfunction installObserver(target, property) {\n    var observersMap = new Map();\n    if (!allTargetObservers.has(target)) {\n        allTargetObservers.set(target, {\n            isEnabled: true,\n            getObservers: function (key) {\n                var observers = observersMap.get(key) || [];\n                if (!observersMap.has(key)) {\n                    observersMap.set(key, observers);\n                }\n                return observers;\n            },\n            installedProperties: new Set()\n        });\n    }\n    var targetObservers = allTargetObservers.get(target);\n    if (targetObservers.installedProperties.has(property)) {\n        // The getter/setter has already been replaced for this property\n        return targetObservers;\n    }\n    // Retrieve (or create if it's a plain property) the original descriptor from\n    // the target...\n    var descriptor = getDescriptor(target, property) || {\n        configurable: true,\n        enumerable: true,\n        value: target[property],\n        writable: true\n    };\n    // ...and create a copy that will be used for the observer.\n    var observedDescriptor = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__.a)({}, descriptor);\n    var descGet = descriptor.get, descSet = descriptor.set;\n    if ('value' in descriptor) {\n        // The descriptor is a simple value (not a getter/setter).\n        // For our observer descriptor that we copied, delete the value/writable\n        // properties, since they are incompatible with the get/set properties\n        // for descriptors.\n        delete observedDescriptor.value;\n        delete observedDescriptor.writable;\n        // Set up a simple getter...\n        var value_1 = descriptor.value;\n        descGet = function () { return value_1; };\n        // ...and setter (if the original property was writable).\n        if (descriptor.writable) {\n            descSet = function (newValue) {\n                value_1 = newValue;\n            };\n        }\n    }\n    if (descGet) {\n        observedDescriptor.get = function () {\n            // `this as T` needed for closure conformance\n            return descGet.call(this);\n        };\n    }\n    if (descSet) {\n        observedDescriptor.set = function (newValue) {\n            var e_4, _a;\n            // `thus as T` needed for closure conformance\n            var previous = descGet ? descGet.call(this) : newValue;\n            descSet.call(this, newValue);\n            if (targetObservers.isEnabled && (!descGet || newValue !== previous)) {\n                try {\n                    for (var _b = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__.b)(targetObservers.getObservers(property)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var observer = _c.value;\n                        observer(newValue, previous);\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n            }\n        };\n    }\n    targetObservers.installedProperties.add(property);\n    Object.defineProperty(target, property, observedDescriptor);\n    return targetObservers;\n}\n/**\n * Retrieves the descriptor for a property from the provided target. This\n * function will walk up the target's prototype chain to search for the\n * descriptor.\n *\n * @template T The target type.\n * @template K The property type.\n * @param target - The target to retrieve a descriptor from.\n * @param property - The name of the property to retrieve a descriptor for.\n * @return the descriptor, or undefined if it does not exist. Keep in mind that\n *     plain properties may not have a descriptor defined.\n */\nfunction getDescriptor(target, property) {\n    var descriptorTarget = target;\n    var descriptor;\n    while (descriptorTarget) {\n        descriptor = Object.getOwnPropertyDescriptor(descriptorTarget, property);\n        if (descriptor) {\n            break;\n        }\n        // Walk up the instance's prototype chain in case the property is declared\n        // on a superclass.\n        descriptorTarget = Object.getPrototypeOf(descriptorTarget);\n    }\n    return descriptor;\n}\n/**\n * Enables or disables all observers for a provided target. Changes to observed\n * properties will not call any observers when disabled.\n *\n * @template T The observed target type.\n * @param target - The target to enable or disable observers for.\n * @param enabled - True to enable or false to disable observers.\n */\nfunction setObserversEnabled(target, enabled) {\n    var targetObservers = allTargetObservers.get(target);\n    if (targetObservers) {\n        targetObservers.isEnabled = enabled;\n    }\n}\n\n/**\n * @license\n * Copyright 2021 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCObserverFoundation = /** @class */ (function (_super) {\n    (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__._)(MDCObserverFoundation, _super);\n    function MDCObserverFoundation(adapter) {\n        var _this = _super.call(this, adapter) || this;\n        /** A set of cleanup functions to unobserve changes. */\n        _this.unobserves = new Set();\n        return _this;\n    }\n    MDCObserverFoundation.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.unobserve();\n    };\n    /**\n     * Observe a target's properties for changes using the provided map of\n     * property names and observer functions.\n     *\n     * @template T The target type.\n     * @param target - The target to observe.\n     * @param observers - An object whose keys are target properties and values\n     *     are observer functions that are called when the associated property\n     *     changes.\n     * @return A cleanup function that can be called to unobserve the\n     *     target.\n     */\n    MDCObserverFoundation.prototype.observe = function (target, observers) {\n        var e_1, _a;\n        var _this = this;\n        var cleanup = [];\n        try {\n            for (var _b = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__.b)(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var property = _c.value;\n                var observer = observers[property].bind(this);\n                cleanup.push(this.observeProperty(target, property, observer));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var unobserve = function () {\n            var e_2, _a;\n            try {\n                for (var cleanup_1 = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__.b)(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {\n                    var cleanupFn = cleanup_1_1.value;\n                    cleanupFn();\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (cleanup_1_1 && !cleanup_1_1.done && (_a = cleanup_1.return)) _a.call(cleanup_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            _this.unobserves.delete(unobserve);\n        };\n        this.unobserves.add(unobserve);\n        return unobserve;\n    };\n    /**\n     * Observe a target's property for changes. When a property changes, the\n     * provided `Observer` function will be invoked with the properties current\n     * and previous values.\n     *\n     * The returned cleanup function will stop listening to changes for the\n     * provided `Observer`.\n     *\n     * @template T The observed target type.\n     * @template K The observed property.\n     * @param target - The target to observe.\n     * @param property - The property of the target to observe.\n     * @param observer - An observer function to invoke each time the property\n     *     changes.\n     * @return A cleanup function that will stop observing changes for the\n     *     provided `Observer`.\n     */\n    MDCObserverFoundation.prototype.observeProperty = function (target, property, observer) {\n        return observeProperty(target, property, observer);\n    };\n    /**\n     * Enables or disables all observers for the provided target. Disabling\n     * observers will prevent them from being called until they are re-enabled.\n     *\n     * @param target - The target to enable or disable observers for.\n     * @param enabled - Whether or not observers should be called.\n     */\n    MDCObserverFoundation.prototype.setObserversEnabled = function (target, enabled) {\n        setObserversEnabled(target, enabled);\n    };\n    /**\n     * Clean up all observers and stop listening for property changes.\n     */\n    MDCObserverFoundation.prototype.unobserve = function () {\n        var e_3, _a;\n        try {\n            // Iterate over a copy since unobserve() will remove themselves from the set\n            for (var _b = (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__.b)((0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__.d)([], (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__.e)(this.unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var unobserve = _c.value;\n                unobserve();\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    return MDCObserverFoundation;\n}(_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__.M));\n\n/**\n * @license\n * Copyright 2021 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * `MDCSwitchFoundation` provides a state-only foundation for a switch\n * component.\n *\n * State observers and event handler entrypoints update a component's adapter's\n * state with the logic needed for switch to function.\n */\nvar MDCSwitchFoundation = /** @class */ (function (_super) {\n    (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__._)(MDCSwitchFoundation, _super);\n    function MDCSwitchFoundation(adapter) {\n        var _this = _super.call(this, adapter) || this;\n        _this.handleClick = _this.handleClick.bind(_this);\n        return _this;\n    }\n    /**\n     * Initializes the foundation and starts observing state changes.\n     */\n    MDCSwitchFoundation.prototype.init = function () {\n        this.observe(this.adapter.state, {\n            disabled: this.stopProcessingIfDisabled,\n            processing: this.stopProcessingIfDisabled,\n        });\n    };\n    /**\n     * Event handler for switch click events. Clicking on a switch will toggle its\n     * selected state.\n     */\n    MDCSwitchFoundation.prototype.handleClick = function () {\n        if (this.adapter.state.disabled) {\n            return;\n        }\n        this.adapter.state.selected = !this.adapter.state.selected;\n    };\n    MDCSwitchFoundation.prototype.stopProcessingIfDisabled = function () {\n        if (this.adapter.state.disabled) {\n            this.adapter.state.processing = false;\n        }\n    };\n    return MDCSwitchFoundation;\n}(MDCObserverFoundation));\n/**\n * `MDCSwitchRenderFoundation` provides a state and rendering foundation for a\n * switch component.\n *\n * State observers and event handler entrypoints update a component's\n * adapter's state with the logic needed for switch to function.\n *\n * In response to state changes, the rendering foundation uses the component's\n * render adapter to keep the component's DOM updated with the state.\n */\nvar MDCSwitchRenderFoundation = /** @class */ (function (_super) {\n    (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__._)(MDCSwitchRenderFoundation, _super);\n    function MDCSwitchRenderFoundation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Initializes the foundation and starts observing state changes.\n     */\n    MDCSwitchRenderFoundation.prototype.init = function () {\n        _super.prototype.init.call(this);\n        this.observe(this.adapter.state, {\n            disabled: this.onDisabledChange,\n            processing: this.onProcessingChange,\n            selected: this.onSelectedChange,\n        });\n    };\n    /**\n     * Initializes the foundation from a server side rendered (SSR) component.\n     * This will sync the adapter's state with the current state of the DOM.\n     *\n     * This method should be called after `init()`.\n     */\n    MDCSwitchRenderFoundation.prototype.initFromDOM = function () {\n        // Turn off observers while setting state\n        this.setObserversEnabled(this.adapter.state, false);\n        this.adapter.state.selected = this.adapter.hasClass(CssClasses.SELECTED);\n        // Ensure aria-checked is set if attribute is not present\n        this.onSelectedChange();\n        this.adapter.state.disabled = this.adapter.isDisabled();\n        this.adapter.state.processing =\n            this.adapter.hasClass(CssClasses.PROCESSING);\n        // Re-observe state\n        this.setObserversEnabled(this.adapter.state, true);\n        this.stopProcessingIfDisabled();\n    };\n    MDCSwitchRenderFoundation.prototype.onDisabledChange = function () {\n        this.adapter.setDisabled(this.adapter.state.disabled);\n    };\n    MDCSwitchRenderFoundation.prototype.onProcessingChange = function () {\n        this.toggleClass(this.adapter.state.processing, CssClasses.PROCESSING);\n    };\n    MDCSwitchRenderFoundation.prototype.onSelectedChange = function () {\n        this.adapter.setAriaChecked(String(this.adapter.state.selected));\n        this.toggleClass(this.adapter.state.selected, CssClasses.SELECTED);\n        this.toggleClass(!this.adapter.state.selected, CssClasses.UNSELECTED);\n    };\n    MDCSwitchRenderFoundation.prototype.toggleClass = function (addClass, className) {\n        if (addClass) {\n            this.adapter.addClass(className);\n        }\n        else {\n            this.adapter.removeClass(className);\n        }\n    };\n    return MDCSwitchRenderFoundation;\n}(MDCSwitchFoundation));\n\n/**\n * @license\n * Copyright 2021 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * `MDCSwitch` provides a component implementation of a Material Design switch.\n */\nvar MDCSwitch = /** @class */ (function (_super) {\n    (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__._)(MDCSwitch, _super);\n    function MDCSwitch(root, foundation) {\n        var _this = _super.call(this, root, foundation) || this;\n        _this.root = root;\n        return _this;\n    }\n    /**\n     * Creates a new `MDCSwitch` and attaches it to the given root element.\n     * @param root The root to attach to.\n     * @return the new component instance.\n     */\n    MDCSwitch.attachTo = function (root) {\n        return new MDCSwitch(root);\n    };\n    MDCSwitch.prototype.initialize = function () {\n        this.ripple = new _component_780a5882_js__WEBPACK_IMPORTED_MODULE_5__.M(this.root, this.createRippleFoundation());\n    };\n    MDCSwitch.prototype.initialSyncWithDOM = function () {\n        var rippleElement = this.root.querySelector(Selectors.RIPPLE);\n        if (!rippleElement) {\n            throw new Error(\"Switch \" + Selectors.RIPPLE + \" element is required.\");\n        }\n        this.rippleElement = rippleElement;\n        this.root.addEventListener('click', this.foundation.handleClick);\n        this.foundation.initFromDOM();\n    };\n    MDCSwitch.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.ripple.destroy();\n        this.root.removeEventListener('click', this.foundation.handleClick);\n    };\n    MDCSwitch.prototype.getDefaultFoundation = function () {\n        return new MDCSwitchRenderFoundation(this.createAdapter());\n    };\n    MDCSwitch.prototype.createAdapter = function () {\n        var _this = this;\n        return {\n            addClass: function (className) {\n                _this.root.classList.add(className);\n            },\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            isDisabled: function () { return _this.root.disabled; },\n            removeClass: function (className) {\n                _this.root.classList.remove(className);\n            },\n            setAriaChecked: function (ariaChecked) {\n                return _this.root.setAttribute('aria-checked', ariaChecked);\n            },\n            setDisabled: function (disabled) {\n                _this.root.disabled = disabled;\n            },\n            state: this,\n        };\n    };\n    MDCSwitch.prototype.createRippleFoundation = function () {\n        return new _component_780a5882_js__WEBPACK_IMPORTED_MODULE_5__.b(this.createRippleAdapter());\n    };\n    MDCSwitch.prototype.createRippleAdapter = function () {\n        var _this = this;\n        return (0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__.a)((0,_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__.a)({}, _component_780a5882_js__WEBPACK_IMPORTED_MODULE_5__.M.createAdapter(this)), { computeBoundingRect: function () { return _this.rippleElement.getBoundingClientRect(); }, isUnbounded: function () { return true; } });\n    };\n    return MDCSwitch;\n}(_component_97c8fef9_js__WEBPACK_IMPORTED_MODULE_4__.c));\n\nconst inoSwitchCss = \".mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:0;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1);background-color:#fff;background-color:var(--mdc-elevation-overlay-color, #fff)}.mdc-switch{align-items:center;background:none;border:none;cursor:pointer;display:inline-flex;flex-shrink:0;margin:0;outline:none;overflow:visible;padding:0;position:relative}.mdc-switch:disabled{cursor:default;pointer-events:none}.mdc-switch__track{overflow:hidden;position:relative;width:100%}.mdc-switch__track::before,.mdc-switch__track::after{border:1px solid transparent;border-radius:inherit;box-sizing:border-box;content:\\\"\\\";height:100%;left:0;position:absolute;width:100%}.mdc-switch__track::before{transition:transform 75ms 0ms cubic-bezier(0, 0, 0.2, 1);transform:translateX(0)}.mdc-switch__track::after{transition:transform 75ms 0ms cubic-bezier(0.4, 0, 0.6, 1);transform:translateX(-100%)}[dir=rtl] .mdc-switch__track::after,.mdc-switch__track[dir=rtl]::after{transform:translateX(100%);}.mdc-switch--selected .mdc-switch__track::before{transition:transform 75ms 0ms cubic-bezier(0.4, 0, 0.6, 1);transform:translateX(100%)}[dir=rtl] .mdc-switch--selected .mdc-switch__track::before,.mdc-switch--selected .mdc-switch__track[dir=rtl]::before{transform:translateX(-100%);}.mdc-switch--selected .mdc-switch__track::after{transition:transform 75ms 0ms cubic-bezier(0, 0, 0.2, 1);transform:translateX(0)}.mdc-switch__handle-track{height:100%;pointer-events:none;position:absolute;top:0;transition:transform 75ms 0ms cubic-bezier(0.4, 0, 0.2, 1);left:0;right:auto;transform:translateX(0)}[dir=rtl] .mdc-switch__handle-track,.mdc-switch__handle-track[dir=rtl]{left:auto;right:0;}.mdc-switch--selected .mdc-switch__handle-track{transform:translateX(100%)}[dir=rtl] .mdc-switch--selected .mdc-switch__handle-track,.mdc-switch--selected .mdc-switch__handle-track[dir=rtl]{transform:translateX(-100%);}.mdc-switch__handle{display:flex;pointer-events:auto;position:absolute;top:50%;transform:translateY(-50%);left:0;right:auto}[dir=rtl] .mdc-switch__handle,.mdc-switch__handle[dir=rtl]{left:auto;right:0;}.mdc-switch__handle::before,.mdc-switch__handle::after{border:1px solid transparent;border-radius:inherit;box-sizing:border-box;content:\\\"\\\";width:100%;height:100%;left:0;position:absolute;top:0;transition:background-color 75ms 0ms cubic-bezier(0.4, 0, 0.2, 1), border-color 75ms 0ms cubic-bezier(0.4, 0, 0.2, 1);z-index:-1}.mdc-switch__shadow{border-radius:inherit;bottom:0;left:0;position:absolute;right:0;top:0}.mdc-elevation-overlay{bottom:0;left:0;right:0;top:0}.mdc-switch__ripple{left:50%;position:absolute;top:50%;transform:translate(-50%, -50%);z-index:-1}.mdc-switch:disabled .mdc-switch__ripple{display:none}.mdc-switch__icons{height:100%;position:relative;width:100%;z-index:1}.mdc-switch__icon{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0;opacity:0;transition:opacity 30ms 0ms cubic-bezier(0.4, 0, 1, 1)}.mdc-switch--selected .mdc-switch__icon--on,.mdc-switch--unselected .mdc-switch__icon--off{opacity:1;transition:opacity 45ms 30ms cubic-bezier(0, 0, 0.2, 1)}.mdc-switch{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0, 0, 0, 0);will-change:transform, opacity}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-switch .mdc-switch__ripple::before,.mdc-switch .mdc-switch__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\"}.mdc-switch .mdc-switch__ripple::before{transition:opacity 15ms linear, background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index, 1)}.mdc-switch .mdc-switch__ripple::after{z-index:0;z-index:var(--mdc-ripple-z-index, 0)}.mdc-switch.mdc-ripple-upgraded .mdc-switch__ripple::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-switch.mdc-ripple-upgraded .mdc-switch__ripple::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-switch.mdc-ripple-upgraded--unbounded .mdc-switch__ripple::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-switch.mdc-ripple-upgraded--foreground-activation .mdc-switch__ripple::after{animation:mdc-ripple-fg-radius-in 225ms forwards, mdc-ripple-fg-opacity-in 75ms forwards}.mdc-switch.mdc-ripple-upgraded--foreground-deactivation .mdc-switch__ripple::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-switch .mdc-switch__ripple::before,.mdc-switch .mdc-switch__ripple::after{top:calc(50% - 50%);left:calc(50% - 50%);width:100%;height:100%}.mdc-switch.mdc-ripple-upgraded .mdc-switch__ripple::before,.mdc-switch.mdc-ripple-upgraded .mdc-switch__ripple::after{top:var(--mdc-ripple-top, calc(50% - 50%));left:var(--mdc-ripple-left, calc(50% - 50%));width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-switch.mdc-ripple-upgraded .mdc-switch__ripple::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-switch{width:36px;width:var(--mdc-switch-track-width, 36px)}.mdc-switch.mdc-switch--selected:enabled .mdc-switch__handle::after{background:#3d40f5;background:var(--mdc-switch-selected-handle-color, var(--mdc-theme-primary, #3d40f5))}.mdc-switch.mdc-switch--selected:enabled:hover:not(:focus):not(:active) .mdc-switch__handle::after{background:#3d3e7b;background:var(--mdc-switch-selected-hover-handle-color, #3d3e7b)}.mdc-switch.mdc-switch--selected:enabled:focus:not(:active) .mdc-switch__handle::after{background:#3d3e7b;background:var(--mdc-switch-selected-focus-handle-color, #3d3e7b)}.mdc-switch.mdc-switch--selected:enabled:active .mdc-switch__handle::after{background:#3d3e7b;background:var(--mdc-switch-selected-pressed-handle-color, #3d3e7b)}.mdc-switch.mdc-switch--selected:disabled .mdc-switch__handle::after{background:#424242;background:var(--mdc-switch-disabled-selected-handle-color, #424242)}.mdc-switch.mdc-switch--unselected:enabled .mdc-switch__handle::after{background:#616161;background:var(--mdc-switch-unselected-handle-color, #616161)}.mdc-switch.mdc-switch--unselected:enabled:hover:not(:focus):not(:active) .mdc-switch__handle::after{background:#212121;background:var(--mdc-switch-unselected-hover-handle-color, #212121)}.mdc-switch.mdc-switch--unselected:enabled:focus:not(:active) .mdc-switch__handle::after{background:#212121;background:var(--mdc-switch-unselected-focus-handle-color, #212121)}.mdc-switch.mdc-switch--unselected:enabled:active .mdc-switch__handle::after{background:#212121;background:var(--mdc-switch-unselected-pressed-handle-color, #212121)}.mdc-switch.mdc-switch--unselected:disabled .mdc-switch__handle::after{background:#424242;background:var(--mdc-switch-disabled-unselected-handle-color, #424242)}.mdc-switch .mdc-switch__handle::before{background:#fff;background:var(--mdc-switch-handle-surface-color, var(--mdc-theme-surface, #fff))}.mdc-switch:enabled .mdc-switch__shadow{box-shadow:0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);box-shadow:var(--mdc-switch-handle-elevation, var(--mdc-elevation-box-shadow-for-gss));--mdc-elevation-box-shadow-for-gss:0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12)}.mdc-switch:disabled .mdc-switch__shadow{box-shadow:0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);box-shadow:var(--mdc-switch-disabled-handle-elevation, var(--mdc-elevation-box-shadow-for-gss));--mdc-elevation-box-shadow-for-gss:0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12)}.mdc-switch .mdc-switch__handle{height:20px;height:var(--mdc-switch-handle-height, 20px)}.mdc-switch:disabled .mdc-switch__handle::after{opacity:0.38;opacity:var(--mdc-switch-disabled-handle-opacity, 0.38)}.mdc-switch .mdc-switch__handle{border-radius:10px;border-radius:var(--mdc-switch-handle-shape, 10px)}.mdc-switch .mdc-switch__handle{width:20px;width:var(--mdc-switch-handle-width, 20px)}.mdc-switch .mdc-switch__handle-track{width:calc(100% - 20px);width:calc(100% - var(--mdc-switch-handle-width, 20px))}.mdc-switch.mdc-switch--selected:enabled .mdc-switch__icon{fill:#fff;fill:var(--mdc-switch-selected-icon-color, var(--mdc-theme-on-primary, #fff))}.mdc-switch.mdc-switch--selected:disabled .mdc-switch__icon{fill:#fff;fill:var(--mdc-switch-disabled-selected-icon-color, var(--mdc-theme-on-primary, #fff))}.mdc-switch.mdc-switch--unselected:enabled .mdc-switch__icon{fill:#fff;fill:var(--mdc-switch-unselected-icon-color, var(--mdc-theme-on-primary, #fff))}.mdc-switch.mdc-switch--unselected:disabled .mdc-switch__icon{fill:#fff;fill:var(--mdc-switch-disabled-unselected-icon-color, var(--mdc-theme-on-primary, #fff))}.mdc-switch.mdc-switch--selected:disabled .mdc-switch__icons{opacity:0.38;opacity:var(--mdc-switch-disabled-selected-icon-opacity, 0.38)}.mdc-switch.mdc-switch--unselected:disabled .mdc-switch__icons{opacity:0.38;opacity:var(--mdc-switch-disabled-unselected-icon-opacity, 0.38)}.mdc-switch.mdc-switch--selected .mdc-switch__icon{width:18px;width:var(--mdc-switch-selected-icon-size, 18px);height:18px;height:var(--mdc-switch-selected-icon-size, 18px)}.mdc-switch.mdc-switch--unselected .mdc-switch__icon{width:18px;width:var(--mdc-switch-unselected-icon-size, 18px);height:18px;height:var(--mdc-switch-unselected-icon-size, 18px)}.mdc-switch.mdc-switch--selected:enabled:hover:not(:focus) .mdc-switch__ripple::before,.mdc-switch.mdc-switch--selected:enabled:hover:not(:focus) .mdc-switch__ripple::after{background-color:#3d40f5;background-color:var(--mdc-switch-selected-hover-state-layer-color, var(--mdc-theme-primary, #3d40f5))}.mdc-switch.mdc-switch--selected:enabled:focus .mdc-switch__ripple::before,.mdc-switch.mdc-switch--selected:enabled:focus .mdc-switch__ripple::after{background-color:#3d40f5;background-color:var(--mdc-switch-selected-focus-state-layer-color, var(--mdc-theme-primary, #3d40f5))}.mdc-switch.mdc-switch--selected:enabled:active .mdc-switch__ripple::before,.mdc-switch.mdc-switch--selected:enabled:active .mdc-switch__ripple::after{background-color:#3d40f5;background-color:var(--mdc-switch-selected-pressed-state-layer-color, var(--mdc-theme-primary, #3d40f5))}.mdc-switch.mdc-switch--unselected:enabled:hover:not(:focus) .mdc-switch__ripple::before,.mdc-switch.mdc-switch--unselected:enabled:hover:not(:focus) .mdc-switch__ripple::after{background-color:#424242;background-color:var(--mdc-switch-unselected-hover-state-layer-color, #424242)}.mdc-switch.mdc-switch--unselected:enabled:focus .mdc-switch__ripple::before,.mdc-switch.mdc-switch--unselected:enabled:focus .mdc-switch__ripple::after{background-color:#424242;background-color:var(--mdc-switch-unselected-focus-state-layer-color, #424242)}.mdc-switch.mdc-switch--unselected:enabled:active .mdc-switch__ripple::before,.mdc-switch.mdc-switch--unselected:enabled:active .mdc-switch__ripple::after{background-color:#424242;background-color:var(--mdc-switch-unselected-pressed-state-layer-color, #424242)}.mdc-switch.mdc-switch--selected:enabled:hover:not(:focus):hover .mdc-switch__ripple::before,.mdc-switch.mdc-switch--selected:enabled:hover:not(:focus).mdc-ripple-surface--hover .mdc-switch__ripple::before{opacity:0.04;opacity:var(--mdc-switch-selected-hover-state-layer-opacity, 0.04)}.mdc-switch.mdc-switch--selected:enabled:focus.mdc-ripple-upgraded--background-focused .mdc-switch__ripple::before,.mdc-switch.mdc-switch--selected:enabled:focus:not(.mdc-ripple-upgraded):focus .mdc-switch__ripple::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-switch-selected-focus-state-layer-opacity, 0.12)}.mdc-switch.mdc-switch--selected:enabled:active:not(.mdc-ripple-upgraded) .mdc-switch__ripple::after{transition:opacity 150ms linear}.mdc-switch.mdc-switch--selected:enabled:active:not(.mdc-ripple-upgraded):active .mdc-switch__ripple::after{transition-duration:75ms;opacity:0.1;opacity:var(--mdc-switch-selected-pressed-state-layer-opacity, 0.1)}.mdc-switch.mdc-switch--selected:enabled:active.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-switch-selected-pressed-state-layer-opacity, 0.1)}.mdc-switch.mdc-switch--unselected:enabled:hover:not(:focus):hover .mdc-switch__ripple::before,.mdc-switch.mdc-switch--unselected:enabled:hover:not(:focus).mdc-ripple-surface--hover .mdc-switch__ripple::before{opacity:0.04;opacity:var(--mdc-switch-unselected-hover-state-layer-opacity, 0.04)}.mdc-switch.mdc-switch--unselected:enabled:focus.mdc-ripple-upgraded--background-focused .mdc-switch__ripple::before,.mdc-switch.mdc-switch--unselected:enabled:focus:not(.mdc-ripple-upgraded):focus .mdc-switch__ripple::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-switch-unselected-focus-state-layer-opacity, 0.12)}.mdc-switch.mdc-switch--unselected:enabled:active:not(.mdc-ripple-upgraded) .mdc-switch__ripple::after{transition:opacity 150ms linear}.mdc-switch.mdc-switch--unselected:enabled:active:not(.mdc-ripple-upgraded):active .mdc-switch__ripple::after{transition-duration:75ms;opacity:0.1;opacity:var(--mdc-switch-unselected-pressed-state-layer-opacity, 0.1)}.mdc-switch.mdc-switch--unselected:enabled:active.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-switch-unselected-pressed-state-layer-opacity, 0.1)}.mdc-switch .mdc-switch__ripple{height:48px;height:var(--mdc-switch-state-layer-size, 48px);width:48px;width:var(--mdc-switch-state-layer-size, 48px)}.mdc-switch .mdc-switch__track{height:14px;height:var(--mdc-switch-track-height, 14px)}.mdc-switch:disabled .mdc-switch__track{opacity:0.12;opacity:var(--mdc-switch-disabled-track-opacity, 0.12)}.mdc-switch:enabled .mdc-switch__track::after{background:#cfcffd;background:var(--mdc-switch-selected-track-color, #cfcffd)}.mdc-switch:enabled:hover:not(:focus):not(:active) .mdc-switch__track::after{background:#cfcffd;background:var(--mdc-switch-selected-hover-track-color, #cfcffd)}.mdc-switch:enabled:focus:not(:active) .mdc-switch__track::after{background:#cfcffd;background:var(--mdc-switch-selected-focus-track-color, #cfcffd)}.mdc-switch:enabled:active .mdc-switch__track::after{background:#cfcffd;background:var(--mdc-switch-selected-pressed-track-color, #cfcffd)}.mdc-switch:disabled .mdc-switch__track::after{background:#424242;background:var(--mdc-switch-disabled-selected-track-color, #424242)}.mdc-switch:enabled .mdc-switch__track::before{background:#e0e0e0;background:var(--mdc-switch-unselected-track-color, #e0e0e0)}.mdc-switch:enabled:hover:not(:focus):not(:active) .mdc-switch__track::before{background:#e0e0e0;background:var(--mdc-switch-unselected-hover-track-color, #e0e0e0)}.mdc-switch:enabled:focus:not(:active) .mdc-switch__track::before{background:#e0e0e0;background:var(--mdc-switch-unselected-focus-track-color, #e0e0e0)}.mdc-switch:enabled:active .mdc-switch__track::before{background:#e0e0e0;background:var(--mdc-switch-unselected-pressed-track-color, #e0e0e0)}.mdc-switch:disabled .mdc-switch__track::before{background:#424242;background:var(--mdc-switch-disabled-unselected-track-color, #424242)}.mdc-switch .mdc-switch__track{border-radius:7px;border-radius:var(--mdc-switch-track-shape, 7px)}@media screen and (forced-colors: active), (-ms-high-contrast: active){.mdc-switch:enabled .mdc-switch__shadow{}.mdc-switch:disabled .mdc-switch__shadow{}.mdc-switch:disabled .mdc-switch__handle::after{opacity:1;opacity:var(--mdc-switch-disabled-handle-opacity, 1)}.mdc-switch.mdc-switch--selected:enabled .mdc-switch__icon{fill:ButtonText;fill:var(--mdc-switch-selected-icon-color, ButtonText)}.mdc-switch.mdc-switch--selected:disabled .mdc-switch__icon{fill:GrayText;fill:var(--mdc-switch-disabled-selected-icon-color, GrayText)}.mdc-switch.mdc-switch--unselected:enabled .mdc-switch__icon{fill:ButtonText;fill:var(--mdc-switch-unselected-icon-color, ButtonText)}.mdc-switch.mdc-switch--unselected:disabled .mdc-switch__icon{fill:GrayText;fill:var(--mdc-switch-disabled-unselected-icon-color, GrayText)}.mdc-switch.mdc-switch--selected:disabled .mdc-switch__icons{opacity:1;opacity:var(--mdc-switch-disabled-selected-icon-opacity, 1)}.mdc-switch.mdc-switch--unselected:disabled .mdc-switch__icons{opacity:1;opacity:var(--mdc-switch-disabled-unselected-icon-opacity, 1)}.mdc-switch:disabled .mdc-switch__track{opacity:1;opacity:var(--mdc-switch-disabled-track-opacity, 1)}}ino-switch{--mdc-switch-selected-handle-color:white;--mdc-switch-selected-hover-handle-color:white;--mdc-switch-selected-focus-handle-color:white;--mdc-switch-selected-pressed-handle-color:white;--mdc-switch-disabled-selected-handle-color:#CBD0E0;--mdc-switch-selected-track-color:#2C02FF;--mdc-switch-selected-hover-track-color:#2C02FF;--mdc-switch-selected-focus-track-color:#2C02FF;--mdc-switch-selected-pressed-track-color:#2C02FF;--mdc-switch-unselected-focus-track-color:#ABB1CC;--mdc-switch-unselected-hover-track-color:#ABB1CC;--mdc-switch-disabled-selected-track-color:transparent}ino-switch .mdc-switch--selected:focus .mdc-switch__track,ino-switch .mdc-switch--unselected:focus .mdc-switch__track{border:1.5px solid white;margin:-1.5px;box-shadow:0 0 0 5px #2D5DFF4D}ino-switch .mdc-switch--selected .mdc-switch__handle{margin-left:-2px}ino-switch .mdc-switch--unselected .mdc-switch__handle{margin-left:2px}ino-switch .mdc-switch:disabled .mdc-switch__track{opacity:1;border:2px solid #CBD0E0;margin:-1.5px}ino-switch .mdc-switch:disabled .mdc-switch__handle::after{opacity:1}ino-switch{display:flex;gap:10px;align-items:center;height:30px;cursor:pointer;--mdc-switch-track-height:20px;--mdc-switch-track-width:36px;--mdc-switch-track-shape:18px;--mdc-switch-handle-height:16px;--mdc-switch-handle-width:16px;--mdc-switch-handle-shape:14px;--mdc-switch-selected-icon-size:10px;--mdc-switch-unselected-icon-size:10px;--mdc-switch-handle-surface-color:white;--mdc-switch-unselected-handle-color:white;--mdc-switch-unselected-track-color:#CBD0E0;--mdc-switch-disabled-unselected-handle-color:#CBD0E0;--mdc-switch-disabled-unselected-track-color:transparent;--mdc-switch-unselected-hover-handle-color:white;--mdc-switch-unselected-focus-handle-color:white;--mdc-switch-unselected-pressed-handle-color:white}ino-switch.ino-switch-disabled{cursor:default;pointer-events:none}ino-switch .mdc-switch__ripple{display:none}\";\n\nconst Switch = class {\n  constructor(hostRef) {\n    (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.checkedChange = (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"checkedChange\", 7);\n    this.switchId = `ino-switch-id_${(0,_component_utils_1c4ae7be_js__WEBPACK_IMPORTED_MODULE_2__.a)()}`;\n    /**\n     * Marks this element as checked. (**unmanaged**)\n     */\n    this.checked = false;\n    this.handleChange = (e) => {\n      e.stopPropagation();\n      if (this.disabled)\n        return;\n      this.checkedChange.emit(!this.checked);\n    };\n  }\n  checkedChanged(newChecked) {\n    if (this.mdcSwitch) {\n      this.mdcSwitch.selected = newChecked;\n    }\n  }\n  componentDidLoad() {\n    this.mdcSwitch = new MDCSwitch(this.mdcSwitchEl);\n  }\n  disconnectedCallback() {\n    var _a;\n    (_a = this.mdcSwitch) === null || _a === void 0 ? void 0 : _a.destroy();\n  }\n  render() {\n    const { el, name, disabled } = this;\n    const hiddenInput = (0,_helpers_289dd016_js__WEBPACK_IMPORTED_MODULE_3__.r)(el, name, '', disabled);\n    hiddenInput.checked = this.checked;\n    const hostClasses = (0,_index_b7e5b0c5_js__WEBPACK_IMPORTED_MODULE_1__.c)('ino-switch', {\n      'ino-switch-disabled': this.disabled\n    });\n    const switchClasses = (0,_index_b7e5b0c5_js__WEBPACK_IMPORTED_MODULE_1__.c)('mdc-switch', this.checked ? 'mdc-switch--selected' : 'mdc-switch--unselected');\n    return ((0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: hostClasses, checked: this.checked, disabled: this.disabled, onClick: this.handleChange }, (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"button\", { id: this.switchId, ref: el => this.mdcSwitchEl = el, class: switchClasses, disabled: this.disabled, type: \"button\", role: \"switch\", \"aria-checked\": this.checked }, (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-switch__track\" }), (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-switch__handle-track\" }, (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-switch__handle\" }, (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"mdc-switch__ripple\" })))), (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { htmlFor: this.switchId, onClick: (e) => e.stopPropagation() }, (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", null))));\n  }\n  get el() { return (0,_index_dbb9ab19_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n  static get watchers() { return {\n    \"checked\": [\"checkedChanged\"]\n  }; }\n};\nSwitch.style = inoSwitchCss;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vaW5vLXN3aXRjaC5lbnRyeS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDNkc7QUFDdkQ7QUFDZ0I7QUFDUDtBQUNnRztBQUM1RTtBQUMzQztBQUNSOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdDQUFnQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhCQUE4Qjs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHlEQUFRLEdBQUc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHlEQUFRLDBEQUEwRCxVQUFVO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHlEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHlEQUFRLDBDQUEwQyxVQUFVO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyx5REFBUSwyQ0FBMkMsbUJBQW1CO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFFBQVE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIseURBQVEsQ0FBQyx5REFBYSxLQUFLLHlEQUFNLHFDQUFxQyxVQUFVO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLHFEQUFhOztBQUVmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkseURBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSx5REFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkseURBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHFEQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsNkNBQTZDLGtEQUFrRDtBQUMvRixzQ0FBc0MsNkJBQTZCO0FBQ25FO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHFEQUFtQjtBQUN0QztBQUNBO0FBQ0E7QUFDQSxlQUFlLHlEQUFRLENBQUMseURBQVEsR0FBRyxFQUFFLG1FQUF1QixXQUFXLG1DQUFtQyxxREFBcUQsNkJBQTZCLGdCQUFnQjtBQUM1TTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLHFEQUFZOztBQUVkLDZDQUE2QyxrQkFBa0Isc0JBQXNCLG9CQUFvQixVQUFVLGdEQUFnRCxzREFBc0Qsc0JBQXNCLDBEQUEwRCxZQUFZLG1CQUFtQixnQkFBZ0IsWUFBWSxlQUFlLG9CQUFvQixjQUFjLFNBQVMsYUFBYSxpQkFBaUIsVUFBVSxrQkFBa0IscUJBQXFCLGVBQWUsb0JBQW9CLG1CQUFtQixnQkFBZ0Isa0JBQWtCLFdBQVcscURBQXFELDZCQUE2QixzQkFBc0Isc0JBQXNCLGFBQWEsWUFBWSxPQUFPLGtCQUFrQixXQUFXLDJCQUEyQix5REFBeUQsd0JBQXdCLDBCQUEwQiwyREFBMkQsNEJBQTRCLHVFQUF1RSw0QkFBNEIsaURBQWlELDJEQUEyRCwyQkFBMkIscUhBQXFILDZCQUE2QixnREFBZ0QseURBQXlELHdCQUF3QiwwQkFBMEIsWUFBWSxvQkFBb0Isa0JBQWtCLE1BQU0sMkRBQTJELE9BQU8sV0FBVyx3QkFBd0IsdUVBQXVFLFVBQVUsU0FBUyxnREFBZ0QsMkJBQTJCLG1IQUFtSCw2QkFBNkIsb0JBQW9CLGFBQWEsb0JBQW9CLGtCQUFrQixRQUFRLDJCQUEyQixPQUFPLFdBQVcsMkRBQTJELFVBQVUsU0FBUyx1REFBdUQsNkJBQTZCLHNCQUFzQixzQkFBc0IsYUFBYSxXQUFXLFlBQVksT0FBTyxrQkFBa0IsTUFBTSxzSEFBc0gsV0FBVyxvQkFBb0Isc0JBQXNCLFNBQVMsT0FBTyxrQkFBa0IsUUFBUSxNQUFNLHVCQUF1QixTQUFTLE9BQU8sUUFBUSxNQUFNLG9CQUFvQixTQUFTLGtCQUFrQixRQUFRLGdDQUFnQyxXQUFXLHlDQUF5QyxhQUFhLG1CQUFtQixZQUFZLGtCQUFrQixXQUFXLFVBQVUsa0JBQWtCLFNBQVMsT0FBTyxZQUFZLGtCQUFrQixRQUFRLE1BQU0sVUFBVSx1REFBdUQsMkZBQTJGLFVBQVUsd0RBQXdELFlBQVksdUJBQXVCLG9CQUFvQixtQkFBbUIsd0JBQXdCLGdDQUFnQyxrQ0FBa0MsNkNBQTZDLCtCQUErQixtQ0FBbUMsS0FBSyx1REFBdUQsc0VBQXNFLEdBQUcsaUdBQWlHLG9DQUFvQyxLQUFLLGlDQUFpQyxVQUFVLEdBQUcseUNBQXlDLHFDQUFxQyxLQUFLLGlDQUFpQyx3Q0FBd0MsR0FBRyxXQUFXLCtFQUErRSxrQkFBa0Isa0JBQWtCLFVBQVUsb0JBQW9CLGFBQWEsd0NBQXdDLDZEQUE2RCxVQUFVLHFDQUFxQyx1Q0FBdUMsVUFBVSxxQ0FBcUMsNERBQTRELCtDQUErQywyREFBMkQsTUFBTSxPQUFPLG1CQUFtQiwrQkFBK0Isc0VBQXNFLDZCQUE2QiwrQkFBK0Isa0ZBQWtGLHlGQUF5RixvRkFBb0YsMENBQTBDLGdHQUFnRywrRUFBK0Usb0JBQW9CLHFCQUFxQixXQUFXLFlBQVksdUhBQXVILDJDQUEyQyw2Q0FBNkMsc0NBQXNDLHVDQUF1QywyREFBMkQsc0NBQXNDLHVDQUF1QyxZQUFZLFdBQVcsMENBQTBDLG9FQUFvRSxtQkFBbUIsc0ZBQXNGLG1HQUFtRyxtQkFBbUIsa0VBQWtFLHVGQUF1RixtQkFBbUIsa0VBQWtFLDJFQUEyRSxtQkFBbUIsb0VBQW9FLHFFQUFxRSxtQkFBbUIscUVBQXFFLHNFQUFzRSxtQkFBbUIsOERBQThELHFHQUFxRyxtQkFBbUIsb0VBQW9FLHlGQUF5RixtQkFBbUIsb0VBQW9FLDZFQUE2RSxtQkFBbUIsc0VBQXNFLHVFQUF1RSxtQkFBbUIsdUVBQXVFLHdDQUF3QyxnQkFBZ0Isa0ZBQWtGLHdDQUF3Qyx5SEFBeUgsdUZBQXVGLGlKQUFpSix5Q0FBeUMsd0hBQXdILGdHQUFnRyxnSkFBZ0osZ0NBQWdDLFlBQVksNkNBQTZDLGdEQUFnRCxhQUFhLHdEQUF3RCxnQ0FBZ0MsbUJBQW1CLG1EQUFtRCxnQ0FBZ0MsV0FBVywyQ0FBMkMsc0NBQXNDLHdCQUF3Qix3REFBd0QsMkRBQTJELFVBQVUsOEVBQThFLDREQUE0RCxVQUFVLHVGQUF1Riw2REFBNkQsVUFBVSxnRkFBZ0YsOERBQThELFVBQVUseUZBQXlGLDZEQUE2RCxhQUFhLCtEQUErRCwrREFBK0QsYUFBYSxpRUFBaUUsbURBQW1ELFdBQVcsaURBQWlELFlBQVksa0RBQWtELHFEQUFxRCxXQUFXLG1EQUFtRCxZQUFZLG9EQUFvRCw2S0FBNksseUJBQXlCLHVHQUF1RyxxSkFBcUoseUJBQXlCLHVHQUF1Ryx1SkFBdUoseUJBQXlCLHlHQUF5RyxpTEFBaUwseUJBQXlCLCtFQUErRSx5SkFBeUoseUJBQXlCLCtFQUErRSwySkFBMkoseUJBQXlCLGlGQUFpRiw4TUFBOE0sYUFBYSxtRUFBbUUsOE5BQThOLHlCQUF5QixhQUFhLG1FQUFtRSxxR0FBcUcsZ0NBQWdDLDRHQUE0Ryx5QkFBeUIsWUFBWSxvRUFBb0Usb0VBQW9FLG9GQUFvRixrTkFBa04sYUFBYSxxRUFBcUUsa09BQWtPLHlCQUF5QixhQUFhLHFFQUFxRSx1R0FBdUcsZ0NBQWdDLDhHQUE4Ryx5QkFBeUIsWUFBWSxzRUFBc0Usc0VBQXNFLHNGQUFzRixnQ0FBZ0MsWUFBWSxnREFBZ0QsV0FBVywrQ0FBK0MsK0JBQStCLFlBQVksNENBQTRDLHdDQUF3QyxhQUFhLHVEQUF1RCw4Q0FBOEMsbUJBQW1CLDJEQUEyRCw2RUFBNkUsbUJBQW1CLGlFQUFpRSxpRUFBaUUsbUJBQW1CLGlFQUFpRSxxREFBcUQsbUJBQW1CLG1FQUFtRSwrQ0FBK0MsbUJBQW1CLG9FQUFvRSwrQ0FBK0MsbUJBQW1CLDZEQUE2RCw4RUFBOEUsbUJBQW1CLG1FQUFtRSxrRUFBa0UsbUJBQW1CLG1FQUFtRSxzREFBc0QsbUJBQW1CLHFFQUFxRSxnREFBZ0QsbUJBQW1CLHNFQUFzRSwrQkFBK0Isa0JBQWtCLGlEQUFpRCx1RUFBdUUseUNBQXlDLDBDQUEwQyxnREFBZ0QsVUFBVSxxREFBcUQsMkRBQTJELGdCQUFnQix1REFBdUQsNERBQTRELGNBQWMsOERBQThELDZEQUE2RCxnQkFBZ0IseURBQXlELDhEQUE4RCxjQUFjLGdFQUFnRSw2REFBNkQsVUFBVSw0REFBNEQsK0RBQStELFVBQVUsOERBQThELHdDQUF3QyxVQUFVLHFEQUFxRCxXQUFXLHlDQUF5QywrQ0FBK0MsK0NBQStDLGlEQUFpRCxvREFBb0QsMENBQTBDLGdEQUFnRCxnREFBZ0Qsa0RBQWtELGtEQUFrRCxrREFBa0QsdURBQXVELHNIQUFzSCx5QkFBeUIsY0FBYywrQkFBK0IscURBQXFELGlCQUFpQix1REFBdUQsZ0JBQWdCLG1EQUFtRCxVQUFVLHlCQUF5QixjQUFjLDJEQUEyRCxVQUFVLFdBQVcsYUFBYSxTQUFTLG1CQUFtQixZQUFZLGVBQWUsK0JBQStCLDhCQUE4Qiw4QkFBOEIsZ0NBQWdDLCtCQUErQiwrQkFBK0IscUNBQXFDLHVDQUF1Qyx3Q0FBd0MsMkNBQTJDLDRDQUE0QyxzREFBc0QseURBQXlELGlEQUFpRCxpREFBaUQsbURBQW1ELCtCQUErQixlQUFlLG9CQUFvQiwrQkFBK0IsYUFBYTs7QUFFbmlsQjtBQUNBO0FBQ0EsSUFBSSxxREFBZ0I7QUFDcEIseUJBQXlCLHFEQUFXO0FBQ3BDLHFDQUFxQywrREFBZ0IsR0FBRztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQjtBQUNqQyx3QkFBd0IsdURBQWlCO0FBQ3pDO0FBQ0Esd0JBQXdCLHFEQUFVO0FBQ2xDO0FBQ0EsS0FBSztBQUNMLDBCQUEwQixxREFBVTtBQUNwQyxZQUFZLHFEQUFDLENBQUMsaURBQUksSUFBSSxnR0FBZ0csRUFBRSxxREFBQyxhQUFhLGtLQUFrSyxFQUFFLHFEQUFDLFVBQVUsNEJBQTRCLEdBQUcscURBQUMsVUFBVSxtQ0FBbUMsRUFBRSxxREFBQyxVQUFVLDZCQUE2QixFQUFFLHFEQUFDLFVBQVUsNkJBQTZCLE1BQU0scURBQUMsWUFBWSw2REFBNkQsRUFBRSxxREFBQztBQUN6aUI7QUFDQSxhQUFhLE9BQU8scURBQVU7QUFDOUIsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vZWxlbWVudHMvZGlzdC9lc20vaW5vLXN3aXRjaC5lbnRyeS5qcz80NmFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ3JhZnRlZCB3aXRoIOKdpCBieSBpbm92ZXggR21iSFxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGMgYXMgY3JlYXRlRXZlbnQsIGgsIEggYXMgSG9zdCwgZyBhcyBnZXRFbGVtZW50IH0gZnJvbSAnLi9pbmRleC1kYmI5YWIxOS5qcyc7XG5pbXBvcnQgeyBjIGFzIGNsYXNzbmFtZXMgfSBmcm9tICcuL2luZGV4LWI3ZTViMGM1LmpzJztcbmltcG9ydCB7IGEgYXMgZ2VuZXJhdGVVbmlxdWVJZCB9IGZyb20gJy4vY29tcG9uZW50LXV0aWxzLTFjNGFlN2JlLmpzJztcbmltcG9ydCB7IHIgYXMgcmVuZGVySGlkZGVuSW5wdXQgfSBmcm9tICcuL2hlbHBlcnMtMjg5ZGQwMTYuanMnO1xuaW1wb3J0IHsgYSBhcyBfX2Fzc2lnbiwgYiBhcyBfX3ZhbHVlcywgXyBhcyBfX2V4dGVuZHMsIGQgYXMgX19zcHJlYWRBcnJheSwgZSBhcyBfX3JlYWQsIE0gYXMgTURDRm91bmRhdGlvbiwgYyBhcyBNRENDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC05N2M4ZmVmOS5qcyc7XG5pbXBvcnQgeyBNIGFzIE1EQ1JpcHBsZSwgYiBhcyBNRENSaXBwbGVGb3VuZGF0aW9uIH0gZnJvbSAnLi9jb21wb25lbnQtNzgwYTU4ODIuanMnO1xuaW1wb3J0ICcuL19jb21tb25qc0hlbHBlcnMtMjEyZDU2N2EuanMnO1xuaW1wb3J0ICcuL3BvbnlmaWxsLTQ5NWVjMzJkLmpzJztcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG4vKipcbiAqIENTUyBjbGFzc2VzIHVzZWQgZm9yIHN3aXRjaC5cbiAqL1xudmFyIENzc0NsYXNzZXM7XG4oZnVuY3Rpb24gKENzc0NsYXNzZXMpIHtcbiAgICBDc3NDbGFzc2VzW1wiUFJPQ0VTU0lOR1wiXSA9IFwibWRjLXN3aXRjaC0tcHJvY2Vzc2luZ1wiO1xuICAgIENzc0NsYXNzZXNbXCJTRUxFQ1RFRFwiXSA9IFwibWRjLXN3aXRjaC0tc2VsZWN0ZWRcIjtcbiAgICBDc3NDbGFzc2VzW1wiVU5TRUxFQ1RFRFwiXSA9IFwibWRjLXN3aXRjaC0tdW5zZWxlY3RlZFwiO1xufSkoQ3NzQ2xhc3NlcyB8fCAoQ3NzQ2xhc3NlcyA9IHt9KSk7XG4vKipcbiAqIFF1ZXJ5IHNlbGVjdG9ycyB1c2VkIGZvciBzd2l0Y2guXG4gKi9cbnZhciBTZWxlY3RvcnM7XG4oZnVuY3Rpb24gKFNlbGVjdG9ycykge1xuICAgIFNlbGVjdG9yc1tcIlJJUFBMRVwiXSA9IFwiLm1kYy1zd2l0Y2hfX3JpcHBsZVwiO1xufSkoU2VsZWN0b3JzIHx8IChTZWxlY3RvcnMgPSB7fSkpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbi8qKlxuICogT2JzZXJ2ZSBhIHRhcmdldCdzIHByb3BlcnR5IGZvciBjaGFuZ2VzLiBXaGVuIGEgcHJvcGVydHkgY2hhbmdlcywgdGhlXG4gKiBwcm92aWRlZCBgT2JzZXJ2ZXJgIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGN1cnJlbnQgYW5kXG4gKiBwcmV2aW91cyB2YWx1ZXMuXG4gKlxuICogVGhlIHJldHVybmVkIGNsZWFudXAgZnVuY3Rpb24gd2lsbCBzdG9wIGxpc3RlbmluZyB0byBjaGFuZ2VzIGZvciB0aGVcbiAqIHByb3ZpZGVkIGBPYnNlcnZlcmAuXG4gKlxuICogQHRlbXBsYXRlIFQgVGhlIG9ic2VydmVkIHRhcmdldCB0eXBlLlxuICogQHRlbXBsYXRlIEsgVGhlIG9ic2VydmVkIHByb3BlcnR5LlxuICogQHBhcmFtIHRhcmdldCAtIFRoZSB0YXJnZXQgdG8gb2JzZXJ2ZS5cbiAqIEBwYXJhbSBwcm9wZXJ0eSAtIFRoZSBwcm9wZXJ0eSBvZiB0aGUgdGFyZ2V0IHRvIG9ic2VydmUuXG4gKiBAcGFyYW0gb2JzZXJ2ZXIgLSBBbiBvYnNlcnZlciBmdW5jdGlvbiB0byBpbnZva2UgZWFjaCB0aW1lIHRoZSBwcm9wZXJ0eVxuICogICAgIGNoYW5nZXMuXG4gKiBAcmV0dXJuIEEgY2xlYW51cCBmdW5jdGlvbiB0aGF0IHdpbGwgc3RvcCBvYnNlcnZpbmcgY2hhbmdlcyBmb3IgdGhlIHByb3ZpZGVkXG4gKiAgICAgYE9ic2VydmVyYC5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIG9ic2VydmVyKSB7XG4gICAgdmFyIHRhcmdldE9ic2VydmVycyA9IGluc3RhbGxPYnNlcnZlcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgICB2YXIgb2JzZXJ2ZXJzID0gdGFyZ2V0T2JzZXJ2ZXJzLmdldE9ic2VydmVycyhwcm9wZXJ0eSk7XG4gICAgb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9ic2VydmVycy5zcGxpY2Uob2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpLCAxKTtcbiAgICB9O1xufVxuLyoqXG4gKiBBIE1hcCBvZiBhbGwgYFRhcmdldE9ic2VydmVyc2AgdGhhdCBoYXZlIGJlZW4gaW5zdGFsbGVkLlxuICovXG52YXIgYWxsVGFyZ2V0T2JzZXJ2ZXJzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogSW5zdGFsbHMgYSBgVGFyZ2V0T2JzZXJ2ZXJzYCBmb3IgdGhlIHByb3ZpZGVkIHRhcmdldCAoaWYgbm90IGFscmVhZHlcbiAqIGluc3RhbGxlZCksIGFuZCByZXBsYWNlcyB0aGUgZ2l2ZW4gcHJvcGVydHkgd2l0aCBhIGdldHRlciBhbmQgc2V0dGVyIHRoYXRcbiAqIHdpbGwgcmVzcG9uZCB0byBjaGFuZ2VzIGFuZCBjYWxsIGBUYXJnZXRPYnNlcnZlcnNgLlxuICpcbiAqIFN1YnNlcXVlbnQgY2FsbHMgdG8gYGluc3RhbGxPYnNlcnZlcigpYCB3aXRoIHRoZSBzYW1lIHRhcmdldCBhbmQgcHJvcGVydHlcbiAqIHdpbGwgbm90IG92ZXJyaWRlIHRoZSBwcm9wZXJ0eSdzIHByZXZpb3VzbHkgaW5zdGFsbGVkIGdldHRlci9zZXR0ZXIuXG4gKlxuICogQHRlbXBsYXRlIFQgVGhlIG9ic2VydmVkIHRhcmdldCB0eXBlLlxuICogQHRlbXBsYXRlIEsgVGhlIG9ic2VydmVkIHByb3BlcnR5IHRvIGNyZWF0ZSBhIGdldHRlci9zZXR0ZXIgZm9yLlxuICogQHBhcmFtIHRhcmdldCAtIFRoZSB0YXJnZXQgdG8gb2JzZXJ2ZS5cbiAqIEBwYXJhbSBwcm9wZXJ0eSAtIFRoZSBwcm9wZXJ0eSB0byBjcmVhdGUgYSBnZXR0ZXIvc2V0dGVyIGZvciwgaWYgbmVlZGVkLlxuICogQHJldHVybiBUaGUgaW5zdGFsbGVkIGBUYXJnZXRPYnNlcnZlcnNgIGZvciB0aGUgcHJvdmlkZWQgdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBpbnN0YWxsT2JzZXJ2ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIHZhciBvYnNlcnZlcnNNYXAgPSBuZXcgTWFwKCk7XG4gICAgaWYgKCFhbGxUYXJnZXRPYnNlcnZlcnMuaGFzKHRhcmdldCkpIHtcbiAgICAgICAgYWxsVGFyZ2V0T2JzZXJ2ZXJzLnNldCh0YXJnZXQsIHtcbiAgICAgICAgICAgIGlzRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIGdldE9ic2VydmVyczogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSBvYnNlcnZlcnNNYXAuZ2V0KGtleSkgfHwgW107XG4gICAgICAgICAgICAgICAgaWYgKCFvYnNlcnZlcnNNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJzTWFwLnNldChrZXksIG9ic2VydmVycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlcnM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5zdGFsbGVkUHJvcGVydGllczogbmV3IFNldCgpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgdGFyZ2V0T2JzZXJ2ZXJzID0gYWxsVGFyZ2V0T2JzZXJ2ZXJzLmdldCh0YXJnZXQpO1xuICAgIGlmICh0YXJnZXRPYnNlcnZlcnMuaW5zdGFsbGVkUHJvcGVydGllcy5oYXMocHJvcGVydHkpKSB7XG4gICAgICAgIC8vIFRoZSBnZXR0ZXIvc2V0dGVyIGhhcyBhbHJlYWR5IGJlZW4gcmVwbGFjZWQgZm9yIHRoaXMgcHJvcGVydHlcbiAgICAgICAgcmV0dXJuIHRhcmdldE9ic2VydmVycztcbiAgICB9XG4gICAgLy8gUmV0cmlldmUgKG9yIGNyZWF0ZSBpZiBpdCdzIGEgcGxhaW4gcHJvcGVydHkpIHRoZSBvcmlnaW5hbCBkZXNjcmlwdG9yIGZyb21cbiAgICAvLyB0aGUgdGFyZ2V0Li4uXG4gICAgdmFyIGRlc2NyaXB0b3IgPSBnZXREZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHkpIHx8IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdGFyZ2V0W3Byb3BlcnR5XSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9O1xuICAgIC8vIC4uLmFuZCBjcmVhdGUgYSBjb3B5IHRoYXQgd2lsbCBiZSB1c2VkIGZvciB0aGUgb2JzZXJ2ZXIuXG4gICAgdmFyIG9ic2VydmVkRGVzY3JpcHRvciA9IF9fYXNzaWduKHt9LCBkZXNjcmlwdG9yKTtcbiAgICB2YXIgZGVzY0dldCA9IGRlc2NyaXB0b3IuZ2V0LCBkZXNjU2V0ID0gZGVzY3JpcHRvci5zZXQ7XG4gICAgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgICAvLyBUaGUgZGVzY3JpcHRvciBpcyBhIHNpbXBsZSB2YWx1ZSAobm90IGEgZ2V0dGVyL3NldHRlcikuXG4gICAgICAgIC8vIEZvciBvdXIgb2JzZXJ2ZXIgZGVzY3JpcHRvciB0aGF0IHdlIGNvcGllZCwgZGVsZXRlIHRoZSB2YWx1ZS93cml0YWJsZVxuICAgICAgICAvLyBwcm9wZXJ0aWVzLCBzaW5jZSB0aGV5IGFyZSBpbmNvbXBhdGlibGUgd2l0aCB0aGUgZ2V0L3NldCBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIGZvciBkZXNjcmlwdG9ycy5cbiAgICAgICAgZGVsZXRlIG9ic2VydmVkRGVzY3JpcHRvci52YWx1ZTtcbiAgICAgICAgZGVsZXRlIG9ic2VydmVkRGVzY3JpcHRvci53cml0YWJsZTtcbiAgICAgICAgLy8gU2V0IHVwIGEgc2ltcGxlIGdldHRlci4uLlxuICAgICAgICB2YXIgdmFsdWVfMSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgIGRlc2NHZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZV8xOyB9O1xuICAgICAgICAvLyAuLi5hbmQgc2V0dGVyIChpZiB0aGUgb3JpZ2luYWwgcHJvcGVydHkgd2FzIHdyaXRhYmxlKS5cbiAgICAgICAgaWYgKGRlc2NyaXB0b3Iud3JpdGFibGUpIHtcbiAgICAgICAgICAgIGRlc2NTZXQgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZV8xID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkZXNjR2V0KSB7XG4gICAgICAgIG9ic2VydmVkRGVzY3JpcHRvci5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBgdGhpcyBhcyBUYCBuZWVkZWQgZm9yIGNsb3N1cmUgY29uZm9ybWFuY2VcbiAgICAgICAgICAgIHJldHVybiBkZXNjR2V0LmNhbGwodGhpcyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChkZXNjU2V0KSB7XG4gICAgICAgIG9ic2VydmVkRGVzY3JpcHRvci5zZXQgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlXzQsIF9hO1xuICAgICAgICAgICAgLy8gYHRodXMgYXMgVGAgbmVlZGVkIGZvciBjbG9zdXJlIGNvbmZvcm1hbmNlXG4gICAgICAgICAgICB2YXIgcHJldmlvdXMgPSBkZXNjR2V0ID8gZGVzY0dldC5jYWxsKHRoaXMpIDogbmV3VmFsdWU7XG4gICAgICAgICAgICBkZXNjU2V0LmNhbGwodGhpcywgbmV3VmFsdWUpO1xuICAgICAgICAgICAgaWYgKHRhcmdldE9ic2VydmVycy5pc0VuYWJsZWQgJiYgKCFkZXNjR2V0IHx8IG5ld1ZhbHVlICE9PSBwcmV2aW91cykpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRhcmdldE9ic2VydmVycy5nZXRPYnNlcnZlcnMocHJvcGVydHkpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihuZXdWYWx1ZSwgcHJldmlvdXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzRfMSkgeyBlXzQgPSB7IGVycm9yOiBlXzRfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzQpIHRocm93IGVfNC5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgdGFyZ2V0T2JzZXJ2ZXJzLmluc3RhbGxlZFByb3BlcnRpZXMuYWRkKHByb3BlcnR5KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgb2JzZXJ2ZWREZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdGFyZ2V0T2JzZXJ2ZXJzO1xufVxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGRlc2NyaXB0b3IgZm9yIGEgcHJvcGVydHkgZnJvbSB0aGUgcHJvdmlkZWQgdGFyZ2V0LiBUaGlzXG4gKiBmdW5jdGlvbiB3aWxsIHdhbGsgdXAgdGhlIHRhcmdldCdzIHByb3RvdHlwZSBjaGFpbiB0byBzZWFyY2ggZm9yIHRoZVxuICogZGVzY3JpcHRvci5cbiAqXG4gKiBAdGVtcGxhdGUgVCBUaGUgdGFyZ2V0IHR5cGUuXG4gKiBAdGVtcGxhdGUgSyBUaGUgcHJvcGVydHkgdHlwZS5cbiAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHRvIHJldHJpZXZlIGEgZGVzY3JpcHRvciBmcm9tLlxuICogQHBhcmFtIHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHJldHJpZXZlIGEgZGVzY3JpcHRvciBmb3IuXG4gKiBAcmV0dXJuIHRoZSBkZXNjcmlwdG9yLCBvciB1bmRlZmluZWQgaWYgaXQgZG9lcyBub3QgZXhpc3QuIEtlZXAgaW4gbWluZCB0aGF0XG4gKiAgICAgcGxhaW4gcHJvcGVydGllcyBtYXkgbm90IGhhdmUgYSBkZXNjcmlwdG9yIGRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGdldERlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIHZhciBkZXNjcmlwdG9yVGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHZhciBkZXNjcmlwdG9yO1xuICAgIHdoaWxlIChkZXNjcmlwdG9yVGFyZ2V0KSB7XG4gICAgICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRlc2NyaXB0b3JUYXJnZXQsIHByb3BlcnR5KTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdhbGsgdXAgdGhlIGluc3RhbmNlJ3MgcHJvdG90eXBlIGNoYWluIGluIGNhc2UgdGhlIHByb3BlcnR5IGlzIGRlY2xhcmVkXG4gICAgICAgIC8vIG9uIGEgc3VwZXJjbGFzcy5cbiAgICAgICAgZGVzY3JpcHRvclRhcmdldCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihkZXNjcmlwdG9yVGFyZ2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG59XG4vKipcbiAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgYWxsIG9ic2VydmVycyBmb3IgYSBwcm92aWRlZCB0YXJnZXQuIENoYW5nZXMgdG8gb2JzZXJ2ZWRcbiAqIHByb3BlcnRpZXMgd2lsbCBub3QgY2FsbCBhbnkgb2JzZXJ2ZXJzIHdoZW4gZGlzYWJsZWQuXG4gKlxuICogQHRlbXBsYXRlIFQgVGhlIG9ic2VydmVkIHRhcmdldCB0eXBlLlxuICogQHBhcmFtIHRhcmdldCAtIFRoZSB0YXJnZXQgdG8gZW5hYmxlIG9yIGRpc2FibGUgb2JzZXJ2ZXJzIGZvci5cbiAqIEBwYXJhbSBlbmFibGVkIC0gVHJ1ZSB0byBlbmFibGUgb3IgZmFsc2UgdG8gZGlzYWJsZSBvYnNlcnZlcnMuXG4gKi9cbmZ1bmN0aW9uIHNldE9ic2VydmVyc0VuYWJsZWQodGFyZ2V0LCBlbmFibGVkKSB7XG4gICAgdmFyIHRhcmdldE9ic2VydmVycyA9IGFsbFRhcmdldE9ic2VydmVycy5nZXQodGFyZ2V0KTtcbiAgICBpZiAodGFyZ2V0T2JzZXJ2ZXJzKSB7XG4gICAgICAgIHRhcmdldE9ic2VydmVycy5pc0VuYWJsZWQgPSBlbmFibGVkO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgTURDT2JzZXJ2ZXJGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENPYnNlcnZlckZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDT2JzZXJ2ZXJGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgYWRhcHRlcikgfHwgdGhpcztcbiAgICAgICAgLyoqIEEgc2V0IG9mIGNsZWFudXAgZnVuY3Rpb25zIHRvIHVub2JzZXJ2ZSBjaGFuZ2VzLiAqL1xuICAgICAgICBfdGhpcy51bm9ic2VydmVzID0gbmV3IFNldCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1EQ09ic2VydmVyRm91bmRhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMudW5vYnNlcnZlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBPYnNlcnZlIGEgdGFyZ2V0J3MgcHJvcGVydGllcyBmb3IgY2hhbmdlcyB1c2luZyB0aGUgcHJvdmlkZWQgbWFwIG9mXG4gICAgICogcHJvcGVydHkgbmFtZXMgYW5kIG9ic2VydmVyIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEB0ZW1wbGF0ZSBUIFRoZSB0YXJnZXQgdHlwZS5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIHRhcmdldCB0byBvYnNlcnZlLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlcnMgLSBBbiBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgdGFyZ2V0IHByb3BlcnRpZXMgYW5kIHZhbHVlc1xuICAgICAqICAgICBhcmUgb2JzZXJ2ZXIgZnVuY3Rpb25zIHRoYXQgYXJlIGNhbGxlZCB3aGVuIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5XG4gICAgICogICAgIGNoYW5nZXMuXG4gICAgICogQHJldHVybiBBIGNsZWFudXAgZnVuY3Rpb24gdGhhdCBjYW4gYmUgY2FsbGVkIHRvIHVub2JzZXJ2ZSB0aGVcbiAgICAgKiAgICAgdGFyZ2V0LlxuICAgICAqL1xuICAgIE1EQ09ic2VydmVyRm91bmRhdGlvbi5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIG9ic2VydmVycykge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNsZWFudXAgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoT2JqZWN0LmtleXMob2JzZXJ2ZXJzKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHkgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBvYnNlcnZlcnNbcHJvcGVydHldLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgY2xlYW51cC5wdXNoKHRoaXMub2JzZXJ2ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIG9ic2VydmVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdW5vYnNlcnZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVfMiwgX2E7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGNsZWFudXBfMSA9IF9fdmFsdWVzKGNsZWFudXApLCBjbGVhbnVwXzFfMSA9IGNsZWFudXBfMS5uZXh0KCk7ICFjbGVhbnVwXzFfMS5kb25lOyBjbGVhbnVwXzFfMSA9IGNsZWFudXBfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsZWFudXBGbiA9IGNsZWFudXBfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwRm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsZWFudXBfMV8xICYmICFjbGVhbnVwXzFfMS5kb25lICYmIChfYSA9IGNsZWFudXBfMS5yZXR1cm4pKSBfYS5jYWxsKGNsZWFudXBfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnVub2JzZXJ2ZXMuZGVsZXRlKHVub2JzZXJ2ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudW5vYnNlcnZlcy5hZGQodW5vYnNlcnZlKTtcbiAgICAgICAgcmV0dXJuIHVub2JzZXJ2ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE9ic2VydmUgYSB0YXJnZXQncyBwcm9wZXJ0eSBmb3IgY2hhbmdlcy4gV2hlbiBhIHByb3BlcnR5IGNoYW5nZXMsIHRoZVxuICAgICAqIHByb3ZpZGVkIGBPYnNlcnZlcmAgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggdGhlIHByb3BlcnRpZXMgY3VycmVudFxuICAgICAqIGFuZCBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgcmV0dXJuZWQgY2xlYW51cCBmdW5jdGlvbiB3aWxsIHN0b3AgbGlzdGVuaW5nIHRvIGNoYW5nZXMgZm9yIHRoZVxuICAgICAqIHByb3ZpZGVkIGBPYnNlcnZlcmAuXG4gICAgICpcbiAgICAgKiBAdGVtcGxhdGUgVCBUaGUgb2JzZXJ2ZWQgdGFyZ2V0IHR5cGUuXG4gICAgICogQHRlbXBsYXRlIEsgVGhlIG9ic2VydmVkIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHRvIG9ic2VydmUuXG4gICAgICogQHBhcmFtIHByb3BlcnR5IC0gVGhlIHByb3BlcnR5IG9mIHRoZSB0YXJnZXQgdG8gb2JzZXJ2ZS5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZXIgLSBBbiBvYnNlcnZlciBmdW5jdGlvbiB0byBpbnZva2UgZWFjaCB0aW1lIHRoZSBwcm9wZXJ0eVxuICAgICAqICAgICBjaGFuZ2VzLlxuICAgICAqIEByZXR1cm4gQSBjbGVhbnVwIGZ1bmN0aW9uIHRoYXQgd2lsbCBzdG9wIG9ic2VydmluZyBjaGFuZ2VzIGZvciB0aGVcbiAgICAgKiAgICAgcHJvdmlkZWQgYE9ic2VydmVyYC5cbiAgICAgKi9cbiAgICBNRENPYnNlcnZlckZvdW5kYXRpb24ucHJvdG90eXBlLm9ic2VydmVQcm9wZXJ0eSA9IGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5LCBvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIG9ic2VydmVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgYWxsIG9ic2VydmVycyBmb3IgdGhlIHByb3ZpZGVkIHRhcmdldC4gRGlzYWJsaW5nXG4gICAgICogb2JzZXJ2ZXJzIHdpbGwgcHJldmVudCB0aGVtIGZyb20gYmVpbmcgY2FsbGVkIHVudGlsIHRoZXkgYXJlIHJlLWVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIHRhcmdldCB0byBlbmFibGUgb3IgZGlzYWJsZSBvYnNlcnZlcnMgZm9yLlxuICAgICAqIEBwYXJhbSBlbmFibGVkIC0gV2hldGhlciBvciBub3Qgb2JzZXJ2ZXJzIHNob3VsZCBiZSBjYWxsZWQuXG4gICAgICovXG4gICAgTURDT2JzZXJ2ZXJGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRPYnNlcnZlcnNFbmFibGVkID0gZnVuY3Rpb24gKHRhcmdldCwgZW5hYmxlZCkge1xuICAgICAgICBzZXRPYnNlcnZlcnNFbmFibGVkKHRhcmdldCwgZW5hYmxlZCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbGVhbiB1cCBhbGwgb2JzZXJ2ZXJzIGFuZCBzdG9wIGxpc3RlbmluZyBmb3IgcHJvcGVydHkgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBNRENPYnNlcnZlckZvdW5kYXRpb24ucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMywgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgYSBjb3B5IHNpbmNlIHVub2JzZXJ2ZSgpIHdpbGwgcmVtb3ZlIHRoZW1zZWx2ZXMgZnJvbSB0aGUgc2V0XG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZCh0aGlzLnVub2JzZXJ2ZXMpKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdW5vYnNlcnZlID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgdW5vYnNlcnZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfM18xKSB7IGVfMyA9IHsgZXJyb3I6IGVfM18xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ09ic2VydmVyRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbi8qKlxuICogYE1EQ1N3aXRjaEZvdW5kYXRpb25gIHByb3ZpZGVzIGEgc3RhdGUtb25seSBmb3VuZGF0aW9uIGZvciBhIHN3aXRjaFxuICogY29tcG9uZW50LlxuICpcbiAqIFN0YXRlIG9ic2VydmVycyBhbmQgZXZlbnQgaGFuZGxlciBlbnRyeXBvaW50cyB1cGRhdGUgYSBjb21wb25lbnQncyBhZGFwdGVyJ3NcbiAqIHN0YXRlIHdpdGggdGhlIGxvZ2ljIG5lZWRlZCBmb3Igc3dpdGNoIHRvIGZ1bmN0aW9uLlxuICovXG52YXIgTURDU3dpdGNoRm91bmRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDU3dpdGNoRm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENTd2l0Y2hGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgYWRhcHRlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFuZGxlQ2xpY2sgPSBfdGhpcy5oYW5kbGVDbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgZm91bmRhdGlvbiBhbmQgc3RhcnRzIG9ic2VydmluZyBzdGF0ZSBjaGFuZ2VzLlxuICAgICAqL1xuICAgIE1EQ1N3aXRjaEZvdW5kYXRpb24ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZSh0aGlzLmFkYXB0ZXIuc3RhdGUsIHtcbiAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnN0b3BQcm9jZXNzaW5nSWZEaXNhYmxlZCxcbiAgICAgICAgICAgIHByb2Nlc3Npbmc6IHRoaXMuc3RvcFByb2Nlc3NpbmdJZkRpc2FibGVkLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIHN3aXRjaCBjbGljayBldmVudHMuIENsaWNraW5nIG9uIGEgc3dpdGNoIHdpbGwgdG9nZ2xlIGl0c1xuICAgICAqIHNlbGVjdGVkIHN0YXRlLlxuICAgICAqL1xuICAgIE1EQ1N3aXRjaEZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5hZGFwdGVyLnN0YXRlLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGFwdGVyLnN0YXRlLnNlbGVjdGVkID0gIXRoaXMuYWRhcHRlci5zdGF0ZS5zZWxlY3RlZDtcbiAgICB9O1xuICAgIE1EQ1N3aXRjaEZvdW5kYXRpb24ucHJvdG90eXBlLnN0b3BQcm9jZXNzaW5nSWZEaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWRhcHRlci5zdGF0ZS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnN0YXRlLnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ1N3aXRjaEZvdW5kYXRpb247XG59KE1EQ09ic2VydmVyRm91bmRhdGlvbikpO1xuLyoqXG4gKiBgTURDU3dpdGNoUmVuZGVyRm91bmRhdGlvbmAgcHJvdmlkZXMgYSBzdGF0ZSBhbmQgcmVuZGVyaW5nIGZvdW5kYXRpb24gZm9yIGFcbiAqIHN3aXRjaCBjb21wb25lbnQuXG4gKlxuICogU3RhdGUgb2JzZXJ2ZXJzIGFuZCBldmVudCBoYW5kbGVyIGVudHJ5cG9pbnRzIHVwZGF0ZSBhIGNvbXBvbmVudCdzXG4gKiBhZGFwdGVyJ3Mgc3RhdGUgd2l0aCB0aGUgbG9naWMgbmVlZGVkIGZvciBzd2l0Y2ggdG8gZnVuY3Rpb24uXG4gKlxuICogSW4gcmVzcG9uc2UgdG8gc3RhdGUgY2hhbmdlcywgdGhlIHJlbmRlcmluZyBmb3VuZGF0aW9uIHVzZXMgdGhlIGNvbXBvbmVudCdzXG4gKiByZW5kZXIgYWRhcHRlciB0byBrZWVwIHRoZSBjb21wb25lbnQncyBET00gdXBkYXRlZCB3aXRoIHRoZSBzdGF0ZS5cbiAqL1xudmFyIE1EQ1N3aXRjaFJlbmRlckZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ1N3aXRjaFJlbmRlckZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDU3dpdGNoUmVuZGVyRm91bmRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgZm91bmRhdGlvbiBhbmQgc3RhcnRzIG9ic2VydmluZyBzdGF0ZSBjaGFuZ2VzLlxuICAgICAqL1xuICAgIE1EQ1N3aXRjaFJlbmRlckZvdW5kYXRpb24ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm9ic2VydmUodGhpcy5hZGFwdGVyLnN0YXRlLCB7XG4gICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5vbkRpc2FibGVkQ2hhbmdlLFxuICAgICAgICAgICAgcHJvY2Vzc2luZzogdGhpcy5vblByb2Nlc3NpbmdDaGFuZ2UsXG4gICAgICAgICAgICBzZWxlY3RlZDogdGhpcy5vblNlbGVjdGVkQ2hhbmdlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBmb3VuZGF0aW9uIGZyb20gYSBzZXJ2ZXIgc2lkZSByZW5kZXJlZCAoU1NSKSBjb21wb25lbnQuXG4gICAgICogVGhpcyB3aWxsIHN5bmMgdGhlIGFkYXB0ZXIncyBzdGF0ZSB3aXRoIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBET00uXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGFmdGVyIGBpbml0KClgLlxuICAgICAqL1xuICAgIE1EQ1N3aXRjaFJlbmRlckZvdW5kYXRpb24ucHJvdG90eXBlLmluaXRGcm9tRE9NID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUdXJuIG9mZiBvYnNlcnZlcnMgd2hpbGUgc2V0dGluZyBzdGF0ZVxuICAgICAgICB0aGlzLnNldE9ic2VydmVyc0VuYWJsZWQodGhpcy5hZGFwdGVyLnN0YXRlLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zdGF0ZS5zZWxlY3RlZCA9IHRoaXMuYWRhcHRlci5oYXNDbGFzcyhDc3NDbGFzc2VzLlNFTEVDVEVEKTtcbiAgICAgICAgLy8gRW5zdXJlIGFyaWEtY2hlY2tlZCBpcyBzZXQgaWYgYXR0cmlidXRlIGlzIG5vdCBwcmVzZW50XG4gICAgICAgIHRoaXMub25TZWxlY3RlZENoYW5nZSgpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc3RhdGUuZGlzYWJsZWQgPSB0aGlzLmFkYXB0ZXIuaXNEaXNhYmxlZCgpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc3RhdGUucHJvY2Vzc2luZyA9XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuaGFzQ2xhc3MoQ3NzQ2xhc3Nlcy5QUk9DRVNTSU5HKTtcbiAgICAgICAgLy8gUmUtb2JzZXJ2ZSBzdGF0ZVxuICAgICAgICB0aGlzLnNldE9ic2VydmVyc0VuYWJsZWQodGhpcy5hZGFwdGVyLnN0YXRlLCB0cnVlKTtcbiAgICAgICAgdGhpcy5zdG9wUHJvY2Vzc2luZ0lmRGlzYWJsZWQoKTtcbiAgICB9O1xuICAgIE1EQ1N3aXRjaFJlbmRlckZvdW5kYXRpb24ucHJvdG90eXBlLm9uRGlzYWJsZWRDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXREaXNhYmxlZCh0aGlzLmFkYXB0ZXIuc3RhdGUuZGlzYWJsZWQpO1xuICAgIH07XG4gICAgTURDU3dpdGNoUmVuZGVyRm91bmRhdGlvbi5wcm90b3R5cGUub25Qcm9jZXNzaW5nQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRvZ2dsZUNsYXNzKHRoaXMuYWRhcHRlci5zdGF0ZS5wcm9jZXNzaW5nLCBDc3NDbGFzc2VzLlBST0NFU1NJTkcpO1xuICAgIH07XG4gICAgTURDU3dpdGNoUmVuZGVyRm91bmRhdGlvbi5wcm90b3R5cGUub25TZWxlY3RlZENoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldEFyaWFDaGVja2VkKFN0cmluZyh0aGlzLmFkYXB0ZXIuc3RhdGUuc2VsZWN0ZWQpKTtcbiAgICAgICAgdGhpcy50b2dnbGVDbGFzcyh0aGlzLmFkYXB0ZXIuc3RhdGUuc2VsZWN0ZWQsIENzc0NsYXNzZXMuU0VMRUNURUQpO1xuICAgICAgICB0aGlzLnRvZ2dsZUNsYXNzKCF0aGlzLmFkYXB0ZXIuc3RhdGUuc2VsZWN0ZWQsIENzc0NsYXNzZXMuVU5TRUxFQ1RFRCk7XG4gICAgfTtcbiAgICBNRENTd2l0Y2hSZW5kZXJGb3VuZGF0aW9uLnByb3RvdHlwZS50b2dnbGVDbGFzcyA9IGZ1bmN0aW9uIChhZGRDbGFzcywgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChhZGRDbGFzcykge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ1N3aXRjaFJlbmRlckZvdW5kYXRpb247XG59KE1EQ1N3aXRjaEZvdW5kYXRpb24pKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG4vKipcbiAqIGBNRENTd2l0Y2hgIHByb3ZpZGVzIGEgY29tcG9uZW50IGltcGxlbWVudGF0aW9uIG9mIGEgTWF0ZXJpYWwgRGVzaWduIHN3aXRjaC5cbiAqL1xudmFyIE1EQ1N3aXRjaCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDU3dpdGNoLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1N3aXRjaChyb290LCBmb3VuZGF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHJvb3QsIGZvdW5kYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnJvb3QgPSByb290O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYE1EQ1N3aXRjaGAgYW5kIGF0dGFjaGVzIGl0IHRvIHRoZSBnaXZlbiByb290IGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHJvb3QgVGhlIHJvb3QgdG8gYXR0YWNoIHRvLlxuICAgICAqIEByZXR1cm4gdGhlIG5ldyBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgTURDU3dpdGNoLmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENTd2l0Y2gocm9vdCk7XG4gICAgfTtcbiAgICBNRENTd2l0Y2gucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmlwcGxlID0gbmV3IE1EQ1JpcHBsZSh0aGlzLnJvb3QsIHRoaXMuY3JlYXRlUmlwcGxlRm91bmRhdGlvbigpKTtcbiAgICB9O1xuICAgIE1EQ1N3aXRjaC5wcm90b3R5cGUuaW5pdGlhbFN5bmNXaXRoRE9NID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmlwcGxlRWxlbWVudCA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5SSVBQTEUpO1xuICAgICAgICBpZiAoIXJpcHBsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN3aXRjaCBcIiArIFNlbGVjdG9ycy5SSVBQTEUgKyBcIiBlbGVtZW50IGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJpcHBsZUVsZW1lbnQgPSByaXBwbGVFbGVtZW50O1xuICAgICAgICB0aGlzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmZvdW5kYXRpb24uaGFuZGxlQ2xpY2spO1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uaW5pdEZyb21ET00oKTtcbiAgICB9O1xuICAgIE1EQ1N3aXRjaC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMucmlwcGxlLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yb290LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5mb3VuZGF0aW9uLmhhbmRsZUNsaWNrKTtcbiAgICB9O1xuICAgIE1EQ1N3aXRjaC5wcm90b3R5cGUuZ2V0RGVmYXVsdEZvdW5kYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTURDU3dpdGNoUmVuZGVyRm91bmRhdGlvbih0aGlzLmNyZWF0ZUFkYXB0ZXIoKSk7XG4gICAgfTtcbiAgICBNRENTd2l0Y2gucHJvdG90eXBlLmNyZWF0ZUFkYXB0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJvb3QuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgaXNEaXNhYmxlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucm9vdC5kaXNhYmxlZDsgfSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0QXJpYUNoZWNrZWQ6IGZ1bmN0aW9uIChhcmlhQ2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yb290LnNldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJywgYXJpYUNoZWNrZWQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldERpc2FibGVkOiBmdW5jdGlvbiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yb290LmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGU6IHRoaXMsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBNRENTd2l0Y2gucHJvdG90eXBlLmNyZWF0ZVJpcHBsZUZvdW5kYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTURDUmlwcGxlRm91bmRhdGlvbih0aGlzLmNyZWF0ZVJpcHBsZUFkYXB0ZXIoKSk7XG4gICAgfTtcbiAgICBNRENTd2l0Y2gucHJvdG90eXBlLmNyZWF0ZVJpcHBsZUFkYXB0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgTURDUmlwcGxlLmNyZWF0ZUFkYXB0ZXIodGhpcykpLCB7IGNvbXB1dGVCb3VuZGluZ1JlY3Q6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJpcHBsZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IH0sIGlzVW5ib3VuZGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1N3aXRjaDtcbn0oTURDQ29tcG9uZW50KSk7XG5cbmNvbnN0IGlub1N3aXRjaENzcyA9IFwiLm1kYy1lbGV2YXRpb24tb3ZlcmxheXtwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXItcmFkaXVzOmluaGVyaXQ7cG9pbnRlci1ldmVudHM6bm9uZTtvcGFjaXR5OjA7b3BhY2l0eTp2YXIoLS1tZGMtZWxldmF0aW9uLW92ZXJsYXktb3BhY2l0eSwgMCk7dHJhbnNpdGlvbjpvcGFjaXR5IDI4MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6dmFyKC0tbWRjLWVsZXZhdGlvbi1vdmVybGF5LWNvbG9yLCAjZmZmKX0ubWRjLXN3aXRjaHthbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZDpub25lO2JvcmRlcjpub25lO2N1cnNvcjpwb2ludGVyO2Rpc3BsYXk6aW5saW5lLWZsZXg7ZmxleC1zaHJpbms6MDttYXJnaW46MDtvdXRsaW5lOm5vbmU7b3ZlcmZsb3c6dmlzaWJsZTtwYWRkaW5nOjA7cG9zaXRpb246cmVsYXRpdmV9Lm1kYy1zd2l0Y2g6ZGlzYWJsZWR7Y3Vyc29yOmRlZmF1bHQ7cG9pbnRlci1ldmVudHM6bm9uZX0ubWRjLXN3aXRjaF9fdHJhY2t7b3ZlcmZsb3c6aGlkZGVuO3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCV9Lm1kYy1zd2l0Y2hfX3RyYWNrOjpiZWZvcmUsLm1kYy1zd2l0Y2hfX3RyYWNrOjphZnRlcntib3JkZXI6MXB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6aW5oZXJpdDtib3gtc2l6aW5nOmJvcmRlci1ib3g7Y29udGVudDpcXFwiXFxcIjtoZWlnaHQ6MTAwJTtsZWZ0OjA7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJX0ubWRjLXN3aXRjaF9fdHJhY2s6OmJlZm9yZXt0cmFuc2l0aW9uOnRyYW5zZm9ybSA3NW1zIDBtcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0ubWRjLXN3aXRjaF9fdHJhY2s6OmFmdGVye3RyYW5zaXRpb246dHJhbnNmb3JtIDc1bXMgMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwMCUpfVtkaXI9cnRsXSAubWRjLXN3aXRjaF9fdHJhY2s6OmFmdGVyLC5tZGMtc3dpdGNoX190cmFja1tkaXI9cnRsXTo6YWZ0ZXJ7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSk7fS5tZGMtc3dpdGNoLS1zZWxlY3RlZCAubWRjLXN3aXRjaF9fdHJhY2s6OmJlZm9yZXt0cmFuc2l0aW9uOnRyYW5zZm9ybSA3NW1zIDBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpfVtkaXI9cnRsXSAubWRjLXN3aXRjaC0tc2VsZWN0ZWQgLm1kYy1zd2l0Y2hfX3RyYWNrOjpiZWZvcmUsLm1kYy1zd2l0Y2gtLXNlbGVjdGVkIC5tZGMtc3dpdGNoX190cmFja1tkaXI9cnRsXTo6YmVmb3Jle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKTt9Lm1kYy1zd2l0Y2gtLXNlbGVjdGVkIC5tZGMtc3dpdGNoX190cmFjazo6YWZ0ZXJ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gNzVtcyAwbXMgY3ViaWMtYmV6aWVyKDAsIDAsIDAuMiwgMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9Lm1kYy1zd2l0Y2hfX2hhbmRsZS10cmFja3toZWlnaHQ6MTAwJTtwb2ludGVyLWV2ZW50czpub25lO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3RyYW5zaXRpb246dHJhbnNmb3JtIDc1bXMgMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7bGVmdDowO3JpZ2h0OmF1dG87dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9W2Rpcj1ydGxdIC5tZGMtc3dpdGNoX19oYW5kbGUtdHJhY2ssLm1kYy1zd2l0Y2hfX2hhbmRsZS10cmFja1tkaXI9cnRsXXtsZWZ0OmF1dG87cmlnaHQ6MDt9Lm1kYy1zd2l0Y2gtLXNlbGVjdGVkIC5tZGMtc3dpdGNoX19oYW5kbGUtdHJhY2t7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSl9W2Rpcj1ydGxdIC5tZGMtc3dpdGNoLS1zZWxlY3RlZCAubWRjLXN3aXRjaF9faGFuZGxlLXRyYWNrLC5tZGMtc3dpdGNoLS1zZWxlY3RlZCAubWRjLXN3aXRjaF9faGFuZGxlLXRyYWNrW2Rpcj1ydGxde3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKTt9Lm1kYy1zd2l0Y2hfX2hhbmRsZXtkaXNwbGF5OmZsZXg7cG9pbnRlci1ldmVudHM6YXV0bztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01MCUpO2xlZnQ6MDtyaWdodDphdXRvfVtkaXI9cnRsXSAubWRjLXN3aXRjaF9faGFuZGxlLC5tZGMtc3dpdGNoX19oYW5kbGVbZGlyPXJ0bF17bGVmdDphdXRvO3JpZ2h0OjA7fS5tZGMtc3dpdGNoX19oYW5kbGU6OmJlZm9yZSwubWRjLXN3aXRjaF9faGFuZGxlOjphZnRlcntib3JkZXI6MXB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6aW5oZXJpdDtib3gtc2l6aW5nOmJvcmRlci1ib3g7Y29udGVudDpcXFwiXFxcIjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2xlZnQ6MDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgNzVtcyAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSwgYm9yZGVyLWNvbG9yIDc1bXMgMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7ei1pbmRleDotMX0ubWRjLXN3aXRjaF9fc2hhZG93e2JvcmRlci1yYWRpdXM6aW5oZXJpdDtib3R0b206MDtsZWZ0OjA7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDt0b3A6MH0ubWRjLWVsZXZhdGlvbi1vdmVybGF5e2JvdHRvbTowO2xlZnQ6MDtyaWdodDowO3RvcDowfS5tZGMtc3dpdGNoX19yaXBwbGV7bGVmdDo1MCU7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC01MCUpO3otaW5kZXg6LTF9Lm1kYy1zd2l0Y2g6ZGlzYWJsZWQgLm1kYy1zd2l0Y2hfX3JpcHBsZXtkaXNwbGF5Om5vbmV9Lm1kYy1zd2l0Y2hfX2ljb25ze2hlaWdodDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7ei1pbmRleDoxfS5tZGMtc3dpdGNoX19pY29ue2JvdHRvbTowO2xlZnQ6MDttYXJnaW46YXV0bztwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO3RvcDowO29wYWNpdHk6MDt0cmFuc2l0aW9uOm9wYWNpdHkgMzBtcyAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSl9Lm1kYy1zd2l0Y2gtLXNlbGVjdGVkIC5tZGMtc3dpdGNoX19pY29uLS1vbiwubWRjLXN3aXRjaC0tdW5zZWxlY3RlZCAubWRjLXN3aXRjaF9faWNvbi0tb2Zme29wYWNpdHk6MTt0cmFuc2l0aW9uOm9wYWNpdHkgNDVtcyAzMG1zIGN1YmljLWJlemllcigwLCAwLCAwLjIsIDEpfS5tZGMtc3dpdGNoey0tbWRjLXJpcHBsZS1mZy1zaXplOjA7LS1tZGMtcmlwcGxlLWxlZnQ6MDstLW1kYy1yaXBwbGUtdG9wOjA7LS1tZGMtcmlwcGxlLWZnLXNjYWxlOjE7LS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQ6MDstLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLXN0YXJ0OjA7LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOnJnYmEoMCwgMCwgMCwgMCk7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtLCBvcGFjaXR5fUBrZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1yYWRpdXMtaW57ZnJvbXthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1zdGFydCwgMCkpIHNjYWxlKDEpfXRve3RyYW5zZm9ybTp0cmFuc2xhdGUodmFyKC0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kLCAwKSkgc2NhbGUodmFyKC0tbWRjLXJpcHBsZS1mZy1zY2FsZSwgMSkpfX1Aa2V5ZnJhbWVzIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1pbntmcm9te2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO29wYWNpdHk6MH10b3tvcGFjaXR5OnZhcigtLW1kYy1yaXBwbGUtZmctb3BhY2l0eSwgMCl9fUBrZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LW91dHtmcm9te2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO29wYWNpdHk6dmFyKC0tbWRjLXJpcHBsZS1mZy1vcGFjaXR5LCAwKX10b3tvcGFjaXR5OjB9fS5tZGMtc3dpdGNoIC5tZGMtc3dpdGNoX19yaXBwbGU6OmJlZm9yZSwubWRjLXN3aXRjaCAubWRjLXN3aXRjaF9fcmlwcGxlOjphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXItcmFkaXVzOjUwJTtvcGFjaXR5OjA7cG9pbnRlci1ldmVudHM6bm9uZTtjb250ZW50OlxcXCJcXFwifS5tZGMtc3dpdGNoIC5tZGMtc3dpdGNoX19yaXBwbGU6OmJlZm9yZXt0cmFuc2l0aW9uOm9wYWNpdHkgMTVtcyBsaW5lYXIsIGJhY2tncm91bmQtY29sb3IgMTVtcyBsaW5lYXI7ei1pbmRleDoxO3otaW5kZXg6dmFyKC0tbWRjLXJpcHBsZS16LWluZGV4LCAxKX0ubWRjLXN3aXRjaCAubWRjLXN3aXRjaF9fcmlwcGxlOjphZnRlcnt6LWluZGV4OjA7ei1pbmRleDp2YXIoLS1tZGMtcmlwcGxlLXotaW5kZXgsIDApfS5tZGMtc3dpdGNoLm1kYy1yaXBwbGUtdXBncmFkZWQgLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YmVmb3Jle3RyYW5zZm9ybTpzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSl9Lm1kYy1zd2l0Y2gubWRjLXJpcHBsZS11cGdyYWRlZCAubWRjLXN3aXRjaF9fcmlwcGxlOjphZnRlcnt0b3A6MDtsZWZ0OjA7dHJhbnNmb3JtOnNjYWxlKDApO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcn0ubWRjLXN3aXRjaC5tZGMtcmlwcGxlLXVwZ3JhZGVkLS11bmJvdW5kZWQgLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YWZ0ZXJ7dG9wOnZhcigtLW1kYy1yaXBwbGUtdG9wLCAwKTtsZWZ0OnZhcigtLW1kYy1yaXBwbGUtbGVmdCwgMCl9Lm1kYy1zd2l0Y2gubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1hY3RpdmF0aW9uIC5tZGMtc3dpdGNoX19yaXBwbGU6OmFmdGVye2FuaW1hdGlvbjptZGMtcmlwcGxlLWZnLXJhZGl1cy1pbiAyMjVtcyBmb3J3YXJkcywgbWRjLXJpcHBsZS1mZy1vcGFjaXR5LWluIDc1bXMgZm9yd2FyZHN9Lm1kYy1zd2l0Y2gubWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1kZWFjdGl2YXRpb24gLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YWZ0ZXJ7YW5pbWF0aW9uOm1kYy1yaXBwbGUtZmctb3BhY2l0eS1vdXQgMTUwbXM7dHJhbnNmb3JtOnRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQsIDApKSBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSl9Lm1kYy1zd2l0Y2ggLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YmVmb3JlLC5tZGMtc3dpdGNoIC5tZGMtc3dpdGNoX19yaXBwbGU6OmFmdGVye3RvcDpjYWxjKDUwJSAtIDUwJSk7bGVmdDpjYWxjKDUwJSAtIDUwJSk7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0ubWRjLXN3aXRjaC5tZGMtcmlwcGxlLXVwZ3JhZGVkIC5tZGMtc3dpdGNoX19yaXBwbGU6OmJlZm9yZSwubWRjLXN3aXRjaC5tZGMtcmlwcGxlLXVwZ3JhZGVkIC5tZGMtc3dpdGNoX19yaXBwbGU6OmFmdGVye3RvcDp2YXIoLS1tZGMtcmlwcGxlLXRvcCwgY2FsYyg1MCUgLSA1MCUpKTtsZWZ0OnZhcigtLW1kYy1yaXBwbGUtbGVmdCwgY2FsYyg1MCUgLSA1MCUpKTt3aWR0aDp2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsIDEwMCUpO2hlaWdodDp2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsIDEwMCUpfS5tZGMtc3dpdGNoLm1kYy1yaXBwbGUtdXBncmFkZWQgLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YWZ0ZXJ7d2lkdGg6dmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAxMDAlKTtoZWlnaHQ6dmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAxMDAlKX0ubWRjLXN3aXRjaHt3aWR0aDozNnB4O3dpZHRoOnZhcigtLW1kYy1zd2l0Y2gtdHJhY2std2lkdGgsIDM2cHgpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXNlbGVjdGVkOmVuYWJsZWQgLm1kYy1zd2l0Y2hfX2hhbmRsZTo6YWZ0ZXJ7YmFja2dyb3VuZDojM2Q0MGY1O2JhY2tncm91bmQ6dmFyKC0tbWRjLXN3aXRjaC1zZWxlY3RlZC1oYW5kbGUtY29sb3IsIHZhcigtLW1kYy10aGVtZS1wcmltYXJ5LCAjM2Q0MGY1KSl9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tc2VsZWN0ZWQ6ZW5hYmxlZDpob3Zlcjpub3QoOmZvY3VzKTpub3QoOmFjdGl2ZSkgLm1kYy1zd2l0Y2hfX2hhbmRsZTo6YWZ0ZXJ7YmFja2dyb3VuZDojM2QzZTdiO2JhY2tncm91bmQ6dmFyKC0tbWRjLXN3aXRjaC1zZWxlY3RlZC1ob3Zlci1oYW5kbGUtY29sb3IsICMzZDNlN2IpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXNlbGVjdGVkOmVuYWJsZWQ6Zm9jdXM6bm90KDphY3RpdmUpIC5tZGMtc3dpdGNoX19oYW5kbGU6OmFmdGVye2JhY2tncm91bmQ6IzNkM2U3YjtiYWNrZ3JvdW5kOnZhcigtLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtZm9jdXMtaGFuZGxlLWNvbG9yLCAjM2QzZTdiKX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS1zZWxlY3RlZDplbmFibGVkOmFjdGl2ZSAubWRjLXN3aXRjaF9faGFuZGxlOjphZnRlcntiYWNrZ3JvdW5kOiMzZDNlN2I7YmFja2dyb3VuZDp2YXIoLS1tZGMtc3dpdGNoLXNlbGVjdGVkLXByZXNzZWQtaGFuZGxlLWNvbG9yLCAjM2QzZTdiKX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS1zZWxlY3RlZDpkaXNhYmxlZCAubWRjLXN3aXRjaF9faGFuZGxlOjphZnRlcntiYWNrZ3JvdW5kOiM0MjQyNDI7YmFja2dyb3VuZDp2YXIoLS1tZGMtc3dpdGNoLWRpc2FibGVkLXNlbGVjdGVkLWhhbmRsZS1jb2xvciwgIzQyNDI0Mil9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tdW5zZWxlY3RlZDplbmFibGVkIC5tZGMtc3dpdGNoX19oYW5kbGU6OmFmdGVye2JhY2tncm91bmQ6IzYxNjE2MTtiYWNrZ3JvdW5kOnZhcigtLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1oYW5kbGUtY29sb3IsICM2MTYxNjEpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXVuc2VsZWN0ZWQ6ZW5hYmxlZDpob3Zlcjpub3QoOmZvY3VzKTpub3QoOmFjdGl2ZSkgLm1kYy1zd2l0Y2hfX2hhbmRsZTo6YWZ0ZXJ7YmFja2dyb3VuZDojMjEyMTIxO2JhY2tncm91bmQ6dmFyKC0tbWRjLXN3aXRjaC11bnNlbGVjdGVkLWhvdmVyLWhhbmRsZS1jb2xvciwgIzIxMjEyMSl9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tdW5zZWxlY3RlZDplbmFibGVkOmZvY3VzOm5vdCg6YWN0aXZlKSAubWRjLXN3aXRjaF9faGFuZGxlOjphZnRlcntiYWNrZ3JvdW5kOiMyMTIxMjE7YmFja2dyb3VuZDp2YXIoLS1tZGMtc3dpdGNoLXVuc2VsZWN0ZWQtZm9jdXMtaGFuZGxlLWNvbG9yLCAjMjEyMTIxKX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS11bnNlbGVjdGVkOmVuYWJsZWQ6YWN0aXZlIC5tZGMtc3dpdGNoX19oYW5kbGU6OmFmdGVye2JhY2tncm91bmQ6IzIxMjEyMTtiYWNrZ3JvdW5kOnZhcigtLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1wcmVzc2VkLWhhbmRsZS1jb2xvciwgIzIxMjEyMSl9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tdW5zZWxlY3RlZDpkaXNhYmxlZCAubWRjLXN3aXRjaF9faGFuZGxlOjphZnRlcntiYWNrZ3JvdW5kOiM0MjQyNDI7YmFja2dyb3VuZDp2YXIoLS1tZGMtc3dpdGNoLWRpc2FibGVkLXVuc2VsZWN0ZWQtaGFuZGxlLWNvbG9yLCAjNDI0MjQyKX0ubWRjLXN3aXRjaCAubWRjLXN3aXRjaF9faGFuZGxlOjpiZWZvcmV7YmFja2dyb3VuZDojZmZmO2JhY2tncm91bmQ6dmFyKC0tbWRjLXN3aXRjaC1oYW5kbGUtc3VyZmFjZS1jb2xvciwgdmFyKC0tbWRjLXRoZW1lLXN1cmZhY2UsICNmZmYpKX0ubWRjLXN3aXRjaDplbmFibGVkIC5tZGMtc3dpdGNoX19zaGFkb3d7Ym94LXNoYWRvdzowcHggMnB4IDFweCAtMXB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDFweCAxcHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAxcHggM3B4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTIpO2JveC1zaGFkb3c6dmFyKC0tbWRjLXN3aXRjaC1oYW5kbGUtZWxldmF0aW9uLCB2YXIoLS1tZGMtZWxldmF0aW9uLWJveC1zaGFkb3ctZm9yLWdzcykpOy0tbWRjLWVsZXZhdGlvbi1ib3gtc2hhZG93LWZvci1nc3M6MHB4IDJweCAxcHggLTFweCByZ2JhKDAsIDAsIDAsIDAuMiksIDBweCAxcHggMXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwcHggMXB4IDNweCAwcHggcmdiYSgwLCAwLCAwLCAwLjEyKX0ubWRjLXN3aXRjaDpkaXNhYmxlZCAubWRjLXN3aXRjaF9fc2hhZG93e2JveC1zaGFkb3c6MHB4IDBweCAwcHggMHB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDBweCAwcHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAwcHggMHB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTIpO2JveC1zaGFkb3c6dmFyKC0tbWRjLXN3aXRjaC1kaXNhYmxlZC1oYW5kbGUtZWxldmF0aW9uLCB2YXIoLS1tZGMtZWxldmF0aW9uLWJveC1zaGFkb3ctZm9yLWdzcykpOy0tbWRjLWVsZXZhdGlvbi1ib3gtc2hhZG93LWZvci1nc3M6MHB4IDBweCAwcHggMHB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDBweCAwcHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAwcHggMHB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTIpfS5tZGMtc3dpdGNoIC5tZGMtc3dpdGNoX19oYW5kbGV7aGVpZ2h0OjIwcHg7aGVpZ2h0OnZhcigtLW1kYy1zd2l0Y2gtaGFuZGxlLWhlaWdodCwgMjBweCl9Lm1kYy1zd2l0Y2g6ZGlzYWJsZWQgLm1kYy1zd2l0Y2hfX2hhbmRsZTo6YWZ0ZXJ7b3BhY2l0eTowLjM4O29wYWNpdHk6dmFyKC0tbWRjLXN3aXRjaC1kaXNhYmxlZC1oYW5kbGUtb3BhY2l0eSwgMC4zOCl9Lm1kYy1zd2l0Y2ggLm1kYy1zd2l0Y2hfX2hhbmRsZXtib3JkZXItcmFkaXVzOjEwcHg7Ym9yZGVyLXJhZGl1czp2YXIoLS1tZGMtc3dpdGNoLWhhbmRsZS1zaGFwZSwgMTBweCl9Lm1kYy1zd2l0Y2ggLm1kYy1zd2l0Y2hfX2hhbmRsZXt3aWR0aDoyMHB4O3dpZHRoOnZhcigtLW1kYy1zd2l0Y2gtaGFuZGxlLXdpZHRoLCAyMHB4KX0ubWRjLXN3aXRjaCAubWRjLXN3aXRjaF9faGFuZGxlLXRyYWNre3dpZHRoOmNhbGMoMTAwJSAtIDIwcHgpO3dpZHRoOmNhbGMoMTAwJSAtIHZhcigtLW1kYy1zd2l0Y2gtaGFuZGxlLXdpZHRoLCAyMHB4KSl9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tc2VsZWN0ZWQ6ZW5hYmxlZCAubWRjLXN3aXRjaF9faWNvbntmaWxsOiNmZmY7ZmlsbDp2YXIoLS1tZGMtc3dpdGNoLXNlbGVjdGVkLWljb24tY29sb3IsIHZhcigtLW1kYy10aGVtZS1vbi1wcmltYXJ5LCAjZmZmKSl9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tc2VsZWN0ZWQ6ZGlzYWJsZWQgLm1kYy1zd2l0Y2hfX2ljb257ZmlsbDojZmZmO2ZpbGw6dmFyKC0tbWRjLXN3aXRjaC1kaXNhYmxlZC1zZWxlY3RlZC1pY29uLWNvbG9yLCB2YXIoLS1tZGMtdGhlbWUtb24tcHJpbWFyeSwgI2ZmZikpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXVuc2VsZWN0ZWQ6ZW5hYmxlZCAubWRjLXN3aXRjaF9faWNvbntmaWxsOiNmZmY7ZmlsbDp2YXIoLS1tZGMtc3dpdGNoLXVuc2VsZWN0ZWQtaWNvbi1jb2xvciwgdmFyKC0tbWRjLXRoZW1lLW9uLXByaW1hcnksICNmZmYpKX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS11bnNlbGVjdGVkOmRpc2FibGVkIC5tZGMtc3dpdGNoX19pY29ue2ZpbGw6I2ZmZjtmaWxsOnZhcigtLW1kYy1zd2l0Y2gtZGlzYWJsZWQtdW5zZWxlY3RlZC1pY29uLWNvbG9yLCB2YXIoLS1tZGMtdGhlbWUtb24tcHJpbWFyeSwgI2ZmZikpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXNlbGVjdGVkOmRpc2FibGVkIC5tZGMtc3dpdGNoX19pY29uc3tvcGFjaXR5OjAuMzg7b3BhY2l0eTp2YXIoLS1tZGMtc3dpdGNoLWRpc2FibGVkLXNlbGVjdGVkLWljb24tb3BhY2l0eSwgMC4zOCl9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tdW5zZWxlY3RlZDpkaXNhYmxlZCAubWRjLXN3aXRjaF9faWNvbnN7b3BhY2l0eTowLjM4O29wYWNpdHk6dmFyKC0tbWRjLXN3aXRjaC1kaXNhYmxlZC11bnNlbGVjdGVkLWljb24tb3BhY2l0eSwgMC4zOCl9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tc2VsZWN0ZWQgLm1kYy1zd2l0Y2hfX2ljb257d2lkdGg6MThweDt3aWR0aDp2YXIoLS1tZGMtc3dpdGNoLXNlbGVjdGVkLWljb24tc2l6ZSwgMThweCk7aGVpZ2h0OjE4cHg7aGVpZ2h0OnZhcigtLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtaWNvbi1zaXplLCAxOHB4KX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS11bnNlbGVjdGVkIC5tZGMtc3dpdGNoX19pY29ue3dpZHRoOjE4cHg7d2lkdGg6dmFyKC0tbWRjLXN3aXRjaC11bnNlbGVjdGVkLWljb24tc2l6ZSwgMThweCk7aGVpZ2h0OjE4cHg7aGVpZ2h0OnZhcigtLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1pY29uLXNpemUsIDE4cHgpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXNlbGVjdGVkOmVuYWJsZWQ6aG92ZXI6bm90KDpmb2N1cykgLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YmVmb3JlLC5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXNlbGVjdGVkOmVuYWJsZWQ6aG92ZXI6bm90KDpmb2N1cykgLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjojM2Q0MGY1O2JhY2tncm91bmQtY29sb3I6dmFyKC0tbWRjLXN3aXRjaC1zZWxlY3RlZC1ob3Zlci1zdGF0ZS1sYXllci1jb2xvciwgdmFyKC0tbWRjLXRoZW1lLXByaW1hcnksICMzZDQwZjUpKX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS1zZWxlY3RlZDplbmFibGVkOmZvY3VzIC5tZGMtc3dpdGNoX19yaXBwbGU6OmJlZm9yZSwubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS1zZWxlY3RlZDplbmFibGVkOmZvY3VzIC5tZGMtc3dpdGNoX19yaXBwbGU6OmFmdGVye2JhY2tncm91bmQtY29sb3I6IzNkNDBmNTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtZm9jdXMtc3RhdGUtbGF5ZXItY29sb3IsIHZhcigtLW1kYy10aGVtZS1wcmltYXJ5LCAjM2Q0MGY1KSl9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tc2VsZWN0ZWQ6ZW5hYmxlZDphY3RpdmUgLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YmVmb3JlLC5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXNlbGVjdGVkOmVuYWJsZWQ6YWN0aXZlIC5tZGMtc3dpdGNoX19yaXBwbGU6OmFmdGVye2JhY2tncm91bmQtY29sb3I6IzNkNDBmNTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtcHJlc3NlZC1zdGF0ZS1sYXllci1jb2xvciwgdmFyKC0tbWRjLXRoZW1lLXByaW1hcnksICMzZDQwZjUpKX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS11bnNlbGVjdGVkOmVuYWJsZWQ6aG92ZXI6bm90KDpmb2N1cykgLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YmVmb3JlLC5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXVuc2VsZWN0ZWQ6ZW5hYmxlZDpob3Zlcjpub3QoOmZvY3VzKSAubWRjLXN3aXRjaF9fcmlwcGxlOjphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOiM0MjQyNDI7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1tZGMtc3dpdGNoLXVuc2VsZWN0ZWQtaG92ZXItc3RhdGUtbGF5ZXItY29sb3IsICM0MjQyNDIpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXVuc2VsZWN0ZWQ6ZW5hYmxlZDpmb2N1cyAubWRjLXN3aXRjaF9fcmlwcGxlOjpiZWZvcmUsLm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tdW5zZWxlY3RlZDplbmFibGVkOmZvY3VzIC5tZGMtc3dpdGNoX19yaXBwbGU6OmFmdGVye2JhY2tncm91bmQtY29sb3I6IzQyNDI0MjtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1mb2N1cy1zdGF0ZS1sYXllci1jb2xvciwgIzQyNDI0Mil9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tdW5zZWxlY3RlZDplbmFibGVkOmFjdGl2ZSAubWRjLXN3aXRjaF9fcmlwcGxlOjpiZWZvcmUsLm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tdW5zZWxlY3RlZDplbmFibGVkOmFjdGl2ZSAubWRjLXN3aXRjaF9fcmlwcGxlOjphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOiM0MjQyNDI7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1tZGMtc3dpdGNoLXVuc2VsZWN0ZWQtcHJlc3NlZC1zdGF0ZS1sYXllci1jb2xvciwgIzQyNDI0Mil9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tc2VsZWN0ZWQ6ZW5hYmxlZDpob3Zlcjpub3QoOmZvY3VzKTpob3ZlciAubWRjLXN3aXRjaF9fcmlwcGxlOjpiZWZvcmUsLm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tc2VsZWN0ZWQ6ZW5hYmxlZDpob3Zlcjpub3QoOmZvY3VzKS5tZGMtcmlwcGxlLXN1cmZhY2UtLWhvdmVyIC5tZGMtc3dpdGNoX19yaXBwbGU6OmJlZm9yZXtvcGFjaXR5OjAuMDQ7b3BhY2l0eTp2YXIoLS1tZGMtc3dpdGNoLXNlbGVjdGVkLWhvdmVyLXN0YXRlLWxheWVyLW9wYWNpdHksIDAuMDQpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXNlbGVjdGVkOmVuYWJsZWQ6Zm9jdXMubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkIC5tZGMtc3dpdGNoX19yaXBwbGU6OmJlZm9yZSwubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS1zZWxlY3RlZDplbmFibGVkOmZvY3VzOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6Zm9jdXMgLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YmVmb3Jle3RyYW5zaXRpb24tZHVyYXRpb246NzVtcztvcGFjaXR5OjAuMTI7b3BhY2l0eTp2YXIoLS1tZGMtc3dpdGNoLXNlbGVjdGVkLWZvY3VzLXN0YXRlLWxheWVyLW9wYWNpdHksIDAuMTIpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXNlbGVjdGVkOmVuYWJsZWQ6YWN0aXZlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCkgLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YWZ0ZXJ7dHJhbnNpdGlvbjpvcGFjaXR5IDE1MG1zIGxpbmVhcn0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS1zZWxlY3RlZDplbmFibGVkOmFjdGl2ZTpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmFjdGl2ZSAubWRjLXN3aXRjaF9fcmlwcGxlOjphZnRlcnt0cmFuc2l0aW9uLWR1cmF0aW9uOjc1bXM7b3BhY2l0eTowLjE7b3BhY2l0eTp2YXIoLS1tZGMtc3dpdGNoLXNlbGVjdGVkLXByZXNzZWQtc3RhdGUtbGF5ZXItb3BhY2l0eSwgMC4xKX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS1zZWxlY3RlZDplbmFibGVkOmFjdGl2ZS5tZGMtcmlwcGxlLXVwZ3JhZGVkey0tbWRjLXJpcHBsZS1mZy1vcGFjaXR5OnZhcigtLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtcHJlc3NlZC1zdGF0ZS1sYXllci1vcGFjaXR5LCAwLjEpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXVuc2VsZWN0ZWQ6ZW5hYmxlZDpob3Zlcjpub3QoOmZvY3VzKTpob3ZlciAubWRjLXN3aXRjaF9fcmlwcGxlOjpiZWZvcmUsLm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tdW5zZWxlY3RlZDplbmFibGVkOmhvdmVyOm5vdCg6Zm9jdXMpLm1kYy1yaXBwbGUtc3VyZmFjZS0taG92ZXIgLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YmVmb3Jle29wYWNpdHk6MC4wNDtvcGFjaXR5OnZhcigtLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1ob3Zlci1zdGF0ZS1sYXllci1vcGFjaXR5LCAwLjA0KX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS11bnNlbGVjdGVkOmVuYWJsZWQ6Zm9jdXMubWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkIC5tZGMtc3dpdGNoX19yaXBwbGU6OmJlZm9yZSwubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS11bnNlbGVjdGVkOmVuYWJsZWQ6Zm9jdXM6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKTpmb2N1cyAubWRjLXN3aXRjaF9fcmlwcGxlOjpiZWZvcmV7dHJhbnNpdGlvbi1kdXJhdGlvbjo3NW1zO29wYWNpdHk6MC4xMjtvcGFjaXR5OnZhcigtLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1mb2N1cy1zdGF0ZS1sYXllci1vcGFjaXR5LCAwLjEyKX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS11bnNlbGVjdGVkOmVuYWJsZWQ6YWN0aXZlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCkgLm1kYy1zd2l0Y2hfX3JpcHBsZTo6YWZ0ZXJ7dHJhbnNpdGlvbjpvcGFjaXR5IDE1MG1zIGxpbmVhcn0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS11bnNlbGVjdGVkOmVuYWJsZWQ6YWN0aXZlOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6YWN0aXZlIC5tZGMtc3dpdGNoX19yaXBwbGU6OmFmdGVye3RyYW5zaXRpb24tZHVyYXRpb246NzVtcztvcGFjaXR5OjAuMTtvcGFjaXR5OnZhcigtLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1wcmVzc2VkLXN0YXRlLWxheWVyLW9wYWNpdHksIDAuMSl9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tdW5zZWxlY3RlZDplbmFibGVkOmFjdGl2ZS5tZGMtcmlwcGxlLXVwZ3JhZGVkey0tbWRjLXJpcHBsZS1mZy1vcGFjaXR5OnZhcigtLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1wcmVzc2VkLXN0YXRlLWxheWVyLW9wYWNpdHksIDAuMSl9Lm1kYy1zd2l0Y2ggLm1kYy1zd2l0Y2hfX3JpcHBsZXtoZWlnaHQ6NDhweDtoZWlnaHQ6dmFyKC0tbWRjLXN3aXRjaC1zdGF0ZS1sYXllci1zaXplLCA0OHB4KTt3aWR0aDo0OHB4O3dpZHRoOnZhcigtLW1kYy1zd2l0Y2gtc3RhdGUtbGF5ZXItc2l6ZSwgNDhweCl9Lm1kYy1zd2l0Y2ggLm1kYy1zd2l0Y2hfX3RyYWNre2hlaWdodDoxNHB4O2hlaWdodDp2YXIoLS1tZGMtc3dpdGNoLXRyYWNrLWhlaWdodCwgMTRweCl9Lm1kYy1zd2l0Y2g6ZGlzYWJsZWQgLm1kYy1zd2l0Y2hfX3RyYWNre29wYWNpdHk6MC4xMjtvcGFjaXR5OnZhcigtLW1kYy1zd2l0Y2gtZGlzYWJsZWQtdHJhY2stb3BhY2l0eSwgMC4xMil9Lm1kYy1zd2l0Y2g6ZW5hYmxlZCAubWRjLXN3aXRjaF9fdHJhY2s6OmFmdGVye2JhY2tncm91bmQ6I2NmY2ZmZDtiYWNrZ3JvdW5kOnZhcigtLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtdHJhY2stY29sb3IsICNjZmNmZmQpfS5tZGMtc3dpdGNoOmVuYWJsZWQ6aG92ZXI6bm90KDpmb2N1cyk6bm90KDphY3RpdmUpIC5tZGMtc3dpdGNoX190cmFjazo6YWZ0ZXJ7YmFja2dyb3VuZDojY2ZjZmZkO2JhY2tncm91bmQ6dmFyKC0tbWRjLXN3aXRjaC1zZWxlY3RlZC1ob3Zlci10cmFjay1jb2xvciwgI2NmY2ZmZCl9Lm1kYy1zd2l0Y2g6ZW5hYmxlZDpmb2N1czpub3QoOmFjdGl2ZSkgLm1kYy1zd2l0Y2hfX3RyYWNrOjphZnRlcntiYWNrZ3JvdW5kOiNjZmNmZmQ7YmFja2dyb3VuZDp2YXIoLS1tZGMtc3dpdGNoLXNlbGVjdGVkLWZvY3VzLXRyYWNrLWNvbG9yLCAjY2ZjZmZkKX0ubWRjLXN3aXRjaDplbmFibGVkOmFjdGl2ZSAubWRjLXN3aXRjaF9fdHJhY2s6OmFmdGVye2JhY2tncm91bmQ6I2NmY2ZmZDtiYWNrZ3JvdW5kOnZhcigtLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtcHJlc3NlZC10cmFjay1jb2xvciwgI2NmY2ZmZCl9Lm1kYy1zd2l0Y2g6ZGlzYWJsZWQgLm1kYy1zd2l0Y2hfX3RyYWNrOjphZnRlcntiYWNrZ3JvdW5kOiM0MjQyNDI7YmFja2dyb3VuZDp2YXIoLS1tZGMtc3dpdGNoLWRpc2FibGVkLXNlbGVjdGVkLXRyYWNrLWNvbG9yLCAjNDI0MjQyKX0ubWRjLXN3aXRjaDplbmFibGVkIC5tZGMtc3dpdGNoX190cmFjazo6YmVmb3Jle2JhY2tncm91bmQ6I2UwZTBlMDtiYWNrZ3JvdW5kOnZhcigtLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC10cmFjay1jb2xvciwgI2UwZTBlMCl9Lm1kYy1zd2l0Y2g6ZW5hYmxlZDpob3Zlcjpub3QoOmZvY3VzKTpub3QoOmFjdGl2ZSkgLm1kYy1zd2l0Y2hfX3RyYWNrOjpiZWZvcmV7YmFja2dyb3VuZDojZTBlMGUwO2JhY2tncm91bmQ6dmFyKC0tbWRjLXN3aXRjaC11bnNlbGVjdGVkLWhvdmVyLXRyYWNrLWNvbG9yLCAjZTBlMGUwKX0ubWRjLXN3aXRjaDplbmFibGVkOmZvY3VzOm5vdCg6YWN0aXZlKSAubWRjLXN3aXRjaF9fdHJhY2s6OmJlZm9yZXtiYWNrZ3JvdW5kOiNlMGUwZTA7YmFja2dyb3VuZDp2YXIoLS1tZGMtc3dpdGNoLXVuc2VsZWN0ZWQtZm9jdXMtdHJhY2stY29sb3IsICNlMGUwZTApfS5tZGMtc3dpdGNoOmVuYWJsZWQ6YWN0aXZlIC5tZGMtc3dpdGNoX190cmFjazo6YmVmb3Jle2JhY2tncm91bmQ6I2UwZTBlMDtiYWNrZ3JvdW5kOnZhcigtLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1wcmVzc2VkLXRyYWNrLWNvbG9yLCAjZTBlMGUwKX0ubWRjLXN3aXRjaDpkaXNhYmxlZCAubWRjLXN3aXRjaF9fdHJhY2s6OmJlZm9yZXtiYWNrZ3JvdW5kOiM0MjQyNDI7YmFja2dyb3VuZDp2YXIoLS1tZGMtc3dpdGNoLWRpc2FibGVkLXVuc2VsZWN0ZWQtdHJhY2stY29sb3IsICM0MjQyNDIpfS5tZGMtc3dpdGNoIC5tZGMtc3dpdGNoX190cmFja3tib3JkZXItcmFkaXVzOjdweDtib3JkZXItcmFkaXVzOnZhcigtLW1kYy1zd2l0Y2gtdHJhY2stc2hhcGUsIDdweCl9QG1lZGlhIHNjcmVlbiBhbmQgKGZvcmNlZC1jb2xvcnM6IGFjdGl2ZSksICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKXsubWRjLXN3aXRjaDplbmFibGVkIC5tZGMtc3dpdGNoX19zaGFkb3d7fS5tZGMtc3dpdGNoOmRpc2FibGVkIC5tZGMtc3dpdGNoX19zaGFkb3d7fS5tZGMtc3dpdGNoOmRpc2FibGVkIC5tZGMtc3dpdGNoX19oYW5kbGU6OmFmdGVye29wYWNpdHk6MTtvcGFjaXR5OnZhcigtLW1kYy1zd2l0Y2gtZGlzYWJsZWQtaGFuZGxlLW9wYWNpdHksIDEpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXNlbGVjdGVkOmVuYWJsZWQgLm1kYy1zd2l0Y2hfX2ljb257ZmlsbDpCdXR0b25UZXh0O2ZpbGw6dmFyKC0tbWRjLXN3aXRjaC1zZWxlY3RlZC1pY29uLWNvbG9yLCBCdXR0b25UZXh0KX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS1zZWxlY3RlZDpkaXNhYmxlZCAubWRjLXN3aXRjaF9faWNvbntmaWxsOkdyYXlUZXh0O2ZpbGw6dmFyKC0tbWRjLXN3aXRjaC1kaXNhYmxlZC1zZWxlY3RlZC1pY29uLWNvbG9yLCBHcmF5VGV4dCl9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tdW5zZWxlY3RlZDplbmFibGVkIC5tZGMtc3dpdGNoX19pY29ue2ZpbGw6QnV0dG9uVGV4dDtmaWxsOnZhcigtLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1pY29uLWNvbG9yLCBCdXR0b25UZXh0KX0ubWRjLXN3aXRjaC5tZGMtc3dpdGNoLS11bnNlbGVjdGVkOmRpc2FibGVkIC5tZGMtc3dpdGNoX19pY29ue2ZpbGw6R3JheVRleHQ7ZmlsbDp2YXIoLS1tZGMtc3dpdGNoLWRpc2FibGVkLXVuc2VsZWN0ZWQtaWNvbi1jb2xvciwgR3JheVRleHQpfS5tZGMtc3dpdGNoLm1kYy1zd2l0Y2gtLXNlbGVjdGVkOmRpc2FibGVkIC5tZGMtc3dpdGNoX19pY29uc3tvcGFjaXR5OjE7b3BhY2l0eTp2YXIoLS1tZGMtc3dpdGNoLWRpc2FibGVkLXNlbGVjdGVkLWljb24tb3BhY2l0eSwgMSl9Lm1kYy1zd2l0Y2gubWRjLXN3aXRjaC0tdW5zZWxlY3RlZDpkaXNhYmxlZCAubWRjLXN3aXRjaF9faWNvbnN7b3BhY2l0eToxO29wYWNpdHk6dmFyKC0tbWRjLXN3aXRjaC1kaXNhYmxlZC11bnNlbGVjdGVkLWljb24tb3BhY2l0eSwgMSl9Lm1kYy1zd2l0Y2g6ZGlzYWJsZWQgLm1kYy1zd2l0Y2hfX3RyYWNre29wYWNpdHk6MTtvcGFjaXR5OnZhcigtLW1kYy1zd2l0Y2gtZGlzYWJsZWQtdHJhY2stb3BhY2l0eSwgMSl9fWluby1zd2l0Y2h7LS1tZGMtc3dpdGNoLXNlbGVjdGVkLWhhbmRsZS1jb2xvcjp3aGl0ZTstLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtaG92ZXItaGFuZGxlLWNvbG9yOndoaXRlOy0tbWRjLXN3aXRjaC1zZWxlY3RlZC1mb2N1cy1oYW5kbGUtY29sb3I6d2hpdGU7LS1tZGMtc3dpdGNoLXNlbGVjdGVkLXByZXNzZWQtaGFuZGxlLWNvbG9yOndoaXRlOy0tbWRjLXN3aXRjaC1kaXNhYmxlZC1zZWxlY3RlZC1oYW5kbGUtY29sb3I6I0NCRDBFMDstLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtdHJhY2stY29sb3I6IzJDMDJGRjstLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtaG92ZXItdHJhY2stY29sb3I6IzJDMDJGRjstLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtZm9jdXMtdHJhY2stY29sb3I6IzJDMDJGRjstLW1kYy1zd2l0Y2gtc2VsZWN0ZWQtcHJlc3NlZC10cmFjay1jb2xvcjojMkMwMkZGOy0tbWRjLXN3aXRjaC11bnNlbGVjdGVkLWZvY3VzLXRyYWNrLWNvbG9yOiNBQkIxQ0M7LS1tZGMtc3dpdGNoLXVuc2VsZWN0ZWQtaG92ZXItdHJhY2stY29sb3I6I0FCQjFDQzstLW1kYy1zd2l0Y2gtZGlzYWJsZWQtc2VsZWN0ZWQtdHJhY2stY29sb3I6dHJhbnNwYXJlbnR9aW5vLXN3aXRjaCAubWRjLXN3aXRjaC0tc2VsZWN0ZWQ6Zm9jdXMgLm1kYy1zd2l0Y2hfX3RyYWNrLGluby1zd2l0Y2ggLm1kYy1zd2l0Y2gtLXVuc2VsZWN0ZWQ6Zm9jdXMgLm1kYy1zd2l0Y2hfX3RyYWNre2JvcmRlcjoxLjVweCBzb2xpZCB3aGl0ZTttYXJnaW46LTEuNXB4O2JveC1zaGFkb3c6MCAwIDAgNXB4ICMyRDVERkY0RH1pbm8tc3dpdGNoIC5tZGMtc3dpdGNoLS1zZWxlY3RlZCAubWRjLXN3aXRjaF9faGFuZGxle21hcmdpbi1sZWZ0Oi0ycHh9aW5vLXN3aXRjaCAubWRjLXN3aXRjaC0tdW5zZWxlY3RlZCAubWRjLXN3aXRjaF9faGFuZGxle21hcmdpbi1sZWZ0OjJweH1pbm8tc3dpdGNoIC5tZGMtc3dpdGNoOmRpc2FibGVkIC5tZGMtc3dpdGNoX190cmFja3tvcGFjaXR5OjE7Ym9yZGVyOjJweCBzb2xpZCAjQ0JEMEUwO21hcmdpbjotMS41cHh9aW5vLXN3aXRjaCAubWRjLXN3aXRjaDpkaXNhYmxlZCAubWRjLXN3aXRjaF9faGFuZGxlOjphZnRlcntvcGFjaXR5OjF9aW5vLXN3aXRjaHtkaXNwbGF5OmZsZXg7Z2FwOjEwcHg7YWxpZ24taXRlbXM6Y2VudGVyO2hlaWdodDozMHB4O2N1cnNvcjpwb2ludGVyOy0tbWRjLXN3aXRjaC10cmFjay1oZWlnaHQ6MjBweDstLW1kYy1zd2l0Y2gtdHJhY2std2lkdGg6MzZweDstLW1kYy1zd2l0Y2gtdHJhY2stc2hhcGU6MThweDstLW1kYy1zd2l0Y2gtaGFuZGxlLWhlaWdodDoxNnB4Oy0tbWRjLXN3aXRjaC1oYW5kbGUtd2lkdGg6MTZweDstLW1kYy1zd2l0Y2gtaGFuZGxlLXNoYXBlOjE0cHg7LS1tZGMtc3dpdGNoLXNlbGVjdGVkLWljb24tc2l6ZToxMHB4Oy0tbWRjLXN3aXRjaC11bnNlbGVjdGVkLWljb24tc2l6ZToxMHB4Oy0tbWRjLXN3aXRjaC1oYW5kbGUtc3VyZmFjZS1jb2xvcjp3aGl0ZTstLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1oYW5kbGUtY29sb3I6d2hpdGU7LS1tZGMtc3dpdGNoLXVuc2VsZWN0ZWQtdHJhY2stY29sb3I6I0NCRDBFMDstLW1kYy1zd2l0Y2gtZGlzYWJsZWQtdW5zZWxlY3RlZC1oYW5kbGUtY29sb3I6I0NCRDBFMDstLW1kYy1zd2l0Y2gtZGlzYWJsZWQtdW5zZWxlY3RlZC10cmFjay1jb2xvcjp0cmFuc3BhcmVudDstLW1kYy1zd2l0Y2gtdW5zZWxlY3RlZC1ob3Zlci1oYW5kbGUtY29sb3I6d2hpdGU7LS1tZGMtc3dpdGNoLXVuc2VsZWN0ZWQtZm9jdXMtaGFuZGxlLWNvbG9yOndoaXRlOy0tbWRjLXN3aXRjaC11bnNlbGVjdGVkLXByZXNzZWQtaGFuZGxlLWNvbG9yOndoaXRlfWluby1zd2l0Y2guaW5vLXN3aXRjaC1kaXNhYmxlZHtjdXJzb3I6ZGVmYXVsdDtwb2ludGVyLWV2ZW50czpub25lfWluby1zd2l0Y2ggLm1kYy1zd2l0Y2hfX3JpcHBsZXtkaXNwbGF5Om5vbmV9XCI7XG5cbmNvbnN0IFN3aXRjaCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5jaGVja2VkQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJjaGVja2VkQ2hhbmdlXCIsIDcpO1xuICAgIHRoaXMuc3dpdGNoSWQgPSBgaW5vLXN3aXRjaC1pZF8ke2dlbmVyYXRlVW5pcXVlSWQoKX1gO1xuICAgIC8qKlxuICAgICAqIE1hcmtzIHRoaXMgZWxlbWVudCBhcyBjaGVja2VkLiAoKip1bm1hbmFnZWQqKilcbiAgICAgKi9cbiAgICB0aGlzLmNoZWNrZWQgPSBmYWxzZTtcbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IChlKSA9PiB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRoaXMuY2hlY2tlZENoYW5nZS5lbWl0KCF0aGlzLmNoZWNrZWQpO1xuICAgIH07XG4gIH1cbiAgY2hlY2tlZENoYW5nZWQobmV3Q2hlY2tlZCkge1xuICAgIGlmICh0aGlzLm1kY1N3aXRjaCkge1xuICAgICAgdGhpcy5tZGNTd2l0Y2guc2VsZWN0ZWQgPSBuZXdDaGVja2VkO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIHRoaXMubWRjU3dpdGNoID0gbmV3IE1EQ1N3aXRjaCh0aGlzLm1kY1N3aXRjaEVsKTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB2YXIgX2E7XG4gICAgKF9hID0gdGhpcy5tZGNTd2l0Y2gpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZXN0cm95KCk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZWwsIG5hbWUsIGRpc2FibGVkIH0gPSB0aGlzO1xuICAgIGNvbnN0IGhpZGRlbklucHV0ID0gcmVuZGVySGlkZGVuSW5wdXQoZWwsIG5hbWUsICcnLCBkaXNhYmxlZCk7XG4gICAgaGlkZGVuSW5wdXQuY2hlY2tlZCA9IHRoaXMuY2hlY2tlZDtcbiAgICBjb25zdCBob3N0Q2xhc3NlcyA9IGNsYXNzbmFtZXMoJ2luby1zd2l0Y2gnLCB7XG4gICAgICAnaW5vLXN3aXRjaC1kaXNhYmxlZCc6IHRoaXMuZGlzYWJsZWRcbiAgICB9KTtcbiAgICBjb25zdCBzd2l0Y2hDbGFzc2VzID0gY2xhc3NuYW1lcygnbWRjLXN3aXRjaCcsIHRoaXMuY2hlY2tlZCA/ICdtZGMtc3dpdGNoLS1zZWxlY3RlZCcgOiAnbWRjLXN3aXRjaC0tdW5zZWxlY3RlZCcpO1xuICAgIHJldHVybiAoaChIb3N0LCB7IGNsYXNzOiBob3N0Q2xhc3NlcywgY2hlY2tlZDogdGhpcy5jaGVja2VkLCBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZCwgb25DbGljazogdGhpcy5oYW5kbGVDaGFuZ2UgfSwgaChcImJ1dHRvblwiLCB7IGlkOiB0aGlzLnN3aXRjaElkLCByZWY6IGVsID0+IHRoaXMubWRjU3dpdGNoRWwgPSBlbCwgY2xhc3M6IHN3aXRjaENsYXNzZXMsIGRpc2FibGVkOiB0aGlzLmRpc2FibGVkLCB0eXBlOiBcImJ1dHRvblwiLCByb2xlOiBcInN3aXRjaFwiLCBcImFyaWEtY2hlY2tlZFwiOiB0aGlzLmNoZWNrZWQgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcIm1kYy1zd2l0Y2hfX3RyYWNrXCIgfSksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJtZGMtc3dpdGNoX19oYW5kbGUtdHJhY2tcIiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwibWRjLXN3aXRjaF9faGFuZGxlXCIgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcIm1kYy1zd2l0Y2hfX3JpcHBsZVwiIH0pKSkpLCBoKFwibGFiZWxcIiwgeyBodG1sRm9yOiB0aGlzLnN3aXRjaElkLCBvbkNsaWNrOiAoZSkgPT4gZS5zdG9wUHJvcGFnYXRpb24oKSB9LCBoKFwic2xvdFwiLCBudWxsKSkpKTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG4gIHN0YXRpYyBnZXQgd2F0Y2hlcnMoKSB7IHJldHVybiB7XG4gICAgXCJjaGVja2VkXCI6IFtcImNoZWNrZWRDaGFuZ2VkXCJdXG4gIH07IH1cbn07XG5Td2l0Y2guc3R5bGUgPSBpbm9Td2l0Y2hDc3M7XG5cbmV4cG9ydCB7IFN3aXRjaCBhcyBpbm9fc3dpdGNoIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../elements/dist/esm/ino-switch.entry.js\n"));

/***/ }),

/***/ "../elements/dist/esm/ponyfill-495ec32d.js":
/*!*************************************************!*\
  !*** ../elements/dist/esm/ponyfill-495ec32d.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"c\": function() { return /* binding */ closest; },\n/* harmony export */   \"e\": function() { return /* binding */ estimateScrollWidth; },\n/* harmony export */   \"m\": function() { return /* binding */ matches; }\n/* harmony export */ });\n/*!\n * Crafted with ❤ by inovex GmbH\n */\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * @fileoverview A \"ponyfill\" is a polyfill that doesn't modify the global prototype chain.\n * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.\n */\nfunction closest(element, selector) {\n    if (element.closest) {\n        return element.closest(selector);\n    }\n    var el = element;\n    while (el) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentElement;\n    }\n    return null;\n}\nfunction matches(element, selector) {\n    var nativeMatches = element.matches\n        || element.webkitMatchesSelector\n        || element.msMatchesSelector;\n    return nativeMatches.call(element, selector);\n}\n/**\n * Used to compute the estimated scroll width of elements. When an element is\n * hidden due to display: none; being applied to a parent element, the width is\n * returned as 0. However, the element will have a true width once no longer\n * inside a display: none context. This method computes an estimated width when\n * the element is hidden or returns the true width when the element is visble.\n * @param {Element} element the element whose width to estimate\n */\nfunction estimateScrollWidth(element) {\n    // Check the offsetParent. If the element inherits display: none from any\n    // parent, the offsetParent property will be null (see\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).\n    // This check ensures we only clone the node when necessary.\n    var htmlEl = element;\n    if (htmlEl.offsetParent !== null) {\n        return htmlEl.scrollWidth;\n    }\n    var clone = htmlEl.cloneNode(true);\n    clone.style.setProperty('position', 'absolute');\n    clone.style.setProperty('transform', 'translate(-9999px, -9999px)');\n    document.documentElement.appendChild(clone);\n    var scrollWidth = clone.scrollWidth;\n    document.documentElement.removeChild(clone);\n    return scrollWidth;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZWxlbWVudHMvZGlzdC9lc20vcG9ueWZpbGwtNDk1ZWMzMmQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVnRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vZWxlbWVudHMvZGlzdC9lc20vcG9ueWZpbGwtNDk1ZWMzMmQuanM/ZmU1OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENyYWZ0ZWQgd2l0aCDinaQgYnkgaW5vdmV4IEdtYkhcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBcInBvbnlmaWxsXCIgaXMgYSBwb2x5ZmlsbCB0aGF0IGRvZXNuJ3QgbW9kaWZ5IHRoZSBnbG9iYWwgcHJvdG90eXBlIGNoYWluLlxuICogVGhpcyBtYWtlcyBwb255ZmlsbHMgc2FmZXIgdGhhbiB0cmFkaXRpb25hbCBwb2x5ZmlsbHMsIGVzcGVjaWFsbHkgZm9yIGxpYnJhcmllcyBsaWtlIE1EQy5cbiAqL1xuZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGlmIChlbGVtZW50LmNsb3Nlc3QpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2xvc2VzdChzZWxlY3Rvcik7XG4gICAgfVxuICAgIHZhciBlbCA9IGVsZW1lbnQ7XG4gICAgd2hpbGUgKGVsKSB7XG4gICAgICAgIGlmIChtYXRjaGVzKGVsLCBzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgfVxuICAgICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIHZhciBuYXRpdmVNYXRjaGVzID0gZWxlbWVudC5tYXRjaGVzXG4gICAgICAgIHx8IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3I7XG4gICAgcmV0dXJuIG5hdGl2ZU1hdGNoZXMuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG59XG4vKipcbiAqIFVzZWQgdG8gY29tcHV0ZSB0aGUgZXN0aW1hdGVkIHNjcm9sbCB3aWR0aCBvZiBlbGVtZW50cy4gV2hlbiBhbiBlbGVtZW50IGlzXG4gKiBoaWRkZW4gZHVlIHRvIGRpc3BsYXk6IG5vbmU7IGJlaW5nIGFwcGxpZWQgdG8gYSBwYXJlbnQgZWxlbWVudCwgdGhlIHdpZHRoIGlzXG4gKiByZXR1cm5lZCBhcyAwLiBIb3dldmVyLCB0aGUgZWxlbWVudCB3aWxsIGhhdmUgYSB0cnVlIHdpZHRoIG9uY2Ugbm8gbG9uZ2VyXG4gKiBpbnNpZGUgYSBkaXNwbGF5OiBub25lIGNvbnRleHQuIFRoaXMgbWV0aG9kIGNvbXB1dGVzIGFuIGVzdGltYXRlZCB3aWR0aCB3aGVuXG4gKiB0aGUgZWxlbWVudCBpcyBoaWRkZW4gb3IgcmV0dXJucyB0aGUgdHJ1ZSB3aWR0aCB3aGVuIHRoZSBlbGVtZW50IGlzIHZpc2JsZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aG9zZSB3aWR0aCB0byBlc3RpbWF0ZVxuICovXG5mdW5jdGlvbiBlc3RpbWF0ZVNjcm9sbFdpZHRoKGVsZW1lbnQpIHtcbiAgICAvLyBDaGVjayB0aGUgb2Zmc2V0UGFyZW50LiBJZiB0aGUgZWxlbWVudCBpbmhlcml0cyBkaXNwbGF5OiBub25lIGZyb20gYW55XG4gICAgLy8gcGFyZW50LCB0aGUgb2Zmc2V0UGFyZW50IHByb3BlcnR5IHdpbGwgYmUgbnVsbCAoc2VlXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxFbGVtZW50L29mZnNldFBhcmVudCkuXG4gICAgLy8gVGhpcyBjaGVjayBlbnN1cmVzIHdlIG9ubHkgY2xvbmUgdGhlIG5vZGUgd2hlbiBuZWNlc3NhcnkuXG4gICAgdmFyIGh0bWxFbCA9IGVsZW1lbnQ7XG4gICAgaWYgKGh0bWxFbC5vZmZzZXRQYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxFbC5zY3JvbGxXaWR0aDtcbiAgICB9XG4gICAgdmFyIGNsb25lID0gaHRtbEVsLmNsb25lTm9kZSh0cnVlKTtcbiAgICBjbG9uZS5zdHlsZS5zZXRQcm9wZXJ0eSgncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgICBjbG9uZS5zdHlsZS5zZXRQcm9wZXJ0eSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgtOTk5OXB4LCAtOTk5OXB4KScpO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgdmFyIHNjcm9sbFdpZHRoID0gY2xvbmUuc2Nyb2xsV2lkdGg7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICByZXR1cm4gc2Nyb2xsV2lkdGg7XG59XG5cbmV4cG9ydCB7IGNsb3Nlc3QgYXMgYywgZXN0aW1hdGVTY3JvbGxXaWR0aCBhcyBlLCBtYXRjaGVzIGFzIG0gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../elements/dist/esm/ponyfill-495ec32d.js\n"));

/***/ })

}]);