{
  "compiler": {
    "name": "@stencil/core",
    "version": "2.14.0",
    "typescriptVersion": "4.5.4"
  },
  "components": [
    {
      "filePath": "./src/components/ino-autocomplete/ino-autocomplete.tsx",
      "fileName": "ino-autocomplete.tsx",
      "tag": "ino-autocomplete",
      "readme": "# ino-autocomplete\r\n\r\nA component that acts similar to the native `datalist` feature of the `<input>` element.\r\n\r\nIn contrast to other components, this one is stateful, which means that it contains its own state and is therefore less\r\nflexible to some extent.\r\n\r\nThis component handles the following tasks:\r\n\r\n* Management of the `value` property of the `<ino-input>` element\r\n* management of showing and hiding the different options filtered on the basis of the input\r\n* Keyboard navigation on the options\r\n\r\nThe options are filtered by `.includes(...)`, ignoring upper and lower case.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n\r\n<ino-autocomplete timeout=\"<number>\" no-options-text=\"<string>\">\r\n  <ino-input slot=\"input\" .../>\r\n  <ino-list slot=\"list\" ...>\r\n    <ino-option value=\"Value of Option A\">Option A</ino-option>\r\n    <ino-option value=\"Value of Option B\">Option B</ino-option>\r\n    <ino-option value=\"Value of Option C\">Option C</ino-option>\r\n  </ino-list>\r\n</ino-autocomplete>\r\n```\r\n\r\n### React\r\n\r\n```jsx\r\nimport { Component } from 'react';\r\nimport { InoAutocomplete, InoInput, InoList, InoListItem } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <InoAutocomplete debounceTimeout={150} noOptionsText={\"No option found!\"}>\r\n          <InoInput slot=\"input\"/>\r\n          <InoList slot=\"list\">\r\n            <InoOption value=\"Value of Option A\">Option A</InoOption>\r\n            <InoOption value=\"Value of Option B\">Option B</InoOption>\r\n            <InoOption value=\"Value of Option C\">Option C</InoOption>\r\n          </InoList>\r\n        </InoAutocomplete>\r\n      </>\r\n    );\r\n  }\r\n}\r\n```\r\n\r",
      "usage": {},
      "docs": "A component that acts similar to the native `datalist` feature of the `<input>` element.\r\n\r\nIn contrast to other components, this one is stateful, which means that it contains its own state and is therefore less\r\nflexible to some extent.\r\n\r\nThis component handles the following tasks:\r\n\r\n* Management of the `value` property of the `<ino-input>` element\r\n* management of showing and hiding the different options filtered on the basis of the input\r\n* Keyboard navigation on the options\r\n\r\nThe options are filtered by `.includes(...)`, ignoring upper and lower case.",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - An `<ino-input>` element that will be controlled by this component"
        },
        {
          "name": "slot",
          "text": "default - A list of `<ino-option>` elements as options"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "debounceTimeout",
          "type": "number",
          "mutable": false,
          "attr": "debounce-timeout",
          "reflectToAttr": false,
          "docs": "Timeout of the debouncing mechanism used when filtering the options.",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noOptionsText",
          "type": "string",
          "mutable": false,
          "attr": "no-options-text",
          "reflectToAttr": false,
          "docs": "Text to display when there are no options found.",
          "docsTags": [],
          "default": "'No Option'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the autocomplete",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits in three ways:\r\n\r\n1. Clicking on an option\r\n2. Pressing `Enter` while an option is selected\r\n3. Entering a valid value and blurring the input element\r\n\r\nContains one of the texts provided by the `<ino-options>`s.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-autocomplete-list-max-height",
          "annotation": "prop",
          "docs": "max height of option list"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "A list of `<ino-option>` elements as options"
        },
        {
          "name": "input",
          "docs": "An `<ino-input>` element that will be controlled by this component"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "valueChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-button/ino-button.tsx",
      "fileName": "ino-button.tsx",
      "tag": "ino-button",
      "readme": "# ino-button\r\n\r\nA button component with different styles and icon capability.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n### Web Component\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-button')\r\n  .addEventListener('click', (_) => alert('Button was clicked!'));\r\n```\r\n\r\n```html\r\n<ino-button\r\n  autofocus\r\n  disabled\r\n  name=\"<string>\"\r\n  form=\"<string>\"\r\n  type=\"<string>\"\r\n  color-scheme=\"<string>\"\r\n  fill=\"<string>\"\r\n  dense\r\n  onClick=\"handleClick()\"\r\n>\r\n  <ino-icon icon=\"add\"></ino-icon>\r\n  Button Content\r\n</ino-button>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```jsx\r\nimport { Component } from 'react';\r\nimport { InoButton, InoIcon } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoButton\r\n        inoColorScheme=\"dark\"\r\n        inoIconLeading\r\n        onClick={(_) => alert('Yeah, you clicked the button!')}\r\n      >\r\n        <InoIcon inoIcon=\"add\" />\r\n        You can click me!\r\n      </InoButton>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoButton } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Button: React.FunctionComponent<Components.InoButtonAttributes> = (\r\n  props,\r\n) => {\r\n  const { inoColorScheme, onClick } = props;\r\n\r\n  return (\r\n    <InoButton inoColorScheme={inoColorScheme} inoIconLeading onClick={onClick}>\r\n      <InoIcon inoIcon={'add'} />\r\n      You can click me!\r\n    </InoButton>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <Button\r\n        inoColorScheme=\"dark\"\r\n        onClick={(_) => alert('Yeah, you clicked the button!')}\r\n      />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Demo\r\n\r",
      "usage": {},
      "docs": "A button component with different styles and icon capability.",
      "docsTags": [
        {
          "name": "slot",
          "text": "icon-leading - For the icon to be prepended"
        },
        {
          "name": "slot",
          "text": "icon-trailing - For the icon to be appended"
        }
      ],
      "encapsulation": "none",
      "dependents": [
        "ino-input-file"
      ],
      "dependencies": [
        "ino-spinner"
      ],
      "dependencyGraph": {
        "ino-button": [
          "ino-spinner"
        ],
        "ino-input-file": [
          "ino-button"
        ]
      },
      "props": [
        {
          "name": "autoFocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Sets the autofocus for this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dense",
          "type": "boolean",
          "mutable": false,
          "attr": "dense",
          "reflectToAttr": false,
          "docs": "Makes the button text and container slightly smaller.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "mutable": false,
          "attr": "form",
          "reflectToAttr": false,
          "docs": "The form id this element origins to.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "Shows an infinite loading spinner and prevents further clicks.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of this form.\r\n\r\nCan either be `button`, `submit` or `reset`.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"filled\" | \"outlined\" | \"text\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "The button variant.\r\n\r\n* **filled**: Contain actions that are important for your application.\r\n* **outlined**: Buttons with medium highlighting. They contain actions that are important but are not the main action in an app.\r\n* **text**: Typically used for less prominent actions, including those in dialogs and cards.",
          "docsTags": [],
          "default": "'filled'",
          "values": [
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "outlined",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [
        {
          "name": "icon-leading",
          "docs": "For the icon to be prepended"
        },
        {
          "name": "icon-trailing",
          "docs": "For the icon to be appended"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-card/ino-card.tsx",
      "fileName": "ino-card.tsx",
      "tag": "ino-card",
      "readme": "# ino-card\r\n\r\nThe ino-card is a flexible and extensible component. It features a header, content, and footer slot that can be used to\r\nfully customize the appearance of the card.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n### Web Component\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-card')\r\n  .addEventListener('click', (_) => alert('Card was clicked!'));\r\n```\r\n\r\n```html\r\n<ino-card selected=\"<boolean>\" disable-elevation=\"<boolean>\">\r\n  <div slot=\"header\"><!-- Any content --></div>\r\n  <div slot=\"content\"><!-- Any content --></div>\r\n  <div slot=\"footer\"><!-- Any content --></div>\r\n</ino-card>\r\n```\r\n\r\n### React\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoCard, InoButton, InoImg } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoCard inoDisableElevation>\r\n        <div class=\"my-card__header\" slot=\"header\">\r\n          <h1>My awesome card</h1>\r\n        <div/>\r\n        <div class=\"my-card__content\" slot=\"content\">\r\n          <InoImg src=\"assets/picture_of_me.png\"></InoImg>\r\n        </div>\r\n        <div class=\"my-card__footer\" slot=\"footer\">\r\n          <InoButton>Send Email</InoButton>\r\n        </div>\r\n      </InoCard>\r\n    );\r\n  }\r\n}\r\n```\r\n\r",
      "usage": {},
      "docs": "The ino-card is a flexible and extensible component. It features a header, content, and footer slot that can be used to\r\nfully customize the appearance of the card.",
      "docsTags": [
        {
          "name": "slot",
          "text": "header - For the element to be placed in the card header"
        },
        {
          "name": "slot",
          "text": "content - For card content"
        },
        {
          "name": "slot",
          "text": "footer - For the element to be placed in the card footer"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-icon"
      ],
      "dependencyGraph": {
        "ino-card": [
          "ino-icon"
        ]
      },
      "props": [
        {
          "name": "disableElevation",
          "type": "boolean",
          "mutable": false,
          "attr": "disable-elevation",
          "reflectToAttr": false,
          "docs": "Disables the hover effect if true",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Selects the card and displays a check mark icon on top of the card",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--ino-card-background-color",
          "annotation": "prop",
          "docs": "background color of the card"
        },
        {
          "name": "--ino-card-background-color--active",
          "annotation": "prop",
          "docs": "background color of the card if active"
        },
        {
          "name": "--ino-card-background-color--focus",
          "annotation": "prop",
          "docs": "background color of the card on focus"
        },
        {
          "name": "--ino-card-background-color--hover",
          "annotation": "prop",
          "docs": "background color of the card on hover"
        },
        {
          "name": "--ino-card-border-color",
          "annotation": "prop",
          "docs": "border color of the card"
        },
        {
          "name": "--ino-card-border-thickness",
          "annotation": "prop",
          "docs": "thickness of the border"
        },
        {
          "name": "--ino-card-checkmark-background-color",
          "annotation": "prop",
          "docs": "background color of the check mark"
        },
        {
          "name": "--ino-card-checkmark-color",
          "annotation": "prop",
          "docs": "check mark color"
        }
      ],
      "slots": [
        {
          "name": "content",
          "docs": "For card content"
        },
        {
          "name": "footer",
          "docs": "For the element to be placed in the card footer"
        },
        {
          "name": "header",
          "docs": "For the element to be placed in the card header"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-carousel/ino-carousel.tsx",
      "fileName": "ino-carousel.tsx",
      "tag": "ino-carousel",
      "readme": "# ino-carousel\r\n\r\nThe `ino-carousel` component works in combination with the `ino-carousel-slide` component\r\nand can be used to display an array of images as a slide show. What is more,\r\nit also features an autoplay property that allows the slides to be changed automatically.\r\nLastly, using the css variables described at the bottom of the page, you can easily customize\r\nthe dimensions of the component as well as the duration of the slide transition.\r\n\r\n## Usage\r\n\r\nTo change the slide that is currently displayed, simply set the value of the `ino-carousel`\r\ncomponent to the value of the corresponding slide. This is, however, not required if autoplay is\r\nenabled since the component automatically manages the selection of the next slide.\r\n\r\nPlease be aware that setting the value of the `ino-carousel` to a non-existent value will result\r\nin the component selecting an existing slide on its own.\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-carousel\r\n  value=\"<any value>\"\r\n  autoplay=\"true\"\r\n  animated=\"true\"\r\n  hide-buttons=\"false\"\r\n  infinite=\"true\"\r\n  intermission=\"5000\"\r\n  reverse=\"false\"\r\n>\r\n  <ino-carousel-slide value=\"0\" src=\"<url>\"></ino-carousel-slide>\r\n  <ino-carousel-slide value=\"1\" src=\"<url>\"></ino-carousel-slide>\r\n  <ino-carousel-slide value=\"2\" src=\"<url>\"></ino-carousel-slide>\r\n</ino-carousel>\r\n```\r\n\r\n```jsx\r\nimport { Component } from 'react';\r\nimport {\r\n  InoButton,\r\n  InoCarousel,\r\n  InoCarouselSlide,\r\n} from '@inovex/elements/dist/react';\r\nimport React from 'react';\r\n\r\nclass MyComponent extends Component {\r\n  state = {\r\n    autoplay: false,\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.setState((state) => ({\r\n      autoplay: !state.autoplay,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <InoCarousel inoAutoplay={this.state.autoplay}>\r\n        <InoButton onClick={() => this.handleClick()}>\r\n          Start/Stop Slideshow\r\n        </InoButton>\r\n        <InoCarouselSlide value={'1'} src={'url'} />\r\n        <InoCarouselSlide value={'2'} src={'url'} />\r\n      </InoCarousel>\r\n    );\r\n  }\r\n}\r\n```\r\n\r",
      "usage": {},
      "docs": "The `ino-carousel` component works in combination with the `ino-carousel-slide` component\r\nand can be used to display an array of images as a slide show. What is more,\r\nit also features an autoplay property that allows the slides to be changed automatically.\r\nLastly, using the css variables described at the bottom of the page, you can easily customize\r\nthe dimensions of the component as well as the duration of the slide transition.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - One or more `ino-carousel-slide`"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-icon-button"
      ],
      "dependencyGraph": {
        "ino-carousel": [
          "ino-icon-button"
        ],
        "ino-icon-button": [
          "ino-icon"
        ]
      },
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "Enables the slide animation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autoplay",
          "type": "boolean",
          "mutable": false,
          "attr": "autoplay",
          "reflectToAttr": false,
          "docs": "Enables autoplay which causes slides to be changed automatically",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideButtons",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-buttons",
          "reflectToAttr": false,
          "docs": "Hides the arrow buttons",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "infinite",
          "type": "boolean",
          "mutable": false,
          "attr": "infinite",
          "reflectToAttr": false,
          "docs": "Restarts playback from the first slide upon reaching the last slide",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intermission",
          "type": "number",
          "mutable": false,
          "attr": "intermission",
          "reflectToAttr": false,
          "docs": "Sets the intermission between two slides (Unit: ms)",
          "docsTags": [],
          "default": "5000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reverse",
          "type": "boolean",
          "mutable": false,
          "attr": "reverse",
          "reflectToAttr": false,
          "docs": "Enables reverse playback of the slides",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Optional group value to manually manage the displayed slide",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--ino-carousel-animation-duration",
          "annotation": "prop",
          "docs": "sets the duration of the slide animation"
        },
        {
          "name": "--ino-carousel-height",
          "annotation": "prop",
          "docs": "sets the height of the carousel component"
        },
        {
          "name": "--ino-carousel-icon-color",
          "annotation": "prop",
          "docs": "sets the color of the navigation buttons"
        },
        {
          "name": "--ino-carousel-width",
          "annotation": "prop",
          "docs": "sets the width of the carousel component"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "One or more `ino-carousel-slide`"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-carousel-slide/ino-carousel-slide.tsx",
      "fileName": "ino-carousel-slide.tsx",
      "tag": "ino-carousel-slide",
      "readme": "# ino-carousel-slide\r\n\r",
      "usage": {},
      "docs": "",
      "docsTags": [],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "src",
          "type": "string",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "Link to the image",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the slide",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-checkbox/ino-checkbox.tsx",
      "fileName": "ino-checkbox.tsx",
      "tag": "ino-checkbox",
      "readme": "# ino-checkbox\r\n\r\nA checkbox that allows the user to select one or more items from a set of options.\r\n\r",
      "usage": {},
      "docs": "A checkbox that allows the user to select one or more items from a set of options.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Label of the checkbox"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [
        "ino-control-item"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ino-control-item": [
          "ino-checkbox"
        ]
      },
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Marks this element as checked. (**unmanaged**)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "mutable": false,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "Marks this element as indeterminate.\r\nIt indicates that a user is indeterminate without changing the checked state.\r\nIf a checkbox is unchecked and indeterminate then it will lose the indeterminate state on click and change to checked.\r\nFor more information, see [Documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes).",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selection",
          "type": "boolean",
          "mutable": false,
          "attr": "selection",
          "reflectToAttr": false,
          "docs": "Styles the checkbox as a selection variant that has a larger radius.\r\nWhile checkboxes are mainly used in lists, the selection should be used as a single, independent UI element.\r\nThe indeterminate state is not supported here.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "checkedChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the user clicks on the checkbox to change the checked state. Contains the status in `event.detail`.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--checkbox-container-color-unchecked",
          "annotation": "prop",
          "docs": "color of the checkbox container if unchecked"
        },
        {
          "name": "--ino-checkbox-background-color-disabled",
          "annotation": "prop",
          "docs": "color of the checkbox background if disabled"
        },
        {
          "name": "--ino-checkbox-checkmark-color",
          "annotation": "prop",
          "docs": "primary color of the check mark"
        },
        {
          "name": "--ino-checkbox-checkmark-color-disabled",
          "annotation": "prop",
          "docs": "color of the check mark if disabled"
        },
        {
          "name": "--ino-checkbox-color",
          "annotation": "prop",
          "docs": "primary color of the checkbox"
        },
        {
          "name": "--ino-checkbox-color-active",
          "annotation": "prop",
          "docs": "color of the checkbox if active"
        },
        {
          "name": "--ino-checkbox-color-hover",
          "annotation": "prop",
          "docs": "color of the checkbox on hover"
        },
        {
          "name": "--ino-checkbox-text-color-disabled",
          "annotation": "prop",
          "docs": "color of the checkbox text if disabled"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "Label of the checkbox"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-chip/ino-chip.tsx",
      "fileName": "ino-chip.tsx",
      "tag": "ino-chip",
      "readme": "# ino-chip\r\n\r\nThe ino-chip component displays the provided content and icon as a chip.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n### Web Component\r\n\r\n```js\r\nconst chip = document.querySelector('ino-chip');\r\nchip.addEventListener('chipClicked', (e) =>\r\n  console.log('This chip was clicked:', e.detail),\r\n)\r\nchip.addEventListener('chipRemoved', (e) =>\r\n  console.log('This chip was removed:', e.detail),\r\n);\r\n```\r\n\r\n```html\r\n\r\n<ino-chip\r\n  color-scheme=\"<string>\"\r\n  disabled\r\n  fill=\"<string>\"\r\n  label=\"<string>\"\r\n  removable\r\n  selectable\r\n  selected\r\n  value=\"<string>\"\r\n>\r\n  <ino-icon slot=icon-leading\" icon=\"<string>\"></ino-icon>\r\n</ino-chip>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1\r\n\r\n```tsx\r\nimport { Component } from 'react';\r\nimport { InoChipSet, InoChip } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n\r\n  fruits = [\"apple\", \"banana\", \"cherry\"];\r\n\r\n  handleChipClicked(e: CustomEvent<string>) {\r\n    console.log(\"User clicked the fruit: \", e.detail);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {fruits.map(fruit => (\r\n            <InoChip value={fruit} label={fruit} onChipClicked={this.handleChipClicked}/>\r\n          )\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2\r\n\r\n```tsx\r\nimport React, { Component } from 'react';\r\nimport { InoChipSet, InoChip } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst ChipSet = () => {\r\n\r\n  const fruits = [\"apple\", \"banana\", \"cherry\"];\r\n  const [selectedFruit, setSelectedFruit] = useState < string > (\"apple\");\r\n\r\n  return (\r\n    <div>\r\n      {fruits.map(fruit => (\r\n        <InoChip\r\n          value={fruit}\r\n          label={fruit}\r\n          selectable\r\n          selected={fruit === selectedFruit}\r\n          onChipClicked={(e) => setSelectedFruit(fruit)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n## Additional Hints\r\n\r\n**Content**: Use the `label` attribute to set the label of the chip. To add an icon to the left side of the chip, use the  icon` attribute.\r\n\r\n### Selection\r\nA set of chips can be used to implement a single or multi selection from a handful of options.\r\nHave a look at the **Selection** and **Filter** stories.\r\n\r\n### Removable chips\r\n\r\nIf `removable` is set to `true`, the chip can be removed by the user. \r\nThe component then displays a small `close` icon on the right side of the chip next to the label.\r\n\r\nHowever, the component will not be hidden or destroyed but instead emits a `removeChip`-Event. Thus, the component can be removed by subscribing to the corresponding event.\r\n\r\n## Demo\r\n\r",
      "usage": {},
      "docs": "The ino-chip component displays the provided content and icon as a chip.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - The label text of the chip"
        },
        {
          "name": "slot",
          "text": "icon-leading - For the icon to be prepended"
        },
        {
          "name": "slot",
          "text": "icon-trailing - For the icon to be appended - disables the `removable` property"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-icon"
      ],
      "dependencyGraph": {
        "ino-chip": [
          "ino-icon"
        ]
      },
      "props": [
        {
          "name": "colorScheme",
          "type": "\"dark\" | \"default\" | \"error\" | \"light\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color-scheme",
          "reflectToAttr": false,
          "docs": "The name of the color scheme which is used\r\nto style the background and outline of this component.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables all interactions.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fill",
          "type": "\"outline\" | \"solid\"",
          "mutable": false,
          "attr": "fill",
          "reflectToAttr": false,
          "docs": "The fill type of this element.",
          "docsTags": [],
          "default": "'solid'",
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "[DEPRECATED] Please use the default slot instead\r\n\r\nThe content of the component.",
          "docsTags": [
            {
              "name": "deprecated"
            }
          ],
          "deprecation": "",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "removable",
          "type": "boolean",
          "mutable": false,
          "attr": "removable",
          "reflectToAttr": false,
          "docs": "Adds a close icon on the right side of this chip which emits the `removeChip` event on click.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectable",
          "type": "boolean",
          "mutable": false,
          "attr": "selectable",
          "reflectToAttr": false,
          "docs": "Makes the chip selectable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Marks this element as selected (**works only in conjunction with `selectable`**)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of this chip.\r\nIs emitted by the `chipClicked` and `chipRemoved` events.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chipClicked",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event that emits the `value` as soon as the user clicks on the chip.",
          "docsTags": []
        },
        {
          "event": "chipRemoved",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event that emits the `value` as soon as the user clicks on the remove icon.\r\n\r\nListen to this event to hide or destroy this chip.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "The label text of the chip"
        },
        {
          "name": "icon-leading",
          "docs": "For the icon to be prepended"
        },
        {
          "name": "icon-trailing",
          "docs": "For the icon to be appended - disables the `removable` property"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-control-item/ino-control-item.tsx",
      "fileName": "ino-control-item.tsx",
      "tag": "ino-control-item",
      "readme": "# ino-list-item\r\n\r\nA list item component that displays a single instance of choice in a list or menu with a control element (radio-button or checkbox). It functions as a wrapper around the material [list item](https://github.com/material-components/material-components-web/blob/master/packages/mdc-list/) capabilities.\r\n\r\nThis component is used as child of `ino-list` and `ino-menu` components.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-control-item')\r\n  .addEventListener('checkedChange', (e) =>\r\n    console.log(\r\n      'The element itself or the checkbox was clicked. Its new value is:',\r\n      e.detail,\r\n    ),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-control-item\r\n  role=\"checkbox|radio\"\r\n  checked=\"<boolean>\"\r\n  disabled=\"<boolean>\"\r\n  name=\"<string>\"\r\n  value=\"<string>\"\r\n  tab-index=\"<number>\"\r\n  id=\"<string>\"\r\n  activated\r\n  text=\"<string>\"\r\n  secondary-text=\"<string>\"\r\n  selected=\"<boolean>\"\r\n  indeterminate=\"<boolean>\"\r\n  oncheckedchange=\"handleCheckChange()\"\r\n  trailing=\"<boolean>\"\r\n>\r\n  ...\r\n</ino-control-item>\r\n```\r\n\r\n**Slot:** This component supports icons and text as children. Just declare your icon or text inside of the `ino-control-item`-Element and it will be placed according to the `trailing`-Property.\r\n\r\n**Two lines:** For items having two lines, provide an `secondary-text` and make sure you set the `two-lines` attribute in the respective parent component (only available for `ino-list`).\r\n\r\n**Trailing:** Positions the control element at the end of the line\r\n\r\n### Restrictions\r\n\r\nPlease note that only text is supported as a trailing element. However, your icons can be placed at the leading position. To do so, use the `trailing`-Property and declare your icon inside of the element as shown below.\r\n\r\n```html\r\n<ino-control-item\r\n  role=\"checkbox\"\r\n  trailing\r\n  text=\"Checkbox-Item with a leading icon\"\r\n>\r\n  <ino-icon icon=\"add\" />\r\n</ino-control-item>\r\n\r\n<ino-control-item\r\n  role=\"checkbox\"\r\n  text=\"Checkbox-Item with trailing metadata\"\r\n>\r\n  <p>Some Metadata</p>\r\n</ino-control-item>\r\n```\r\n\r",
      "usage": {},
      "docs": "A list item component that displays a single instance of choice in a list or menu with a control element (radio-button or checkbox). It functions as a wrapper around the material [list item](https://github.com/material-components/material-components-web/blob/master/packages/mdc-list/) capabilities.\r\n\r\nThis component is used as child of `ino-list` and `ino-menu` components.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Any element"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-list-item",
        "ino-checkbox",
        "ino-radio"
      ],
      "dependencyGraph": {
        "ino-control-item": [
          "ino-list-item",
          "ino-checkbox",
          "ino-radio"
        ]
      },
      "props": [
        {
          "name": "activated",
          "type": "boolean",
          "mutable": false,
          "attr": "activated",
          "reflectToAttr": false,
          "docs": "Styles the row in an activated style.\r\n\r\nIn contrast to `selected`, use this for only one item\r\nand to mark it as permanently activated.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Marks this element as checked. (**unmanaged**)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "mutable": false,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "Marks this element as indeterminate (**unmanaged**)\r\nCheckbox only",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "role",
          "type": "\"checkbox\" | \"radio\"",
          "mutable": false,
          "attr": "role",
          "reflectToAttr": false,
          "docs": "The type of control element",
          "docsTags": [],
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "secondaryText",
          "type": "string",
          "mutable": false,
          "attr": "secondary-text",
          "reflectToAttr": false,
          "docs": "Sets the secondary text of this list item.\r\n\r\nRequires `two-lines` on the parent `ino-list` element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Styles the row in a selected style.\r\n\r\nIn contrast to `activated`, use this option to select one\r\nor multiple items that are likely to change soon.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The primary text of this list item (required).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "trailing",
          "type": "boolean",
          "mutable": false,
          "attr": "trailing",
          "reflectToAttr": false,
          "docs": "Places the checkbox at the end of the item",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "checkedChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the user clicks on the checkbox or the list item to change the checked state. Contains the status in `event.detail`.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Any element"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-currency-input/ino-currency-input.tsx",
      "fileName": "ino-currency-input.tsx",
      "tag": "ino-currency-input",
      "readme": "# ino-currency-input\r\nA component providing currency functionality by extending a `ino-input`. Main objectives of this component are the separatation of formatted currency values from its numeric values and to handle different currency locales.\r\n\r\nThe `ino-currency-input` controls an underlying `ino-input` and evaluates its value on blur. While the `ino-input` has the textual user input as value, the `ino-currency-input` provides a numeric value of the currency. In theory, you can use all `ino-input` properties. However, properties like maxlength, step, etc. make no sense for currency inputs and are thus not supported.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-currency-input')\r\n  .addEventListener('valueChange', e => alert(`The new input value is: ${e.detail}`));\r\n```\r\n```html\r\n<ino-currency-input value=\"<number>\" currency-locale=\"<string>\">\r\n  <ino-input type=\"text\" ...></ino-input>\r\n</ino-currency-input>\r\n```\r\n\r\nThe child input element requires to be of type `text`.\r\n\r\n### Event behaviour\r\nThe currency input watches for value changes on the underlying `ino-input`, updates the inputs value and stops the event propagation. In order to avoid distraction for the user, the currency input only formats the input value on focus and on blur. Furthermore, the `ino-currency-input` itself emits a `valueChange` event when the user commits a currency value (on blur).\r\n\r\n### Locales\r\nThe currency input uses a native number formatter which supports a vary of different locales (see [Documentation](https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument)). On a component level, you can provide any supported locale via the `currency-locale` attribute.\r\n\r\nHowever, it may be useful to define a global locale for currencies, This may even differ from the application's locale, for instance a Belgian application may use English as language but the German currency format. For this reason, you can provide the `currencyLocale` option on the global configuration.\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoCurrencyInput, InoInput } from '@inovex.de/elements-react';\r\n\r\nclass MyComponent extends Component {\r\n  onValueChange(e: any) {\r\n    alert(`The new value is ${e.detail}`);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <InoCurrencyInput\r\n        placeholder=\"You can insert some text...\"\r\n        onValueChange={onValueChange}\r\n      >\r\n        <InoInput type=\"text\" />\r\n      </InoCurrencyInput>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoCurrencyInput, InoInput } from '@inovex.de/elements-react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst CurrencyInput: React.FunctionComponent<Components.InoCurrencyInputAttributes> = props => {\r\n  const { placeholder } = props;\r\n\r\n  const onValueChange = (e: any) => {\r\n    alert(`The new value is ${e.detail}`);\r\n  };\r\n\r\n  return (\r\n      <InoCurrencyInput onValueChange={onValueChange}>\r\n        <InoInput type=\"text\" />\r\n      </InoCurrencyInput>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <CurrencyInput placeholder=\"You can insert some text...\" />;\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r",
      "usage": {},
      "docs": "A component providing currency functionality by extending a `ino-input`. Main objectives of this component are the separatation of formatted currency values from its numeric values and to handle different currency locales.\r\n\r\nThe `ino-currency-input` controls an underlying `ino-input` and evaluates its value on blur. While the `ino-input` has the textual user input as value, the `ino-currency-input` provides a numeric value of the currency. In theory, you can use all `ino-input` properties. However, properties like maxlength, step, etc. make no sense for currency inputs and are thus not supported.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - `<ino-input>` of `type=\"text\"`"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "currencyLocale",
          "type": "string",
          "mutable": false,
          "attr": "currency-locale",
          "reflectToAttr": false,
          "docs": "A supported locale for currency number formatting. If not given, it uses the global config.\r\nSee https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Numeric currency value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the user types something in.\r\nContains typed input in `event.detail`",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "`<ino-input>` of `type=\"text\"`"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-datepicker/ino-datepicker.tsx",
      "fileName": "ino-datepicker.tsx",
      "tag": "ino-datepicker",
      "readme": "# ino-datepicker\r\n\r\nA datepicker is a ui component to select dates and times. It behaves like a native `input` but uses the [flatpickr](https://github.com/flatpickr/flatpickr) library for a better ui experience.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n### Web Component\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-datepicker')\r\n  .addEventListener('valueChange', (e) =>\r\n    alert(`The new datepicker value is: ${e.detail}`),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-datepicker\r\n  autofocus\r\n  disabled\r\n  name=\"<string>\"\r\n  required\r\n  value=\"<string>\"\r\n  min=\"<string>\"\r\n  max=\"<string>\"\r\n  minute-step=\"<number>\"\r\n  hour-step=\"<number>\"\r\n  inline=\"<boolean>\"\r\n  range\r\n  outline\r\n  placeholder=\"<string>\"\r\n  label=\"<string>\"\r\n  pattern=\"<string>\"\r\n  date-format=\"<string>\"\r\n  default-date=\"<string>\"\r\n  default-hour=\"<number>\"\r\n  default-minute=\"<number>\"\r\n  twelve-hour-time\r\n  helper=\"<string>\"\r\n  helper-persistent\r\n  helper-validation\r\n>\r\n</ino-datepicker>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoDatepicker } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  valueChange(e: any) {\r\n    alert(`The new value is ${e.detail}`);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <InoDatepicker\r\n        inoLabel=\"Select a date\"\r\n        inoHelper=\"Choose a date\"\r\n        onValueChange={valueChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoDatepicker } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Datepicker: React.FunctionComponent<Components.InoDatepickerAttributes> = (\r\n  props,\r\n) => {\r\n  const { inoLabel, inoHelper } = props;\r\n\r\n  const valueChange = (e: any) => {\r\n    alert(`The new value is ${e.detail}`);\r\n  };\r\n\r\n  return (\r\n    <InoDatepicker\r\n      inoLabel={inoLabel}\r\n      inoHelper={inoHelper}\r\n      onValueChange={valueChange}\r\n    />\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <Datepicker inoLabel=\"Select a date\" inoHelper=\"Choose a date\" />;\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\n### Types\r\n\r\nThis datepicker can be used as a picker for ...\r\n\r\n- date\r\n- time\r\n- datetime\r\n- month\r\n\r\nThe type of the picker is selected based on the  type` property. See the examples below.\r\n\r\n#### Datepicker\r\n\r\n```html\r\n<ino-datepicker type=\"date\" label=\"Date\"></ino-datepicker>\r\n```\r\n\r\n#### Timepicker\r\n\r\n```html\r\n<ino-datepicker type=\"time\" label=\"Time\"></ino-datepicker>\r\n```\r\n\r\n#### Date-Time-Picker\r\n\r\n```html\r\n<ino-datepicker type=\"datetime\" label=\"Datetime\"> </ino-datepicker>\r\n```\r\n\r\n#### Monthpicker\r\n\r\n```html\r\n<ino-datepicker type=\"month\" label=\"Month\"></ino-datepicker>\r\n```\r\n\r\n## Demo\r\n\r",
      "usage": {},
      "docs": "A datepicker is a ui component to select dates and times. It behaves like a native `input` but uses the [flatpickr](https://github.com/flatpickr/flatpickr) library for a better ui experience.",
      "docsTags": [
        {
          "name": "slot",
          "text": "icon-leading - Leading `ino-icon` of the underyling ino-input (only for inline pickers)"
        },
        {
          "name": "slot",
          "text": "icon-trailing - Trailing `ino-icon` of the underyling ino-input (only for inline pickers)"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-input",
        "ino-icon"
      ],
      "dependencyGraph": {
        "ino-datepicker": [
          "ino-input",
          "ino-icon"
        ],
        "ino-input": [
          "ino-label",
          "ino-icon"
        ]
      },
      "props": [
        {
          "name": "appendTo",
          "type": "string",
          "mutable": false,
          "attr": "append-to",
          "reflectToAttr": true,
          "docs": "Optional id of an element to append the datepicker to.\r\nDefault is:\r\n * the host element for inline pickers\r\n * body for collapsable pickers",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "attachToBody",
          "type": "boolean",
          "mutable": false,
          "attr": "attach-to-body",
          "reflectToAttr": false,
          "docs": "Attach calendar overlay to body (true) or\r\nPosition the calendar inside the wrapper and inside the ino-datepicker (false)",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autoFocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Autofocuses this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dateFormat",
          "type": "string",
          "mutable": false,
          "attr": "date-format",
          "reflectToAttr": false,
          "docs": "A string to change the date format.\r\nPossible values are listed [here](https://flatpickr.js.org/formatting/).\r\nThe default value is `d-m-Y` which accepts values like `01-01-2019`.",
          "docsTags": [],
          "default": "'d-m-Y'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "defaultDate",
          "type": "string | string[]",
          "mutable": false,
          "attr": "default-date",
          "reflectToAttr": false,
          "docs": "A string/array containing the initial date of the datepicker overlay. If you're using `inoRange = true` provide an array.\r\nIf a `value` is given, this will be ignored.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "defaultHour",
          "type": "number",
          "mutable": false,
          "attr": "default-hour",
          "reflectToAttr": false,
          "docs": "A number containing the initial hour in the date-time picker overlay.\r\nIf a `value` is given, this will be ignored.",
          "docsTags": [],
          "default": "12",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultMinute",
          "type": "number",
          "mutable": false,
          "attr": "default-minute",
          "reflectToAttr": false,
          "docs": "A number containing the initial minute in the date-time picker overlay.\r\nIf a `value` is given, this will be ignored.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "error",
          "type": "boolean",
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "Displays the datepicker as invalid if set to true.\r\nIf the property is not set or set to false,\r\nthe validation is handled by the default validation.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helper",
          "type": "string",
          "mutable": false,
          "attr": "helper",
          "reflectToAttr": false,
          "docs": "The helper text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperPersistent",
          "type": "boolean",
          "mutable": false,
          "attr": "helper-persistent",
          "reflectToAttr": false,
          "docs": "Displays the helper permanently.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperValidation",
          "type": "boolean",
          "mutable": false,
          "attr": "helper-validation",
          "reflectToAttr": false,
          "docs": "Styles the helper text as a validation message.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hourStep",
          "type": "number",
          "mutable": false,
          "attr": "hour-step",
          "reflectToAttr": false,
          "docs": "Adjusts the step for the hour input (incl. scrolling)\r\nDefault is 1",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": false,
          "docs": "Displays the datepicker inlined.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label for this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum date that a user can pick to (inclusive).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum date that a user can start picking from (inclusive).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minuteStep",
          "type": "number",
          "mutable": false,
          "attr": "minute-step",
          "reflectToAttr": false,
          "docs": "Adjusts the step for the minute input (incl. scrolling)\r\nDefault is 5",
          "docsTags": [],
          "default": "5",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input name of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Styles the datepicker as outlined element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The placeholder of the input element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "range",
          "type": "boolean",
          "mutable": false,
          "attr": "range",
          "reflectToAttr": false,
          "docs": "If true, enables the user to choose two dates as an interval.\r\nOnly works with `type=\"date\"`",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Marks this element as required.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showLabelHint",
          "type": "boolean",
          "mutable": false,
          "attr": "show-label-hint",
          "reflectToAttr": false,
          "docs": "If true, an *optional* message is displayed if not required,\r\notherwise a * marker is displayed if required",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "twelveHourTime",
          "type": "boolean",
          "mutable": false,
          "attr": "twelve-hour-time",
          "reflectToAttr": false,
          "docs": "If true, displays time picker in 12 hour mode with AM/PM selection.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"date\" | \"datetime\" | \"month\" | \"time\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Selects the correct picker corresponding to the given type.",
          "docsTags": [],
          "default": "'date'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "datetime",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The currently selected date shown in the input field **unmanaged**. The given value\r\nwill not be formatted as date.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "redraw",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "redraw() => Promise<void>",
          "parameters": [],
          "docs": "Redraws the datepicker.",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input`.\r\nUse this method instead of the global `input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input`.\r\nUse this method instead of the global `input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "valueChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the value of the datepicker changes.\r\nThe value can be found in `event.detail`",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "icon-leading",
          "docs": "Leading `ino-icon` of the underyling ino-input (only for inline pickers)"
        },
        {
          "name": "icon-trailing",
          "docs": "Trailing `ino-icon` of the underyling ino-input (only for inline pickers)"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "clickEl",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-dialog/ino-dialog.tsx",
      "fileName": "ino-dialog.tsx",
      "tag": "ino-dialog",
      "readme": "# ino-dialog\r\n\r\nThe ino-dialog component displays a modal window that can be used to display additional information or notify the user.\r\nIt is based on the mdc-dialog and is fully customizable. The styling of a dialog's content must be provided by users.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n### Web Component\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-dialog')\r\n  .addEventListener('close', (e) =>\r\n    alert(`dialog has been closed with action: ${e.detail}`),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-dialog>\r\n  <div class=\"awesome-content\"></div>\r\n</ino-dialog>\r\n```\r\n\r\n### React\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport { Component } from 'react';\r\nimport { InoButton, InoDialog } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n\r\n  state = {\r\n    open: false\r\n  };\r\n\r\n  handleEvent = () => {\r\n    this.setState((open) => ({\r\n      open: !open\r\n    }))\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <InoButton onClick={() => this.handleEvent()}>Open Dialog</InoButton>\r\n        <InoDialog open={this.state.open}>\r\n          <div class=\"awesome-content\"/>\r\n        </InoDialog>\r\n      </>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional information\r\n\r\n### Sizing\r\nThe dialog is displayed in the middle (horiziontally and vertically centered) on a surface.\r\nIn order to customize the dialog's size, use the `--ino-dialog-height` and `--ino-dialog-width` properties.\r\nEither use a fixed value or use css calc (f.e. `calc(100% - 60px)` to add a margin auf `30px` on both sides).\r\n\r\n### Fullwidth\r\nA Fullwidth dialog is a distinct variant which has 100% width an is attached to the bottom of the page. It scrolls up and defines a small\r\nmargin at top for the background scrim and escape for dialog close. It's not recommenended to use this option with `--ino-dialog-width` and `--ino-dialog-height`.\r\n\r\n### Closing actions\r\nYou can mark elements as \"action elements\" by providing a `data-ino-dialog-action=\"action-name\"` attribute.\r\nOn user clicks, the dialog checks whether the target is a dialog action and, if true, emits a `close` event with `event.detail = \"action-name\"`.\r\n\r\nSubsequently, listen to the `close` Event and check the `event.detail` to retrieve the users action.\r\n\r",
      "usage": {},
      "docs": "The ino-dialog component displays a modal window that can be used to display additional information or notify the user.\r\nIt is based on the mdc-dialog and is fully customizable. The styling of a dialog's content must be provided by users.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - content of the dialog"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "attachTo",
          "type": "string",
          "mutable": false,
          "attr": "attach-to",
          "reflectToAttr": false,
          "docs": "The target element the dialog should be attached to.\r\nIf not given, the dialog is a child of the documents body.\r\nNote: This property is immutable after initialization.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dismissible",
          "type": "boolean",
          "mutable": false,
          "attr": "dismissible",
          "reflectToAttr": false,
          "docs": "Close the dialog on pressing the ESC key or clicking outside of the dialog.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fullwidth",
          "type": "boolean",
          "mutable": false,
          "attr": "fullwidth",
          "reflectToAttr": false,
          "docs": "Defines a full width dialog sliding up from the bottom of the page.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": false,
          "attr": "open",
          "reflectToAttr": false,
          "docs": "Opens the dialog if set to true",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "close",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits an event upon closing the dialog",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-dialog-background-color",
          "annotation": "prop",
          "docs": "background color of the dialog"
        },
        {
          "name": "--ino-dialog-border",
          "annotation": "prop",
          "docs": "border shorthand of the dialog"
        },
        {
          "name": "--ino-dialog-border-radius",
          "annotation": "prop",
          "docs": "border-radius of the dialog"
        },
        {
          "name": "--ino-dialog-box-shadow",
          "annotation": "prop",
          "docs": "box-shadow of the dialog"
        },
        {
          "name": "--ino-dialog-height",
          "annotation": "prop",
          "docs": "height of the dialog"
        },
        {
          "name": "--ino-dialog-overlay-background-color",
          "annotation": "prop",
          "docs": "background color of the overlay"
        },
        {
          "name": "--ino-dialog-width",
          "annotation": "prop",
          "docs": "width of the dialog"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "content of the dialog"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "keyup",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-fab/ino-fab.tsx",
      "fileName": "ino-fab.tsx",
      "tag": "ino-fab",
      "readme": "# ino-fab\r\n\r\nA floating action button represents the primary action in an application. [Floating Action Button](https://github.com/material-components/material-components-web/tree/master/packages/mdc-fab) component.\r\nIt appears in front of all screen content, typically as a circular shape with an icon in its center.\r\n\r\nFABs come in three types: regular, mini, and extended.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-fab\r\n  icon=\"<string>\"\r\n  label=\"<string>\"\r\n  extended\r\n  mini\r\n  tooltip-placement=\"<string>\"\r\n  disabled\r\n>\r\n</ino-fab>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoFab } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  handleClick = (e: any) => {\r\n    alert(`Fab was clicked`);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <InoFab\r\n        inoIcon=\"star\"\r\n        inoLabel=\"This is a fab\"\r\n        onClick={this.handleClick}\r\n      />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoFab } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Fab: React.FunctionComponent<Components.InoFabAttributes> = (props) => {\r\n  const { inoLabel, inoIcon } = props;\r\n\r\n  const handleClick = (e: any) => {\r\n    alert(`Fab was clicked`);\r\n  };\r\n\r\n  return <InoFab inoIcon={inoIcon} inoLabel={inoLabel} onClick={handleClick} />;\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <Fab inoLabel=\"This is a fab\" inoIcon=\"star\" />;\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\n**Content**: Use the  label` attribute to set the text of a fab. To add an icon, use the  icon` attribute.\r\n\r\n## Demo\r\n\r",
      "usage": {},
      "docs": "A floating action button represents the primary action in an application. [Floating Action Button](https://github.com/material-components/material-components-web/tree/master/packages/mdc-fab) component.\r\nIt appears in front of all screen content, typically as a circular shape with an icon in its center.\r\n\r\nFABs come in three types: regular, mini, and extended.",
      "docsTags": [
        {
          "name": "slot",
          "text": "icon-leading - For the icon to be prepended"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [
        "ino-fab-set"
      ],
      "dependencies": [
        "ino-tooltip",
        "ino-icon"
      ],
      "dependencyGraph": {
        "ino-fab": [
          "ino-tooltip",
          "ino-icon"
        ],
        "ino-fab-set": [
          "ino-fab"
        ]
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "edgePosition",
          "type": "\"bottom-left\" | \"bottom-right\" | \"none\" | \"top-left\" | \"top-right\"",
          "mutable": false,
          "attr": "edge-position",
          "reflectToAttr": false,
          "docs": "The position of the edge.",
          "docsTags": [],
          "default": "'top-left'",
          "values": [
            {
              "value": "bottom-left",
              "type": "string"
            },
            {
              "value": "bottom-right",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "top-left",
              "type": "string"
            },
            {
              "value": "top-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "extended",
          "type": "boolean",
          "mutable": false,
          "attr": "extended",
          "reflectToAttr": false,
          "docs": "Optional, modifies the FAB to wider size which includes a text label.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Adds an icon to the Fab.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "This property is deprecated and will be removed with the next major release. Instead, use the `icon-leading` slot."
            }
          ],
          "deprecation": "This property is deprecated and will be removed with the next major release. Instead, use the `icon-leading` slot.",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Optional, for the text label. Applicable only for Extended FAB.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mini",
          "type": "boolean",
          "mutable": false,
          "attr": "mini",
          "reflectToAttr": false,
          "docs": "Optional, modifies the FAB to a smaller size",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipPlacement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"none\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "tooltip-placement",
          "reflectToAttr": false,
          "docs": "The placement of the tooltip which will be displayed when the button is not extended.\r\nUse `none`, if you don't want a tooltip to be displayed.",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--fab-background-color",
          "annotation": "prop",
          "docs": "Background color"
        },
        {
          "name": "--fab-background-color-active",
          "annotation": "prop",
          "docs": "Background color if active"
        },
        {
          "name": "--fab-background-color-disabled",
          "annotation": "prop",
          "docs": "Background color if disabled"
        },
        {
          "name": "--fab-background-color-hover",
          "annotation": "prop",
          "docs": "Background color on hover"
        },
        {
          "name": "--fab-color-disabled",
          "annotation": "prop",
          "docs": "Text color if disabled"
        },
        {
          "name": "--fab-icon-color",
          "annotation": "prop",
          "docs": "Color of the slotted icon"
        },
        {
          "name": "--fab-icon-color-disabled",
          "annotation": "prop",
          "docs": "Color of the slotted icon if disabled"
        },
        {
          "name": "--ino-fab-color",
          "annotation": "prop",
          "docs": "Text color"
        }
      ],
      "slots": [
        {
          "name": "icon-leading",
          "docs": "For the icon to be prepended"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-fab-set/ino-fab-set.tsx",
      "fileName": "ino-fab-set.tsx",
      "tag": "ino-fab-set",
      "readme": "# ino-fab-set\r\n\r\nThe ino-fab-set component serves as a container for multiple fab buttons. It contains actions related to the main fab\r\nbutton. Upon interacting with the fab button, a FAB-Set can display three to six related actions in the form of a speed\r\ndial.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n\r\n<ino-fab-set\r\n  top-bottom-location=\"<string>\"\r\n  left-right-location=\"<string>\"\r\n  dial-direction=\"<string>\"\r\n  open-dial\r\n>\r\n  <ino-fab ...></ino-fab>\r\n  <ino-fab ...></ino-fab>\r\n  ...\r\n</ino-fab-set>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoFab, InoFabSet } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  state = {\r\n    open: false,\r\n  };\r\n\r\n  handleClick = (e: any) => {\r\n    alert(`Fab-Set was clicked`);\r\n    this.setState({ open: !this.state.open });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <FabSet\r\n        openDial={this.state.open}\r\n        dialDirection=\"top\"\r\n        onClick={handleClick}\r\n      >\r\n        <InoFab mini label=\"Profile\" icon=\"person\"/>\r\n        <InoFab mini label=\"Search\" icon=\"search\"/>\r\n        <InoFab mini label=\"Help\" icon=\"help\"/>\r\n      </FabSet>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoFab, InoFabSet } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst FabSet: React.FunctionComponent<Components.InoFabSetAttributes> = (\r\n  props,\r\n) => {\r\n  const { dialDirection } = props;\r\n\r\n  return (\r\n    <InoFabSet dialDirection={dialDirection}>{props.children}</InoFabSet>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <FabSet dialDirection=\"top\">\r\n        <InoFab mini label=\"Profile\" icon=\"person\"/>\r\n        <InoFab mini label=\"Search\" icon=\"search\"/>\r\n        <InoFab mini label=\"Help\" icon=\"help\"/>\r\n      </FabSet>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\n**Content**: Put the FABs for the speed dial inside of `ino-fab-set` as `ino-fab`.\r\n\r\n### Manage icons\r\n\r\n> **Note:** To use the provided icons in your consumer project, you need to copy all contents of\r\n> `node_modules/@inovex.de/elements/dist/inovex-elements/ino-icon` into your `dist/ino-icon` folder. All icons are expected\r\n> at runtime to be located in `ino-icon/`. Please refer to the Storybook documentation to get detailed instructions\r\n> on how to integrate the icons with Angular, React or plain JavaScript.\r\n\r\n## Control flow\r\n\r\nThe ino-fab-set has a controlled (unmanaged) attribute `openDial`. For this reason, listen to `click` events, sync to\r\nyour local state and pass the state to the component again to open/close the fab-set.\r\n\r",
      "usage": {},
      "docs": "The ino-fab-set component serves as a container for multiple fab buttons. It contains actions related to the main fab\r\nbutton. Upon interacting with the fab button, a FAB-Set can display three to six related actions in the form of a speed\r\ndial.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - One or more `ino-fab`"
        },
        {
          "name": "slot",
          "text": "icon-opened - The icon of the FAB button while being open"
        },
        {
          "name": "slot",
          "text": "icon-closed - The icon of the FAB button while being closed"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "ino-fab",
        "ino-icon"
      ],
      "dependencyGraph": {
        "ino-fab-set": [
          "ino-fab",
          "ino-icon"
        ],
        "ino-fab": [
          "ino-tooltip",
          "ino-icon"
        ]
      },
      "props": [
        {
          "name": "dialDirection",
          "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
          "mutable": false,
          "attr": "dial-direction",
          "reflectToAttr": false,
          "docs": "The direction of the speed dial.\r\nPossible values: `top` (default), `bottom`, `right`, `left`.",
          "docsTags": [],
          "default": "'top'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leftRightLocation",
          "type": "\"left\" | \"right\"",
          "mutable": false,
          "attr": "left-right-location",
          "reflectToAttr": false,
          "docs": "The side where the Fab is displayed.\r\nPossible values: `right`, `left` (default).",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "openDial",
          "type": "boolean",
          "mutable": false,
          "attr": "open-dial",
          "reflectToAttr": false,
          "docs": "Opens the dial (**uncontrolled**)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "topBottomLocation",
          "type": "\"bottom\" | \"top\"",
          "mutable": false,
          "attr": "top-bottom-location",
          "reflectToAttr": false,
          "docs": "The side where the Fab is displayed.\r\nPossible values: `top`, `bottom` (default).",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "One or more `ino-fab`"
        },
        {
          "name": "icon-closed",
          "docs": "The icon of the FAB button while being closed"
        },
        {
          "name": "icon-opened",
          "docs": "The icon of the FAB button while being open"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-form-row/ino-form-row.tsx",
      "fileName": "ino-form-row.tsx",
      "tag": "ino-form-row",
      "readme": "# ino-form-row\r\n\r\nA component that styles a form element as a row with a leading label.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n\r\n<ino-form-row label=\"<string>\" mandatory>\r\n  Any desired form element\r\n</ino-form-row>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```jsx\r\nimport { Component } from 'react';\r\nimport { InoFormRow, InoInput } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <InoFormRow label=\"This is a form row\" mandatory>\r\n          <InoInput></InoInput>\r\n        </InoFormRow>\r\n        <InoFormRow label=\"This is another form row\" mandatory>\r\n          <InoInput></InoInput>\r\n        </InoFormRow>\r\n        <InoFormRow label=\"This is one more form row without mandatory field\">\r\n          <InoInput></InoInput>\r\n        </InoFormRow>\r\n      </>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```jsx\r\nimport React, { Component } from 'react';\r\nimport { InoFormRow, InoInput } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst FormRow: React.FunctionComponent<Components.InoFormRowAttributes> = props => {\r\n  const { label, mandatory } = props;\r\n\r\n  return <InoFormRow label={label} mandatory={mandatory}>{props.children}</InoFormRow>\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <FormRow label=\"This is a form row\" mandatory>\r\n          <InoInput></InoInput>\r\n        </FormRow>\r\n        <FormRow label=\"This is another form row\" mandatory>\r\n          <InoInput></InoInput>\r\n        </FormRow>\r\n        <FormRow label=\"This is one more form row without mandatory field\">\r\n          <InoInput></InoInput>\r\n        </FormRow>\r\n      </>\r\n    )\r\n  }\r\n}\r\n```\r\n\r",
      "usage": {},
      "docs": "A component that styles a form element as a row with a leading label.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Any element"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label for this form row which describes the form element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mandatory",
          "type": "boolean",
          "mutable": false,
          "attr": "mandatory",
          "reflectToAttr": false,
          "docs": "An indicator which marks the contents of the form row as mandatory.\r\nIf you use this make sure you also check for the values in your application logic.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Any element"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-header/ino-header.tsx",
      "fileName": "ino-header.tsx",
      "tag": "ino-header",
      "readme": "# ino-header\r\n\r\nA header component with a separator.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n### Web Component\r\n\r\n```html\r\n<ino-header text=\"<string>\"></ino-header>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoHeader } from '@inovex.de/elements-react/';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <InoHeader text=\"My awesome header!\"></InoHeader>;\r\n  }\r\n}\r\n```\r\n\r\n## Demo\r\n\r",
      "usage": {},
      "docs": "A header component with a separator.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - The text to display"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "[DEPRECATED] Please use the default slot instead of this prop.",
          "docsTags": [
            {
              "name": "deprecated"
            }
          ],
          "deprecation": "",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--ino-header-box-color",
          "annotation": "prop",
          "docs": "Color of the header box"
        },
        {
          "name": "--ino-header-color",
          "annotation": "prop",
          "docs": "Text color of the header"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "The text to display"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-icon/ino-icon.tsx",
      "fileName": "ino-icon.tsx",
      "tag": "ino-icon",
      "readme": "# ino-icon\r\n\r\nA light icon component for texts and other components.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument.querySelector('ino-icon').addEventListener('clickEl', (e) => {\r\n  // ...\r\n});\r\n```\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-icon')\r\n  .addEventListener('clickEl', (_) => alert('The icon was clicked'));\r\n```\r\n\r\n```html\r\n<ino-icon icon=\"<string>\" clickable onclickel=\"handleClickEl()\">\r\n</ino-icon>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```jsx\r\nimport { Component } from 'react';\r\nimport { InoIcon } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  handleClick = (e: any) => {\r\n    alert(`Icon was clicked`);\r\n  };\r\n\r\n  render() {\r\n    return <InoIcon icon=\"search\" clickable onClickEl={handleClick} />;\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```jsx\r\nimport React, { Component } from 'react';\r\nimport { InoIcon } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Icon: React.FunctionComponent<Components.InoIconAttributes> = (props) => {\r\n  const { icon } = props;\r\n\r\n  const handleClick = (e: any) => {\r\n    alert(`Icon was clicked`);\r\n  };\r\n\r\n  return (\r\n    <InoIcon icon={icon} onClickEl={handleClick}>\r\n      {props.children}\r\n    </InoIcon>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <Icon icon=\"search\" />;\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\nThe component inherits styles, such as the text size, from the parent element. For custom styles, use the css properties of the component.\r\n\r\n**Clickable icon:** Make an icon interactive with the optional attribute `clickable`. Clickable icons emit a `clickEl` event.\r\n\r\n### Add icons\r\n\r\nIf you would like to add custom icons, you have to add them to the `src/assets/ino-icon` folder and execute the `yarn icon:integrate-icons`\r\ncommand to include the newly added icons in the `icons.js` file.\r\n\r\n> **Note:** To use the provided icons in your consumer project, you need to copy all contents of\r\n> `node_modules/@inovex.de/elements/dist/inovex-elements/ino-icon` into your `dist/ino-icon` folder. All icons are expected\r\n> to be located in `ino-icon/` at runtime. Please refer to the Storybook documentation to get detailed instructions\r\n> on how to integrate the icons with Angular, React or plain JavaScript.\r\n\r\nAlternatively, you can also just provide the URL to your preferred icon by setting the `src` property accordingly.\r\n\r",
      "usage": {},
      "docs": "This component is based on the ionicons (https://github.com/ionic-team/ionicons)",
      "docsTags": [],
      "encapsulation": "shadow",
      "dependents": [
        "ino-card",
        "ino-chip",
        "ino-datepicker",
        "ino-fab",
        "ino-fab-set",
        "ino-icon-button",
        "ino-img",
        "ino-input",
        "ino-input-file",
        "ino-markdown-editor",
        "ino-snackbar",
        "ino-tab",
        "ino-table-header-cell"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ino-card": [
          "ino-icon"
        ],
        "ino-chip": [
          "ino-icon"
        ],
        "ino-datepicker": [
          "ino-icon"
        ],
        "ino-fab": [
          "ino-icon"
        ],
        "ino-fab-set": [
          "ino-icon"
        ],
        "ino-icon-button": [
          "ino-icon"
        ],
        "ino-img": [
          "ino-icon"
        ],
        "ino-input": [
          "ino-icon"
        ],
        "ino-input-file": [
          "ino-icon"
        ],
        "ino-markdown-editor": [
          "ino-icon"
        ],
        "ino-snackbar": [
          "ino-icon"
        ],
        "ino-tab": [
          "ino-icon"
        ],
        "ino-table-header-cell": [
          "ino-icon"
        ]
      },
      "props": [
        {
          "name": "clickable",
          "type": "boolean",
          "mutable": false,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "Makes the icon clickable and allows to listen to the `clickEl` event.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "colorSecondary",
          "type": "boolean",
          "mutable": false,
          "attr": "color-secondary",
          "reflectToAttr": false,
          "docs": "Colors the icon in the global secondary color",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The name of the icon of this element or an URL.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "src",
          "type": "string",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "Specifies the exact `src` of an SVG file to use.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "svgTitle",
          "type": "string",
          "mutable": false,
          "attr": "svg-title",
          "reflectToAttr": false,
          "docs": "Sets a meaningful svg title for assistive technologies.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickEl",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event that emits as soon as the user clicks on the icon.\r\nThe event only emits if the property `inoClickable` is true.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-icon-color-primary",
          "annotation": "prop",
          "docs": "Primary (default) color of the icon"
        },
        {
          "name": "--ino-icon-color-secondary",
          "annotation": "prop",
          "docs": "Secondary color of the icon"
        },
        {
          "name": "--ino-icon-height",
          "annotation": "prop",
          "docs": "Height of the icon"
        },
        {
          "name": "--ino-icon-width",
          "annotation": "prop",
          "docs": "Width of the icon"
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-icon-button/ino-icon-button.tsx",
      "fileName": "ino-icon-button.tsx",
      "tag": "ino-icon-button",
      "readme": "# ino-icon-button\r\n\r\nA rounded button component that contains an icon. It functions as a wrapper around the material [icon-button](https://github.com/material-components/material-components-web/tree/master/packages/mdc-icon-button) component.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-icon-button')\r\n  .addEventListener('click', (_) => alert('The icon button was clicked'));\r\n```\r\n\r\n```html\r\n<ino-icon-button\r\n  autofocus\r\n  disabled\r\n  activated=\"<boolean>\"\r\n  icon=\"<string>\"\r\n>\r\n</ino-icon-button>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoIconButton } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  handleClick = (e: any) => {\r\n    alert(`IconButton was clicked`);\r\n  };\r\n\r\n  render() {\r\n    return <InoIconButton icon=\"search\" onClick={handleClick} />;\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - Using default slot\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoIconButton } from '@inovex.de/elements/dist/react';\r\nclass MyComponent extends Component {\r\n  handleClick = (e: any) => {\r\n    alert(`IconButton was clicked`);\r\n  };\r\n  render() {\r\n    return <InoIconButton onClick={handleClick}>\r\n       <ino-icon icon='time'></ino-icon>\r\n    </InoIconButton>;\r\n  } \r\n}\r\n```\r\n\r\n#### Example #3 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoIconButton } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst IconButton: React.FunctionComponent<Components.InoIconButtonAttributes> = (\r\n  props,\r\n) => {\r\n  const { inoIcon } = props;\r\n\r\n  const handleClick = (e: any) => {\r\n    alert(`IconButton was clicked`);\r\n  };\r\n\r\n  return (\r\n    <InoIconButton icon={inoIcon} onClick={handleClick}>\r\n      {props.children}\r\n    </InoIconButton>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <IconButton icon=\"search\" />;\r\n  }\r\n}\r\n```\r\n\r\n## Managed Icon Button\r\n\r\nButtons, and icon buttons as well, are unmanaged components which swap their state internally based on the interactions. However, in some cases, it may be useful to change this behavior and provide an external state.\r\n\r\nThis can be done by using the `activated` flag and further listing to the `click` event to change the state. _Example:_\r\n\r\n```js\r\nactivated = false;\r\n\r\ndocument.querySelector('ino-icon-button').addEventListener('click', (e) => {\r\n  const el = e.target;\r\n  activated = !activated;\r\n  activated\r\n    ? el.addAttribute('activated')\r\n    : el.removeAttribute('activated');\r\n});\r\n```\r\n\r\n```html\r\n<ino-icon-button icon=\"info\"></ino-icon-button>\r\n```\r\n\r\n## Additional Hints\r\n\r\n**Toggle Button**: To use the ino-icon-button as a toggle button the user can listen to the native `click`-Event and change the icon in the `icon`-Attribute.\r\n\r\n### Native Events\r\n\r\nThe component bubbles the native `click`-Event to the user.\r\n\r",
      "usage": {},
      "docs": "A rounded button component that contains an icon. It functions as a wrapper around the material [icon-button](https://github.com/material-components/material-components-web/tree/master/packages/mdc-icon-button) component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - `<ino-icon>`"
        }
      ],
      "encapsulation": "none",
      "dependents": [
        "ino-carousel",
        "ino-nav-drawer",
        "ino-snackbar",
        "ino-table-header-cell"
      ],
      "dependencies": [
        "ino-icon"
      ],
      "dependencyGraph": {
        "ino-icon-button": [
          "ino-icon"
        ],
        "ino-carousel": [
          "ino-icon-button"
        ],
        "ino-nav-drawer": [
          "ino-icon-button"
        ],
        "ino-snackbar": [
          "ino-icon-button"
        ],
        "ino-table-header-cell": [
          "ino-icon-button"
        ]
      },
      "props": [
        {
          "name": "activated",
          "type": "boolean",
          "mutable": false,
          "attr": "activated",
          "reflectToAttr": false,
          "docs": "Marks the icon button as activated.\r\n\r\nUseful in cases where an external state controls the icon button activation.\r\nMakes the component **managed**.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autoFocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Sets the autofocus for this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "colorScheme",
          "type": "\"dark\" | \"error\" | \"light\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color-scheme",
          "reflectToAttr": false,
          "docs": "The name of the color scheme which is used\r\nto style the background and outline of this component.\r\nPossible values: `primary` (default),  `secondary`,\r\n`success`, `warning`, `error`, `light`, `dark`.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "filled",
          "type": "boolean",
          "mutable": false,
          "attr": "filled",
          "reflectToAttr": false,
          "docs": "Styles this element as filled icon button\r\nwith the `ino-color-scheme` as background color.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The name of the icon of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of this form.\r\n\r\nCan either be `button`, `submit` or `reset`.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickEl",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event that emits as soon as the user clicks on the icon.\r\nThe event only emits if the property `clickable` is true.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-icon-button-background-active-color",
          "annotation": "prop",
          "docs": "base color of the active background"
        },
        {
          "name": "--ino-icon-button-background-color",
          "annotation": "prop",
          "docs": "default color of the background"
        },
        {
          "name": "--ino-icon-button-background-disabled-color",
          "annotation": "prop",
          "docs": "base color of the background in disabled state"
        },
        {
          "name": "--ino-icon-button-icon-active-color",
          "annotation": "prop",
          "docs": "color of the active icon itself"
        },
        {
          "name": "--ino-icon-button-icon-color",
          "annotation": "prop",
          "docs": "default color of the icon itself"
        },
        {
          "name": "--ino-icon-button-icon-disabled-color",
          "annotation": "prop",
          "docs": "color of the icon itself in disabled state"
        },
        {
          "name": "--ino-icon-button-icon-size",
          "annotation": "prop",
          "docs": "size of the icon itself"
        },
        {
          "name": "--ino-icon-button-size",
          "annotation": "prop",
          "docs": "size of the entire button"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "`<ino-icon>`"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-img/ino-img.tsx",
      "fileName": "ino-img.tsx",
      "tag": "ino-img",
      "readme": "# ino-img\r\n\r\nAn image component with different styles that reserves a predefined space to avoid jumping contents.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows (custom preferences have an `ino`-prefix):\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-img')\r\n  .addEventListener('click', (_) => alert('The image was clicked'));\r\n```\r\n\r\n```html\r\n<ino-img\r\n  alt=\"<string>\"\r\n  decoding=\"<string>\"\r\n  width=\"<number>\"\r\n  height=\"<number>\"\r\n  sizes=\"<string>\"\r\n  src=\"<string>\"\r\n  srcset=\"<string>\"\r\n  usemap=\"<string>\"\r\n  ratio-height=\"<number>\"\r\n  ratio-width=\"<number>\"\r\n  rounded\r\n>\r\n</ino-img>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoImg } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoImg\r\n        height={100}\r\n        width={100}\r\n        src=\"https://cdn-images-1.medium.com/max/1600/1*HP8l7LMMt7Sh5UoO1T-yLQ.png\"\r\n      />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoImg } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Img: React.FunctionComponent<Components.InoImgAttributes> = (props) => {\r\n  const { height, width, src } = props;\r\n\r\n  return (\r\n    <InoImg height={height} width={width} src={src}>\r\n      {props.children}\r\n    </InoImg>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <Img\r\n        height={100}\r\n        width={100}\r\n        src=\"https://cdn-images-1.medium.com/max/1600/1*HP8l7LMMt7Sh5UoO1T-yLQ.png\"\r\n      />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\nIf the attribute `rounded` is true, the image is displayed with rounded corners.\r\n\r\n### Pre-defined ratios\r\n\r\nThe image component has two attributes `ratio-height` and `ratio-width`. Use them to define any desired ratio and avoid content jumping!\r\n\r\nExample: If the image `image.png` has a ratio of `16:9`, define the image component as follows:\r\n\r\n```html\r\n<ino-img src=\"image.png\" ratio-width=\"16\" ratio-height=\"9\"></ino-img>\r\n```\r\n\r\nUsing this setup, the width of the element extends to 100% (or the value defined in `width` attribute) and the computed height is based on the ratio attributes.\r\n\r",
      "usage": {},
      "docs": "An image component with different styles that reserves a predefined space to avoid jumping contents.",
      "docsTags": [],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-icon"
      ],
      "dependencyGraph": {
        "ino-img": [
          "ino-icon"
        ]
      },
      "props": [
        {
          "name": "alt",
          "type": "string",
          "mutable": false,
          "attr": "alt",
          "reflectToAttr": false,
          "docs": "The alternative text of this image.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "decoding",
          "type": "\"async\" | \"auto\" | \"sync\"",
          "mutable": false,
          "attr": "decoding",
          "reflectToAttr": false,
          "docs": "The decoding method of the native html input element.\r\nCan either be `async`, `auto` or `sync`.",
          "docsTags": [],
          "values": [
            {
              "value": "async",
              "type": "string"
            },
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "sync",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fallbackIcon",
          "type": "string",
          "mutable": false,
          "attr": "fallback-icon",
          "reflectToAttr": false,
          "docs": "Icon used for fallback image if image can not be loaded",
          "docsTags": [],
          "default": "'image_not_available'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "height",
          "type": "number",
          "mutable": false,
          "attr": "height",
          "reflectToAttr": false,
          "docs": "The fixed height of this image.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "imgListItem",
          "type": "boolean",
          "mutable": false,
          "attr": "img-list-item",
          "reflectToAttr": false,
          "docs": "Indicates that the image is a part of an image list component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets the label of the image. Note: Only works if image is part of\r\nan ino-img-list component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ratioHeight",
          "type": "number",
          "mutable": false,
          "attr": "ratio-height",
          "reflectToAttr": false,
          "docs": "The ratio height for this image (default = 1).\r\nUse this attribute together with `ratio-width` to reserve a\r\nspace for the image during rendering and to prevent jumping contents.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ratioWidth",
          "type": "number",
          "mutable": false,
          "attr": "ratio-width",
          "reflectToAttr": false,
          "docs": "The ratio width of this image (default = 1).\r\nUse this attribute together with `ratio-height` to reserve a\r\nspace for the image during rendering and to prevent jumping contents.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rounded",
          "type": "boolean",
          "mutable": false,
          "attr": "rounded",
          "reflectToAttr": false,
          "docs": "If true, styles the image with rounded borders.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sizes",
          "type": "string",
          "mutable": false,
          "attr": "sizes",
          "reflectToAttr": false,
          "docs": "A set of rules to specify the usage of images sources that are\r\ndefined in the `srcset` attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "src",
          "type": "string",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "The source of this image element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "srcset",
          "type": "string",
          "mutable": false,
          "attr": "srcset",
          "reflectToAttr": false,
          "docs": "A set of sources of this image for different viewports or devices.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "usemap",
          "type": "string",
          "mutable": false,
          "attr": "usemap",
          "reflectToAttr": false,
          "docs": "An ID referencing to a defined map element for this image.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "width",
          "type": "number",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "The fixed of the image.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-img-list/ino-img-list.tsx",
      "fileName": "ino-img-list.tsx",
      "tag": "ino-img-list",
      "readme": "# ino-img-list\r\n\r\nThe ino-img-list component is used in combination with the ino-img component to display an array of images\r\nin a grid-like format. It is based on the mdc-image-list component.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-img-list enclose-label masonry>\r\n  <ino-img\r\n    src=\"url/to/image\"\r\n    label=\"optional label\"\r\n    img-list-item\r\n  ></ino-img>\r\n</ino-img-list>\r\n```\r\n\r\n## React\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport { Component } from 'react';\r\nimport { InoImgList, InoImg } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  state = {\r\n    source: 'url/to/img',\r\n    encloseLabel: true,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <InoImgList encloseLabel={this.state.encloseLabel}>\r\n        <InoImg src={this.state.source} img-list-item></InoImg>\r\n      </InoImgList>\r\n    );\r\n  }\r\n}\r\n```\r\n\r",
      "usage": {},
      "docs": "The ino-img-list component is used in combination with the ino-img component to display an array of images\r\nin a grid-like format. It is based on the mdc-image-list component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - One or more `ino-img` with `imgListItem=\"true\"`"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "encloseLabel",
          "type": "boolean",
          "mutable": false,
          "attr": "enclose-label",
          "reflectToAttr": false,
          "docs": "Encapsulates the label of all img-list-items within the image",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "masonry",
          "type": "boolean",
          "mutable": false,
          "attr": "masonry",
          "reflectToAttr": false,
          "docs": "Enables the masonry image list variant, which allows the images to\r\nbe any combination of aspect ratios.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--ino-img-list-cols",
          "annotation": "prop",
          "docs": "sets the number of columns"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "One or more `ino-img` with `imgListItem=\"true\"`"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-input/ino-input.tsx",
      "fileName": "ino-input.tsx",
      "tag": "ino-input",
      "readme": "# ino-input\r\n\r\nAn input component with styles. It functions as a wrapper around the material [textfield](https://github.com/material-components/material-components-web/tree/master/packages/mdc-textfield) component.\r\n\r\nUse this element for **simple types** like `text`, `password`, `number` or `email`. For more complex types, there are elements like a [Radio Button](../ino-radio), a [Checkbox](../ino-checkbox), a [Datepicker](../ino-datepicker) and many more.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-input')\r\n  .addEventListener('valueChange', (e) =>\r\n    alert(`The new input value is: ${e.detail}`),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-input\r\n  autocomplete=\"<string>\"\r\n  autofocus\r\n  disabled\r\n  min=\"<string>\"\r\n  max=\"<string>\"\r\n  step=\"<number>\"\r\n  name=\"<string>\"\r\n  pattern=\"<string>\"\r\n  placeholder=\"<string>\"\r\n  required\r\n  size=\"<number>\"\r\n  type=\"<string>\"\r\n  value=\"<string>\"\r\n  error\r\n  outline\r\n  label=\"<string>\"\r\n  helper=\"<string>\"\r\n  helper-persistent\r\n  helper-validation\r\n  data-list=\"<string>\"\r\n>\r\n  <datalist id=\"<string>\">\r\n    <option>...</option>\r\n  </datalist>\r\n  <ino-icon slot=\"icon-leading\" icon=\"...\"></ino-icon>\r\n  <ino-icon slot=\"icon-trailing\" icon=\"...\"></ino-icon>\r\n</ino-input>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoInput } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  onValueChange(e: any) {\r\n    alert(`The new value is ${e.detail}`);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <InoInput\r\n        placeholder=\"You can insert some text...\"\r\n        onValueChange={onValueChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoInput } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Input: React.FunctionComponent<Components.InoInputAttributes> = (\r\n  props,\r\n) => {\r\n  const onValueChange = (e: any) => {\r\n    alert(`The new value is ${e.detail}`);\r\n  };\r\n\r\n  return (\r\n    <InoInput\r\n      placeholder=\"You can insert some text...\"\r\n      onValueChange={onValueChange}\r\n    />\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <Input placeholder=\"You can insert some text...\" />;\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\n**Outlined**: The component is by default a box component with ripple underline. Provide `outline` to use the material outline design.\r\n\r\n**Labels**: The component shows a floating label containing the value of `label`.\r\n\r\n**Helper Text**: The component shows an optional helper text underneath the input field (`helper`). By default, the helper text will be visible as soon as the user focuses on the input field. Set `helper-persistent` to show it all the time. Furthermore, use `helper-validation` to style the helper text as validation message.\r\n\r\n**Icons**: There are currently two options two place an icon: at the start/left (`icon-leading`) or at the end/right (`icon-trailing`). To specify an icon, use either the `ino-icon`-Component (preferred) or use an icon of your choice and place it inside the `ino-input`-Element. Additionally, you have to provide either `slot=\"icon-leading\"` or `slot=\"icon-trailing\"`to your icon element.\r\n\r\n**Datalist**: Provide the id of the datalist child and a list with possible selectable values will be displayed and filtered with every keystroke. See [datalist](https://developer.mozilla.org/de/docs/Web/HTML/Element/datalist) for more information.\r\n\r\n### Control flow\r\n\r\nThe input has a controlled (unmanaged) attribute `value`. For this reason, the value doesn't change on user interaction but on updates of `value`. Listen to `valueChange`, sync it with your local state and pass the new value to the component again to change value of input.\r\n\r\n```js\r\ndocument.querySelector('ino-input').addEventListener('valueChange', (e) => {\r\n  // ...\r\n});\r\n```\r\n\r\n```html\r\n<ino-input value=\"Here's some text\"></ino-input>\r\n```\r\n\r\n### Event Behaviour\r\n\r\nThe component is based on a native input with additional features. Thus, the component bubbles events triggered by the native [HTMLInputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement) like `keyup`. The native `input` and `change` event is not bubbled because the value will only change when the value attribute changes.\r\n\r",
      "usage": {},
      "docs": "An input component with styles. It functions as a wrapper around the material [textfield](https://github.com/material-components/material-components-web/tree/master/packages/mdc-textfield) component.\r\n\r\nUse this element for **simple types** like `text`, `password`, `number` or `email`. For more complex types, there are elements like a [Radio Button](../ino-radio), a [Checkbox](../ino-checkbox), a [Datepicker](../ino-datepicker) and many more.",
      "docsTags": [
        {
          "name": "slot",
          "text": "icon-leading - For the icon to be prepended"
        },
        {
          "name": "slot",
          "text": "icon-trailing - For the icon to be appended"
        }
      ],
      "encapsulation": "none",
      "dependents": [
        "ino-datepicker"
      ],
      "dependencies": [
        "ino-label",
        "ino-icon"
      ],
      "dependencyGraph": {
        "ino-input": [
          "ino-label",
          "ino-icon"
        ],
        "ino-datepicker": [
          "ino-input"
        ]
      },
      "props": [
        {
          "name": "autoFocus",
          "type": "boolean",
          "mutable": false,
          "attr": "auto-focus",
          "reflectToAttr": false,
          "docs": "The autofocus of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "string",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "The autocomplete property of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dataList",
          "type": "string",
          "mutable": false,
          "attr": "data-list",
          "reflectToAttr": false,
          "docs": "The id of the datalist child",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "error",
          "type": "boolean",
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "Displays the input field as invalid if set to true.\r\nIf the property is not set or set to false, the validation is handled by the `pattern` property.\r\nThis functionality might be useful if the input validation is (additionally) handled by the backend.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helper",
          "type": "string",
          "mutable": false,
          "attr": "helper",
          "reflectToAttr": false,
          "docs": "The optional helper text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperCharacterCounter",
          "type": "boolean",
          "mutable": false,
          "attr": "helper-character-counter",
          "reflectToAttr": false,
          "docs": "Displays the number of characters. The maxlength-property must be set.\r\nThis helper text will be displayed persistently.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperPersistent",
          "type": "boolean",
          "mutable": false,
          "attr": "helper-persistent",
          "reflectToAttr": false,
          "docs": "Displays the helper permanently.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperValidation",
          "type": "boolean",
          "mutable": false,
          "attr": "helper-validation",
          "reflectToAttr": false,
          "docs": "Styles the helper text as a validation message.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The optional floating label of this input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The max value of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Limits the number of possible characters to the given number",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The min value of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Styles the input field as outlined element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "The validation pattern of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The placeholder of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Marks this element as required.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showLabelHint",
          "type": "boolean",
          "mutable": false,
          "attr": "show-label-hint",
          "reflectToAttr": false,
          "docs": "If true, an *optional* message is displayed if not required,\r\notherwise a * marker is displayed if required",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "step",
          "type": "\"any\" | number",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "The step value of this element. Use `any` for decimal numbers",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "value": "any",
              "type": "string"
            },
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"color\" | \"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\" | \"week\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of this element (default = text).",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "color",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "week",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "unit",
          "type": "string",
          "mutable": false,
          "attr": "unit",
          "reflectToAttr": false,
          "docs": "Displays the given unit at the end of the input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of this element. (**unmanaged**)",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native input element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input`.\r\nUse this method instead of the global `input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input`.\r\nUse this method instead of the global `input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "inoBlur",
          "detail": "void",
          "bubbles": false,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the input field is blurred and validates email input",
          "docsTags": []
        },
        {
          "event": "inoFocus",
          "detail": "void",
          "bubbles": false,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the input field is focused",
          "docsTags": []
        },
        {
          "event": "valueChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the user types something in.\r\nContains typed input in `event.detail`",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-input-caret-color",
          "annotation": "prop",
          "docs": "color of the caret"
        },
        {
          "name": "--ino-input-icon-color",
          "annotation": "prop",
          "docs": "icon color"
        },
        {
          "name": "--ino-input-label-color",
          "annotation": "prop",
          "docs": "color of the label"
        },
        {
          "name": "--ino-input-line-color",
          "annotation": "prop",
          "docs": "line color"
        }
      ],
      "slots": [
        {
          "name": "icon-leading",
          "docs": "For the icon to be prepended"
        },
        {
          "name": "icon-trailing",
          "docs": "For the icon to be appended"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "change",
          "capture": false,
          "passive": false
        },
        {
          "event": "focus",
          "capture": false,
          "passive": false
        },
        {
          "event": "input",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-input-file/ino-input-file.tsx",
      "fileName": "ino-input-file.tsx",
      "tag": "ino-input-file",
      "readme": "# ino-input-file\r\n\r\nAn input component for files. It functions as a wrapper around the native input capabilities having the [`type=\"file\"`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\r\n\r\nThis component replaces the native behaviour with a custom `ino-button` with logic.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-input-file')\r\n  .addEventListener('changeFile', (e) => alert(`The new file is: ${e.detail}`));\r\n```\r\n\r\n```html\r\n<ino-input-file\r\n  accept=\"<string>\"\r\n  autofocus\r\n  disabled\r\n  multiple\r\n  name=\"<string>\"\r\n  required\r\n\r\n  label=\"<string>\"\r\n>\r\n</ino-input>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoInputFile } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  onChangeFile(e) {\r\n    const fileNames = e.detail.files\r\n      .map((f) => [f.name, f.type, f.size + ' bytes'].join(', '))\r\n      .join('\\n');\r\n    alert(fileNames);\r\n  }\r\n\r\n  render() {\r\n    return <InoInputFile onChangeFile={this.onChangeFile} />;\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoInputFile } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst FileInput: React.FunctionComponent<Components.InoInputFile> = (props) => {\r\n  const onFileChange = (e: any) => {\r\n    alert(`The new file is: ${e.detail}`);\r\n  };\r\n\r\n  return <InoInputFile onFileChange={onFileChange} />;\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <FileInput />;\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r",
      "usage": {},
      "docs": "An input component for files. It functions as a wrapper around the native input capabilities having the [`type=\"file\"`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\r\n\r\nThis component replaces the native behaviour with a custom `ino-button` with logic.",
      "docsTags": [],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-button",
        "ino-icon"
      ],
      "dependencyGraph": {
        "ino-input-file": [
          "ino-button",
          "ino-icon"
        ],
        "ino-button": [
          "ino-spinner"
        ]
      },
      "props": [
        {
          "name": "accept",
          "type": "string",
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "The types of files accepted by the server.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autoFocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "The autofocus of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dragAndDrop",
          "type": "boolean",
          "mutable": false,
          "attr": "drag-and-drop",
          "reflectToAttr": false,
          "docs": "Enables drag-and-drop file input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dragAndDropSecondaryText",
          "type": "string",
          "mutable": false,
          "attr": "drag-and-drop-secondary-text",
          "reflectToAttr": false,
          "docs": "Sets the secondary text of the drag and drop window",
          "docsTags": [],
          "default": "'or'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dragAndDropText",
          "type": "string",
          "mutable": false,
          "attr": "drag-and-drop-text",
          "reflectToAttr": false,
          "docs": "Sets the primary text of the drag and drop window",
          "docsTags": [],
          "default": "'Drag your files here'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets the label of the select files button.",
          "docsTags": [],
          "default": "'Select file'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Indicates whether the user can enter one or more values.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of this input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Marks this element as required.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "changeFile",
          "detail": "{ e: any; files: File[]; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the value changes.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-input-file-box-height",
          "annotation": "prop",
          "docs": "Height of the drag and drop window"
        },
        {
          "name": "--ino-input-file-box-width",
          "annotation": "prop",
          "docs": "Width of the drag and drop window"
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-label/ino-label.tsx",
      "fileName": "ino-label.tsx",
      "tag": "ino-label",
      "readme": "# ino-label\r\n\r\nThis is an internally used component for various sorts of inputs like `ino-input`, `ino-select` and `ino-textarea`. It is used to display the label for each respective component.\r\n\r\n```html\r\n<ino-label\r\n  outline=\"<boolean>\"\r\n  label=\"<string>\"\r\n  required=\"<boolean>\"\r\n  disabled=\"<boolean>\"\r\n>\r\n</ino-label>\r\n```\r\n\r",
      "usage": {},
      "docs": "This is an internally used component for various sorts of inputs like `ino-input`, `ino-select` and `ino-textarea`. It is used to display the label for each respective component.\r\n\r\n```html\r\n<ino-label\r\n  outline=\"<boolean>\"\r\n  label=\"<string>\"\r\n  required=\"<boolean>\"\r\n  disabled=\"<boolean>\"\r\n>\r\n</ino-label>\r\n```",
      "docsTags": [],
      "encapsulation": "none",
      "dependents": [
        "ino-input",
        "ino-select",
        "ino-textarea"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ino-input": [
          "ino-label"
        ],
        "ino-select": [
          "ino-label"
        ],
        "ino-textarea": [
          "ino-label"
        ]
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Colors the label in an light grey to indicate the disabled status for this element",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Styles the label in an outlined style",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Appends * to the label to make it appear as an required input in a form",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showHint",
          "type": "boolean",
          "mutable": false,
          "attr": "show-hint",
          "reflectToAttr": false,
          "docs": "Shows a \"optional\" message, when not `required`;\r\nShows a * mark, when `required`",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The text of the label itself",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-list/ino-list.tsx",
      "fileName": "ino-list.tsx",
      "tag": "ino-list",
      "readme": "# ino-list\r\n\r\nA component that displays a list of choices. It functions as a wrapper around the material [list](https://github.com/material-components/material-components-web/blob/master/packages/mdc-list/) component.\r\n\r\nThis component is a composer to configure and wrap `list-item`s, `list-divider`s, `control-item`s and `nav-item`s.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-list dense two-lines>\r\n  <ino-list-item ...></ino-list-item>\r\n  <ino-list-divider></ino-list-divider>\r\n  <ino-control-item ...></ino-control-item>\r\n  <ino-nav-item ...></ino-nav-item>\r\n</ino-list>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoListItem, InoList, InoImg } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoList avatar>\r\n        <InoListItem text=\"First text item\">\r\n          <InoImg\r\n            slot=\"leading\"\r\n            src=\"https://cdn-images-1.medium.com/max/1600/1*HP8l7LMMt7Sh5UoO1T-yLQ.png\"\r\n            ratio-width=\"1\"\r\n            ratio-height=\"1\"\r\n          />\r\n        </InoListItem>\r\n        <InoListItem text=\"Second text item\">\r\n          <InoImg\r\n            slot=\"leading\"\r\n            src=\"https://cdn-images-1.medium.com/max/1600/1*HP8l7LMMt7Sh5UoO1T-yLQ.png\"\r\n            ratio-width=\"1\"\r\n            ratio-height=\"1\"\r\n          />\r\n        </InoListItem>\r\n      </InoList>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoListItem, InoList, InoImg } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst List: React.FunctionComponent<Components.InoListAttributes> = (props) => {\r\n  const { avatar } = props;\r\n\r\n  return <InoList avatar={avatar}>{props.children}</InoList>;\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <List avatar>\r\n        <InoListItem text=\"First text item\">\r\n          <InoImg\r\n            slot=\"leading\"\r\n            src=\"https://cdn-images-1.medium.com/max/1600/1*HP8l7LMMt7Sh5UoO1T-yLQ.png\"\r\n            ratio-width=\"1\"\r\n            ratio-height=\"1\"\r\n          />\r\n        </InoListItem>\r\n        <InoListItem text=\"Second text item\">\r\n          <InoImg\r\n            slot=\"leading\"\r\n            src=\"https://cdn-images-1.medium.com/max/1600/1*HP8l7LMMt7Sh5UoO1T-yLQ.png\"\r\n            ratio-width=\"1\"\r\n            ratio-height=\"1\"\r\n          />\r\n        </InoListItem>\r\n      </List>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\nProvide `two-lines` to set proper style attributes for list items having a primary and secondary line.\r\n\r",
      "usage": {},
      "docs": "A component that displays a list of choices. It functions as a wrapper around the material [list](https://github.com/material-components/material-components-web/blob/master/packages/mdc-list/) component.\r\n\r\nThis component is a composer to configure and wrap `list-item`s, `list-divider`s, `control-item`s and `nav-item`s.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - One or more `ino-(control|list|nav)-item` and `ino-list-divider`"
        }
      ],
      "encapsulation": "none",
      "dependents": [
        "ino-menu"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ino-menu": [
          "ino-list"
        ]
      },
      "props": [
        {
          "name": "avatar",
          "type": "boolean",
          "mutable": false,
          "attr": "avatar",
          "reflectToAttr": false,
          "docs": "Configures the leading tiles of each row to display images instead of icons.\r\nThis will make the graphics of the list items larger.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dense",
          "type": "boolean",
          "mutable": false,
          "attr": "dense",
          "reflectToAttr": false,
          "docs": "Styles the list more dense, making it appear more compact.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "twoLines",
          "type": "boolean",
          "mutable": false,
          "attr": "two-lines",
          "reflectToAttr": false,
          "docs": "Marks this element as list with items having two lines.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--ino-list-item-border-radius",
          "annotation": "prop",
          "docs": "Border radius of the list container, also effects the first and last list item"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "One or more `ino-(control|list|nav)-item` and `ino-list-divider`"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-list-divider/ino-list-divider.tsx",
      "fileName": "ino-list-divider.tsx",
      "tag": "ino-list-divider",
      "readme": "# ino-list-divider\r\n\r\nA list divider component that either divides two lists or list items. It functions as a wrapper around the material [list divider](https://github.com/material-components/material-components-web/blob/master/packages/mdc-divider/) capabilities.\r\n\r\nThis component is used as child of `ino-list` and `ino-menu` components.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-list-divder\r\n  between-lists\r\n  inset\r\n  padded\r\n>\r\n</ino-list-divider>\r\n```\r\n\r\n**Divide lists:** By default, a `ino-list-divider` sepeartes two `list-item` components. To split `ino-list` component itself, provide `between-lists` (only available for `ino-list`).\r\n\r",
      "usage": {},
      "docs": "A list divider component that either divides two lists or list items. It functions as a wrapper around the material [list divider](https://github.com/material-components/material-components-web/blob/master/packages/mdc-divider/) capabilities.\r\n\r\nThis component is used as child of `ino-list` and `ino-menu` components.",
      "docsTags": [],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "betweenLists",
          "type": "boolean",
          "mutable": false,
          "attr": "between-lists",
          "reflectToAttr": false,
          "docs": "Marks the divider as a separator between two `ino-list`\r\ninstead of `ino-list-item` elements.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inset",
          "type": "boolean",
          "mutable": false,
          "attr": "inset",
          "reflectToAttr": false,
          "docs": "Increases leading margin to match leading column in `ino-list-item`.\r\n\r\nOnly applicable if `betweenList` is `false`.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "padded",
          "type": "boolean",
          "mutable": false,
          "attr": "padded",
          "reflectToAttr": false,
          "docs": "Increases margin on each side of the divider to match meta content\r\nin `ino-list-item`.\r\n\r\nOnly applicable if `betweenList` is `false`.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-list-item/ino-list-item.tsx",
      "fileName": "ino-list-item.tsx",
      "tag": "ino-list-item",
      "readme": "# ino-list-item\r\n\r\nA list item component that displays a single instance of choice in a list or menu. It functions as a wrapper around the material [list item](https://github.com/material-components/material-components-web/blob/master/packages/mdc-list/) capabilities.\r\n\r\nThis component is used as child of `ino-list` and `ino-menu` components.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-list-item')\r\n  .addEventListener('clickEl', (e) =>\r\n    console.log(\r\n      'The new list-item was clicked, the element itself is:',\r\n      e.detail,\r\n    ),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-list-item\r\n  activated\r\n  text=\"<string>\"\r\n  secondary-text=\"<string>\"\r\n  selected\r\n  onclickel=\"handleClickEl()\"\r\n>\r\n  <ino-icon slot=\"leading\" ...></ino-icon>\r\n  <a slot=\"primary\" href=\"www.inovex.de\">...</a>\r\n  <ino-icon slot=\"trailing\" ...></ino-icon>\r\n</ino-list-item>\r\n```\r\n\r\n**Ino Primary/Secondary (slot):** If you want to use different elements instead of text, you can use the `primary` or `secondary` slot. To do so, just set the `slot`-attribute of your custom element to `primary` or `secondary`.\r\n\r\n**Two lines:** For items having two lines, provide an `secondary-text` and make sure you set the `two-lines` attribute in the respective parent component (only available for `ino-list`).\r\n\r\n**Leading items:** Add an item with the slot-attribute `leading` to add a leading column to the list item in LTR languages. Typically, an icon or image.\r\n\r\n**Trailing items:** Add an item with the slot-attribute `trailing` to add a trailing column to the list item in LTR languages. Typically, small text, icon or image.\r\n\r",
      "usage": {},
      "docs": "A list item component that displays a single instance of choice in a list or menu. It functions as a wrapper around the material [list item](https://github.com/material-components/material-components-web/blob/master/packages/mdc-list/) capabilities.\r\n\r\nThis component is used as child of `ino-list` and `ino-menu` components.",
      "docsTags": [
        {
          "name": "slot",
          "text": "leading - For the element to be prepended"
        },
        {
          "name": "slot",
          "text": "trailing - For the element to be appended"
        },
        {
          "name": "slot",
          "text": "primary - For the (text) element"
        },
        {
          "name": "slot",
          "text": "secondary - For the secondary text element in a two-lined list"
        }
      ],
      "encapsulation": "none",
      "dependents": [
        "ino-control-item",
        "ino-nav-item"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ino-control-item": [
          "ino-list-item"
        ],
        "ino-nav-item": [
          "ino-list-item"
        ]
      },
      "props": [
        {
          "name": "activated",
          "type": "boolean",
          "mutable": false,
          "attr": "activated",
          "reflectToAttr": false,
          "docs": "Styles the row in an activated style.\r\n\r\nIn contrast to `selected`, use this for only one item\r\nand to mark it as permantently activated.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Styles the row in a disabled style.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "secondaryText",
          "type": "string",
          "mutable": false,
          "attr": "secondary-text",
          "reflectToAttr": false,
          "docs": "Sets the secondary text of this list item.\r\n\r\nRequires `two-lines` on the parent `ino-list` element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Styles the row in a selected style.\r\n\r\nIn contrast to `activated`, use this option to select one\r\nor multiple items that are likely to change soon.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The primary text of this list item.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickEl",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the list item is clicked or\r\nthe enter/space key if pressed while the item is in focus.\r\nContains the element itself in `event.detail`",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-list-item-deselected-background-color",
          "annotation": "prop",
          "docs": "Background color of a deselected list item"
        },
        {
          "name": "--ino-list-item-deselected-background-color-active",
          "annotation": "prop",
          "docs": "Background color of a deselected list item if active"
        },
        {
          "name": "--ino-list-item-deselected-background-color-focus",
          "annotation": "prop",
          "docs": "Background color of a deselected list item if focused"
        },
        {
          "name": "--ino-list-item-deselected-background-color-hover",
          "annotation": "prop",
          "docs": "Background color of a deselected list item on hover"
        },
        {
          "name": "--ino-list-item-deselected-color",
          "annotation": "prop",
          "docs": "Text color of a deselected list item"
        },
        {
          "name": "--ino-list-item-selected-background-color",
          "annotation": "prop",
          "docs": "Background color of a selected list item"
        },
        {
          "name": "--ino-list-item-selected-background-color-active",
          "annotation": "prop",
          "docs": "Background color of a selected list item if active"
        },
        {
          "name": "--ino-list-item-selected-background-color-focus",
          "annotation": "prop",
          "docs": "Background color of a selected list item if focused"
        },
        {
          "name": "--ino-list-item-selected-background-color-hover",
          "annotation": "prop",
          "docs": "Background color of a selected list item on hover"
        },
        {
          "name": "--ino-list-item-selected-color",
          "annotation": "prop",
          "docs": "Text color of a selected list item"
        }
      ],
      "slots": [
        {
          "name": "leading",
          "docs": "For the element to be prepended"
        },
        {
          "name": "primary",
          "docs": "For the (text) element"
        },
        {
          "name": "secondary",
          "docs": "For the secondary text element in a two-lined list"
        },
        {
          "name": "trailing",
          "docs": "For the element to be appended"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-markdown-editor/ino-markdown-editor.tsx",
      "fileName": "ino-markdown-editor.tsx",
      "tag": "ino-markdown-editor",
      "readme": "# ino-markdown-editor\r\n\r\n\r\n\r",
      "usage": {},
      "docs": "The **Preview Mode** supports following actions:\r\n\r\n| Actions ||||\r\n|---|\r\n| Link | Blockquotes | Unordered list / Bullet list | Headline 1 |\r\n| Italic | Strikethrough | Ordered list / Numbered  list | Headline 2 |\r\n| Bold | Inline code |\r\n\r\nAdditionally, there are a lot of predefined\r\n[keyboard shortcuts](https://tiptap.dev/api/keyboard-shortcuts#predefined-keyboard-shortcuts)\r\nprovided by the underlying [tiptap](https://tiptap.dev/) editor.\r\n\r\nThe **Markdown Mode** supports all syntax of [CommonMark](https://commonmark.org/help/) with two exceptions:\r\n\r\n * Support of strikethrough syntax (`~~TextToStrike~~`)\r\n * No support of image syntax. __Images are not allowed!__",
      "docsTags": [],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-icon",
        "ino-popover",
        "ino-textarea"
      ],
      "dependencyGraph": {
        "ino-markdown-editor": [
          "ino-icon",
          "ino-popover",
          "ino-textarea"
        ],
        "ino-textarea": [
          "ino-label"
        ]
      },
      "props": [
        {
          "name": "initialValue",
          "type": "string",
          "mutable": false,
          "attr": "initial-value",
          "reflectToAttr": false,
          "docs": "Initial `string` value of the markdown editor.\r\nReassigning this value do not change the editor state.\r\nThe value must contain a valid Markdown syntax.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "viewMode",
          "type": "\"markdown\" | \"preview\" | \"readonly\"",
          "mutable": false,
          "attr": "view-mode",
          "reflectToAttr": false,
          "docs": "Sets the view mode of the editor.\r\nCan be changed between `preview` (default), `markdown` and `readonly`.\r\nThe `markdown` mode is made for advanced users that know the markdown syntax.",
          "docsTags": [],
          "default": "'preview'",
          "values": [
            {
              "value": "markdown",
              "type": "string"
            },
            {
              "value": "preview",
              "type": "string"
            },
            {
              "value": "readonly",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "inoBlur",
          "detail": "void",
          "bubbles": false,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the ino-markdown-editor is blurred",
          "docsTags": []
        },
        {
          "event": "valueChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the value of the markdown editor **blurs**.\r\nThe value of type `string` can be found in `event.detail`",
          "docsTags": []
        },
        {
          "event": "viewModeChange",
          "detail": "\"markdown\" | \"preview\" | \"readonly\"",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when one of the view mode buttons was clicked.\r\nThe value of type `ViewMode` can be found in `event.detail`",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-markdown-editor-max-height",
          "annotation": "prop",
          "docs": "max-height of text editor Default value is `none`."
        },
        {
          "name": "--ino-markdown-editor-min-height",
          "annotation": "prop",
          "docs": "min-height of text editor. Default value is `100px`."
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-menu/ino-menu.tsx",
      "fileName": "ino-menu.tsx",
      "tag": "ino-menu",
      "readme": "# ino-menu\r\n\r\nA menu component that displays a list of choices on a temporary surface which opens and closes on anchor or item click.\r\nThe anchor element is the parent element.\r\n\r\nThe menu items consist of different variations of the `ino-list-item` component.\r\n\r\nIf you need a more customizable menu with a different type of elements or functionalities, have a look at the `ino-popover`.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-button>\r\n  <ino-menu>\r\n    <ino-list-item ...></ino-list-item>\r\n    <ino-list-divider></ino-list-divider>\r\n  </ino-menu>\r\n</ino-button>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```jsx\r\nimport { Component } from 'react';\r\nimport {\r\n  InoButton,\r\n  InoMenu,\r\n  InoListItem,\r\n  InoDivider,\r\n} from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoButton>\r\n        Show Menu\r\n        <InoMenu>\r\n          <InoListItem text=\"Home\"/>\r\n          <InoListItem text=\"Projects\"/>\r\n          <InoDivider/>\r\n          <InoListItem text=\"User\"/>\r\n          <InoListItem text=\"Settings\"/>\r\n        </InoMenu>\r\n      </InoButton>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\nThe menu creates a temporary surface with an empty list composer. The items of the list are provided via the slot (see\r\nexample above). For more details about the list capabilities itself, check the documentation of `ino-list`\r\nand `ino-list-item` component.\r\n\r",
      "usage": {},
      "docs": "A menu component that displays a list of choices on a temporary surface which opens and closes on anchor or item click.\r\nThe anchor element is the parent element.\r\n\r\nThe menu items consist of different variations of the `ino-list-item` component.\r\n\r\nIf you need a more customizable menu with a different type of elements or functionalities, have a look at the `ino-popover`.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - One or more `ino-(control|list|nav)-item` and `ino-list-divider`"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-popover",
        "ino-list"
      ],
      "dependencyGraph": {
        "ino-menu": [
          "ino-popover",
          "ino-list"
        ]
      },
      "props": [
        {
          "name": "placement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "Determines the position of the opened menu.\r\nUsually, the default value (`auto`) will work just fine.\r\nUse this if the positioning is off for some reason.",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "One or more `ino-(control|list|nav)-item` and `ino-list-divider`"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-nav-drawer/ino-nav-drawer.tsx",
      "fileName": "ino-nav-drawer.tsx",
      "tag": "ino-nav-drawer",
      "readme": "# ino-nav-drawer\r\n\r\nA navigation drawer component with different variants, setting up the base layout for your app.\r\nIt functions as a wrapper around the material [drawer](https://github.com/material-components/material-components-web/blob/master/packages/mdc-drawer/) component.\r\n\r\n> Note: The navigation drawer works best with `ino-list` and `ino-nav-item`s inside.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n### Web Component\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-nav-drawer')\r\n  .addEventListener('openChange', (_) => alert('Drawer was toggled!')) // watch for toggle change\r\n  .setAttribute('open', true); // open drawer\r\n```\r\n\r\n```html\r\n<ino-nav-drawer\r\n  open=\"<boolean>\"\r\n  anchor=\"left|right\"\r\n  variant=\"docked|dismissible|modal\"\r\n>\r\n  <ino-list slot=\"content\">\r\n    <ino-nav-item text=\"View1\">\r\n      <ino-icon icon=\"user\">\r\n    </ino-nav-item>\r\n    <ino-nav-item text=\"View2\">\r\n      <ino-icon icon=\"settings\">\r\n    </ino-nav-item>\r\n  </ino-list>\r\n\r\n  <main slot=\"app\">\r\n    App Content\r\n  </main>\r\n</ino-nav-drawer>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoNavDrawer } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoNavDrawer\r\n        open=\"false\"\r\n        anchor=\"left\"\r\n        variant=\"docked\"\r\n        onOpen={(_) => alert('Yeah, you just opened the drawer!')}\r\n      >\r\n        <ino-list slot=\"header\">\r\n          <ino-img src=\"https://picsum.photos/50/50\" />\r\n        </ino-list>\r\n        <ino-list slot=\"content\">\r\n          <ino-nav-item text=\"Some Link\">\r\n            <ino-icon icon=\"onboarding\"></ino-icon>\r\n          </ino-nav-item>\r\n        </ino-list>\r\n        <ino-list slot=\"footer\">\r\n          <ino-nav-item text=\"My Profile\">\r\n            <ino-img\r\n              src=\"https://picsum.photos/id/1027/250/250.jpg\"\r\n              style=\"border-radius: 50%\"\r\n              ratio-width=\"1\"\r\n              ratio-height=\"1\"\r\n            ></ino-img>\r\n          </ino-nav-item>\r\n        </ino-list>\r\n\r\n        <main slot=\"app\">\r\n          <App /> /* Your app goes here */\r\n        </main>\r\n      </InoNavDrawer>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoNavDrawer } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Drawer: React.FunctionComponent<Components.InoNavDrawerAttributes> = (\r\n  props\r\n) => {\r\n  const { open, variant, anchor } = props;\r\n\r\n  return (\r\n    <InoNavDrawer open={open} variant={variant} onClick={onClick}>\r\n      Drawer Content\r\n      <main slot=\"app\">App Content</main>\r\n    </InoNavDrawer>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <Drawer variant=\"dismissible\" anchor=\"left\" open=\"true\" />;\r\n  }\r\n}\r\n```\r\n\r\n## Demo\r\n\r",
      "usage": {},
      "docs": "A navigation drawer component with different variants, setting up the base layout for your app.\r\nIt functions as a wrapper around the material [drawer](https://github.com/material-components/material-components-web/blob/master/packages/mdc-drawer/) component.\r\n\r\n> Note: The navigation drawer works best with `ino-list` and `ino-nav-item`s inside.",
      "docsTags": [
        {
          "name": "slot",
          "text": "header - For a custom header on top of the navigation bar"
        },
        {
          "name": "slot",
          "text": "logo - For the logo on top of the navigation bar (cannot be used with the `header` slot)"
        },
        {
          "name": "slot",
          "text": "subtitle - For the element just below the logo (cannot be used with the `header` slot)"
        },
        {
          "name": "slot",
          "text": "content - For the content of the navigation bar (usually used with `ino-list` and `ino-nav-item`)"
        },
        {
          "name": "slot",
          "text": "footer - For elements below the content slot"
        },
        {
          "name": "slot",
          "text": "app - For the application located next to this nav-drawer"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "ino-icon-button"
      ],
      "dependencyGraph": {
        "ino-nav-drawer": [
          "ino-icon-button"
        ],
        "ino-icon-button": [
          "ino-icon"
        ]
      },
      "props": [
        {
          "name": "anchor",
          "type": "\"left\" | \"right\"",
          "mutable": false,
          "attr": "anchor",
          "reflectToAttr": false,
          "docs": "Side from which the drawer will appear.\r\nPossible values: `left` (default), `right`.",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": false,
          "attr": "open",
          "reflectToAttr": false,
          "docs": "Marks this element as open. (**unmanaged**)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"dismissible\" | \"docked\" | \"modal\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "The variant to use for the drawer\r\nPossible values: `docked` (default), `dismissible`, `modal`.",
          "docsTags": [],
          "default": "'docked'",
          "values": [
            {
              "value": "dismissible",
              "type": "string"
            },
            {
              "value": "docked",
              "type": "string"
            },
            {
              "value": "modal",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "openChange",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the user clicks on the drawer toggle icon to change the open state. Contains the status in `event.detail`.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-nav-drawer-background",
          "annotation": "prop",
          "docs": "Background of the drawer."
        },
        {
          "name": "--ino-nav-drawer-height",
          "annotation": "prop",
          "docs": "Height of the drawer."
        },
        {
          "name": "--ino-nav-drawer-text-color",
          "annotation": "prop",
          "docs": "Color of text inside the drawer."
        },
        {
          "name": "--ino-nav-drawer-timing-function",
          "annotation": "prop",
          "docs": "Timing function of the slide animation of the drawer."
        },
        {
          "name": "--ino-nav-drawer-transition-duration",
          "annotation": "prop",
          "docs": "Duration of the slide animation of the drawer."
        },
        {
          "name": "--ino-nav-drawer-width-closed",
          "annotation": "prop",
          "docs": "Docked variant only! The width of the collapsed drawer."
        },
        {
          "name": "--ino-nav-drawer-width-open",
          "annotation": "prop",
          "docs": "The width of the open drawer."
        }
      ],
      "slots": [
        {
          "name": "app",
          "docs": "For the application located next to this nav-drawer"
        },
        {
          "name": "content",
          "docs": "For the content of the navigation bar (usually used with `ino-list` and `ino-nav-item`)"
        },
        {
          "name": "footer",
          "docs": "For elements below the content slot"
        },
        {
          "name": "header",
          "docs": "For a custom header on top of the navigation bar"
        },
        {
          "name": "logo",
          "docs": "For the logo on top of the navigation bar (cannot be used with the `header` slot)"
        },
        {
          "name": "subtitle",
          "docs": "For the element just below the logo (cannot be used with the `header` slot)"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-nav-item/ino-nav-item.tsx",
      "fileName": "ino-nav-item.tsx",
      "tag": "ino-nav-item",
      "readme": "# ino-nav-item\r\n\r\nA nav item component that displays a single instance of choice in a list or menu. It functions as a wrapper around the material [list item](https://github.com/material-components/material-components-web/blob/master/packages/mdc-list/) capabilities.\r\n\r\nThis component is used as child of `ino-list` and `ino-menu` components.\r\n\r\n> Note: This component's main use case is within the `ino-nav-drawer`.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-nav-item')\r\n  .addEventListener('clickEl', (e) =>\r\n    console.log(\r\n      'The new nav-item was clicked, the element itself is:',\r\n      e.detail,\r\n    ),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-nav-item activated text=\"<string>\" onclickel=\"handleClickEl()\">\r\n  <ino-icon ...></ino-icon>\r\n</ino-nav-item>\r\n```\r\n\r\n**Default:** Add an item with the default slot to add a first column in the nav item in LTR languages. Typically an icon or image.\r\n\r",
      "usage": {},
      "docs": "A nav item component that displays a single instance of choice in a list or menu. It functions as a wrapper around the material [list item](https://github.com/material-components/material-components-web/blob/master/packages/mdc-list/) capabilities.\r\n\r\nThis component is used as child of `ino-list` and `ino-menu` components.\r\n\r\n> Note: This component's main use case is within the `ino-nav-drawer`.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Any element"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-list-item"
      ],
      "dependencyGraph": {
        "ino-nav-item": [
          "ino-list-item"
        ]
      },
      "props": [
        {
          "name": "activated",
          "type": "boolean",
          "mutable": false,
          "attr": "activated",
          "reflectToAttr": false,
          "docs": "Styles the row in an activated style.\r\n\r\nUse this for only one item\r\nand to mark it as permanently activated.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Styles the row in a disabled style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "subText",
          "type": "string",
          "mutable": false,
          "attr": "sub-text",
          "reflectToAttr": false,
          "docs": "The secondary text of this list item used in a two-lined list.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The text of this list item.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--ino-nav-item-background-color",
          "annotation": "prop",
          "docs": "Inactive color of the background of one item."
        },
        {
          "name": "--ino-nav-item-background-color-active",
          "annotation": "prop",
          "docs": "Active color of the background of one item."
        },
        {
          "name": "--ino-nav-item-color",
          "annotation": "prop",
          "docs": "Inactive color of icon."
        },
        {
          "name": "--ino-nav-item-color-active",
          "annotation": "prop",
          "docs": "Active color of icon."
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "Any element"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-option/ino-option.tsx",
      "fileName": "ino-option.tsx",
      "tag": "ino-option",
      "readme": "# ino-option\r\n\r\nAn option component that can be used to add options to an ino-select component.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-option disabled selected value=\"<string>\"> Content </ino-option>\r\n```\r\n\r",
      "usage": {},
      "docs": "An option component that can be used to add options to an ino-select component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - The text of the option"
        }
      ],
      "encapsulation": "none",
      "dependents": [
        "ino-option-group"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ino-option-group": [
          "ino-option"
        ]
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the option",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Selects the option",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the option",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickEl",
          "detail": "HTMLInoOptionElement",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits on option click",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-option-deselected-background-color",
          "annotation": "prop",
          "docs": "Background color if deselected"
        },
        {
          "name": "--ino-option-deselected-background-color-active",
          "annotation": "prop",
          "docs": "Background color if active and deselected"
        },
        {
          "name": "--ino-option-deselected-background-color-focus",
          "annotation": "prop",
          "docs": "Background color on focus if deselected"
        },
        {
          "name": "--ino-option-deselected-background-color-hover",
          "annotation": "prop",
          "docs": "Background color on hover if deselected"
        },
        {
          "name": "--ino-option-selected-background-color",
          "annotation": "prop",
          "docs": "Background color if selected"
        },
        {
          "name": "--ino-option-selected-background-color-active",
          "annotation": "prop",
          "docs": "Background color if active and selected"
        },
        {
          "name": "--ino-option-selected-background-color-focus",
          "annotation": "prop",
          "docs": "Background color on focus if selected"
        },
        {
          "name": "--ino-option-selected-background-color-hover",
          "annotation": "prop",
          "docs": "Background color on hover if selected"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "The text of the option"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-option-group/ino-option-group.tsx",
      "fileName": "ino-option-group.tsx",
      "tag": "ino-option-group",
      "readme": "# ino-option-group\r\n\r\nA wrapper component to be used for a group of ino-options. This component adds a non-selectable header before the options.\r\n\r\nBeyond that, if you encounter problems using React or Vue in conjunction with the `ino-select`, use this component as a wrapper around your `ino-option`. This way the virtual DOM will know when to update the `ino-select` and its children, which may otherwise not work properly if the options are added dynamically while deeply nested in the `ino-select'. For more information refer to [this issue](https://github.com/ionic-team/stencil/issues/2259).\r\n\r\n### Usage\r\n\r\n```html\r\n<ino-select>\r\n  <ino-option-group label=\"My First Option Group\">\r\n    <ino-option value=\"Option 1\">Option 1</ino-option>\r\n    <ino-option value=\"Option 2\">Option 2</ino-option>\r\n    <ino-option value=\"Option 3\">Option 3</ino-option>\r\n  </ino-option-group>\r\n  <ino-option-group label=\"My Second Option Group\">\r\n    <ino-option value=\"Option 4\">Option 4</ino-option>\r\n    <ino-option value=\"Option 5\">Option 5</ino-option>\r\n    <ino-option value=\"Option 6\">Option 6</ino-option>\r\n  </ino-option-group>\r\n</ino-select>\r\n```\r\n\r\n### React\r\n\r\n#### Example\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport {\r\n  InoSelect,\r\n  InoOption,\r\n  InoOptionGroup,\r\n} from '@inovex.de/elements-react/dist';\r\n\r\nclass MyComponent extends Component {\r\n  state = {\r\n    selected: 'Option 1',\r\n  };\r\n\r\n  changeHandler = (value) => {\r\n    this.setState({ selected: value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <InoSelect\r\n        label=\"My Select\"\r\n        value={this.state.selected}\r\n        onValueChange={() => this.changeHandler(e.detail)}\r\n      >\r\n        <InoOptionGroup label={'Option Group 1'}>\r\n          <InoOption value=\"Option 1\">Option 1</InoOption>\r\n          <InoOption value=\"Option 2\">Option 2</InoOption>\r\n        </InoOptionGroup>\r\n        <InoOptionGroup label={'Option Group 2'}>\r\n          <InoOption value=\"Option 3\">Option 3</InoOption>\r\n          <InoOption value=\"Option 4\">Option 4</InoOption>\r\n        </InoOptionGroup>\r\n      </InoSelect>\r\n    );\r\n  }\r\n}\r\n```\r\n\r",
      "usage": {},
      "docs": "A wrapper component to be used for a group of ino-options. This component adds a non-selectable header before the options.\r\n\r\nBeyond that, if you encounter problems using React or Vue in conjunction with the `ino-select`, use this component as a wrapper around your `ino-option`. This way the virtual DOM will know when to update the `ino-select` and its children, which may otherwise not work properly if the options are added dynamically while deeply nested in the `ino-select'. For more information refer to [this issue](https://github.com/ionic-team/stencil/issues/2259).",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - One or more `ino-option`"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-option"
      ],
      "dependencyGraph": {
        "ino-option-group": [
          "ino-option"
        ]
      },
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the group. If not set, this component serves as a wrapper component for dynamically added `ino-options`.\r\nWhen using react and vue, an issue exists with slots and the virtual DOM. Read more about it [here](https://github.com/ionic-team/stencil/issues/2259).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "One or more `ino-option`"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-popover/ino-popover.tsx",
      "fileName": "ino-popover.tsx",
      "tag": "ino-popover",
      "readme": "# ino-popover\r\n\r\nA Popover is a dialog which is bound to a specific element and appears next to it. Under the\r\nhood, [tippy.js](https://atomiks.github.io/tippyjs/) is used.\r\n\r\nThe Popover\r\nand [Tooltip](https://elements.inovex.de/dist/latest/storybook/?path=/story/notification-ino-tooltip--default-usage)\r\ncomponents are very similar. However, popovers are complex dialogs consisting of several HTML elements, while tooltips\r\ncan only display plain text.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n\r\n<ino-popover\r\n  color-scheme=\"<string>\"\r\n  controlled=\"<boolean>\"\r\n  distance=\"<number>\"\r\n  for=\"<string>\"\r\n  hide-on-blur=\"<boolean>\"\r\n  hide-on-esc=\"<boolean>\"\r\n  interactive=\"<boolean>\"\r\n  placement=\"<string>\"\r\n  trigger=\"<string>\"\r\n  visible=\"<boolean>\"\r\n>\r\n  Any desired HTML\r\n</ino-popover>\r\n```\r\n\r\n#### Targets\r\nThere are currently three ways to attach your popover to a component, which results in a slightly different structure:\r\n\r\n1. Using the `popover-trigger` slot _(preferred)_:\r\n\r\n```html\r\n<ino-popover trigger=\"click\">\r\n    <ino-button slot=\"popover-trigger\">Click to show/hide</ino-button>\r\n    <custom-html-content></custom-html-content>\r\n</ino-popover>\r\n```\r\n\r\n```html\r\n<ino-popover>\r\n├── <ino-button>\r\n└── <custom-html-content>\r\n```\r\n\r\n2. Using the `for` property:\r\n\r\n```html\r\n<ino-button id=\"my-target\" slot=\"popover-trigger\">Click to show/hide</ino-button>\r\n<ino-popover for=\"my-target\" trigger=\"click\">\r\n  <custom-html-content></custom-html-content>\r\n</ino-popover>\r\n```\r\n\r\n```html\r\n<ino-button>\r\n<ino-popover>\r\n└── <custom-html-content>\r\n```\r\n\r\n3. Using the parent element:\r\n\r\n```html\r\n<ino-button>\r\n    Click to show/hide\r\n    <ino-popover trigger=\"click\">\r\n      <custom-html-content></custom-html-content>\r\n    </ino-popover>\r\n</ino-button>\r\n```\r\n\r\n```html\r\n<ino-button>\r\n└── <ino-popover>\r\n    └── <custom-html-content>\r\n```\r\n\r\n\r\n#### Controlled vs. Uncontrolled\r\n\r\nThere are currently two ways you can manage the state of the popover.\r\n\r\n_Uncontrolled_\r\n\r\nEither you use the `trigger` property to define the method when the popover should be opened or closed (e.g. hovering in opens and hovering out closes the popover).\r\nThis is the easiest way as you don't have to worry about managing this state yourself.\r\n\r\n```tsx\r\n// ...\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <InoPopover trigger=\"mouseenter\">\r\n          <InoButton slot=\"popover-trigger\">Open Popover</InoButton>\r\n          This popover will show as soon as the user hovers the button above\r\n        </InoPopover>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n_Controlled_\r\n\r\nOr you use the `controlled` and `visible` property to show/hide the popover by yourself.\r\nThis is helpful if you want to implement custom logic when the popover should be shown or hidden.\r\n\r\n```tsx\r\n// ...\r\n\r\nclass MyComponent extends Component {\r\n\r\n  state = {\r\n    showPopover: false\r\n  };\r\n\r\n  setPopoverState = (show: boolean) => {\r\n    if (this.props.someProp) return; // Some condition\r\n\r\n    this.setState({ showPopover: show });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <InoPopover\r\n          inoControlled\r\n          inoVisible={this.state.showPopover}\r\n          onInoVisibleChanged={(e) => setPopoverState(e.detail)}\r\n        >\r\n          <InoButton slot=\"popover-trigger\">\r\n            Open Popover\r\n          </InoButton>\r\n          This popover will show as soon as the user clicks the button above\r\n        </InoPopover>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```tsx\r\nimport { Component } from 'react';\r\nimport { InoPopover } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoPopover placement=\"left\" for=\"popover-positions-target\">\r\n        This is a simple popover on the left\r\n      </InoPopover>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```tsx\r\nimport React, { Component } from 'react';\r\nimport { InoPopover } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Popover: React.FunctionComponent<Components.InoPopoverAttributes> = (\r\n  props,\r\n) => {\r\n  const { placement, for } = props;\r\n\r\n  return (\r\n    <InoPopover placement={placement} for={for}>\r\n      {props.children}\r\n    </InoPopover>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <Popover placement=\"left\" for=\"popover-positions-target\">\r\n        This is a simple popover on the left\r\n      </Popover>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r",
      "usage": {},
      "docs": "A Popover is a dialog which is bound to a specific element and appears next to it. Under the\r\nhood, [tippy.js](https://atomiks.github.io/tippyjs/) is used.\r\n\r\nThe Popover\r\nand [Tooltip](https://elements.inovex.de/dist/latest/storybook/?path=/story/notification-ino-tooltip--default-usage)\r\ncomponents are very similar. However, popovers are complex dialogs consisting of several HTML elements, while tooltips\r\ncan only display plain text.",
      "docsTags": [
        {
          "name": "slot",
          "text": "popover-trigger - The target element to attach the triggers to"
        },
        {
          "name": "slot",
          "text": "default - Content of the popover"
        }
      ],
      "encapsulation": "none",
      "dependents": [
        "ino-markdown-editor",
        "ino-menu",
        "ino-table-header-cell"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ino-markdown-editor": [
          "ino-popover"
        ],
        "ino-menu": [
          "ino-popover"
        ],
        "ino-table-header-cell": [
          "ino-popover"
        ]
      },
      "props": [
        {
          "name": "attachToBody",
          "type": "boolean",
          "mutable": false,
          "attr": "attach-to-body",
          "reflectToAttr": false,
          "docs": "If set, attaches the popover element to the body.\r\nUseful to avoid overflow or z-index issues.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorScheme",
          "type": "\"light\" | \"primary\" | \"secondary\" | \"transparent\"",
          "mutable": false,
          "attr": "color-scheme",
          "reflectToAttr": false,
          "docs": "Sets the color scheme of the popup\r\nValid options include: 'primary', 'secondary', 'light', 'transparent'",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "transparent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "controlled",
          "type": "boolean",
          "mutable": false,
          "attr": "controlled",
          "reflectToAttr": false,
          "docs": "Used to indicate if the popover should be controlled by itself (`false`) or manually by the `visible` property (`true`)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "distance",
          "type": "number",
          "mutable": false,
          "attr": "distance",
          "reflectToAttr": false,
          "docs": "Displaces the popover away from, or toward, the anchor element in the direction of its placement.\r\nA positive number displaces it further away, while a negative number lets it overlap the anchor.",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "followCursor",
          "type": "\"horizontal\" | \"initial\" | \"vertical\" | boolean",
          "mutable": false,
          "attr": "follow-cursor",
          "reflectToAttr": false,
          "docs": "Determines if and how the popover follows the user's mouse cursor.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "initial",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "for",
          "type": "string",
          "mutable": false,
          "attr": "for",
          "reflectToAttr": false,
          "docs": "The target id the popover belongs to.\r\nIf not given, the popover is attached to the element provided in the named slot (`popover-trigger`)\r\nor the parent component if a slot element does not exist.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hideOnBlur",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-on-blur",
          "reflectToAttr": false,
          "docs": "If true, hides the popper on blur.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hideOnEsc",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-on-esc",
          "reflectToAttr": false,
          "docs": "If true, hides the popper on esc.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "interactive",
          "type": "boolean",
          "mutable": false,
          "attr": "interactive",
          "reflectToAttr": false,
          "docs": "Use this if you want to interact with the popover content (e.g. button clicks)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "The placement of this popover.\r\nAccepted values: `top(-start, -end)`, `right(-start, -end)`,\r\n`bottom(-start, -end)`, `left(-start, -end)`",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "\"click focus mouseenter\" | \"click focus\" | \"click mouseenter focus\" | \"click mouseenter\" | \"click\" | \"focus click mouseenter\" | \"focus click\" | \"focus mouseenter click\" | \"focus mouseenter\" | \"focus\" | \"mouseenter click focus\" | \"mouseenter click\" | \"mouseenter focus click\" | \"mouseenter focus\" | \"mouseenter\"",
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "The trigger to show the tooltip - either click, hover or focus.\r\nMultiple triggers are possible by separating them with a space.",
          "docsTags": [],
          "default": "'mouseenter focus'",
          "values": [
            {
              "value": "click focus mouseenter",
              "type": "string"
            },
            {
              "value": "click focus",
              "type": "string"
            },
            {
              "value": "click mouseenter focus",
              "type": "string"
            },
            {
              "value": "click mouseenter",
              "type": "string"
            },
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "focus click mouseenter",
              "type": "string"
            },
            {
              "value": "focus click",
              "type": "string"
            },
            {
              "value": "focus mouseenter click",
              "type": "string"
            },
            {
              "value": "focus mouseenter",
              "type": "string"
            },
            {
              "value": "focus",
              "type": "string"
            },
            {
              "value": "mouseenter click focus",
              "type": "string"
            },
            {
              "value": "mouseenter click",
              "type": "string"
            },
            {
              "value": "mouseenter focus click",
              "type": "string"
            },
            {
              "value": "mouseenter focus",
              "type": "string"
            },
            {
              "value": "mouseenter",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visible",
          "type": "boolean",
          "mutable": false,
          "attr": "visible",
          "reflectToAttr": false,
          "docs": "Programmatically show or hide the popover.\r\nCan only be used in controlled mode (see property `controlled`).\r\nUse the `visibleChanged` to sync the popovers' visibility state with yours.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getTippyInstance",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "getTippyInstance() => Promise<any>",
          "parameters": [],
          "docs": "Returns the internally used tippy.js instance\r\nFor more informations see: https://atomiks.github.io/tippyjs/",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "visibleChanged",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the popover wants to show (`true`) or hide (`false`) itself.\r\nThis is depended on the `trigger` property.\r\nUse this event in controlled-mode (see `controlled`).\r\n\r\ne.g.: `trigger = 'click'` - This events emits with `true`\r\nwhen the user clicks on the target (slot/`for`/parent-element)\r\nand emits with `false` when the target or the outside is clicked.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Content of the popover"
        },
        {
          "name": "popover-trigger",
          "docs": "The target element to attach the triggers to"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-progress-bar/ino-progress-bar.tsx",
      "fileName": "ino-progress-bar.tsx",
      "tag": "ino-progress-bar",
      "readme": "# ino-progress-bar\r\n\r\nThe ino-progress-bar is a linear progress bar based on the mdc-linear-progress component.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-progress-bar\r\n  buffer=\"0.7\"\r\n  progress=\"0.4\"\r\n  reversed\r\n  indeterminate\r\n  label=\"Progress Bar\"\r\n>\r\n</ino-progress-bar>\r\n```\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport { Component } from 'react';\r\nimport { InoProgressBar, InoButton } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n    state = {\r\n      indeterminate: false\r\n    };\r\n\r\n    handleClick = () => {\r\n      this.setState((state) => ({\r\n        indeterminate: !state.indeterminate\r\n      }));\r\n    };\r\n\r\n    render() {\r\n      return (\r\n        <>\r\n          <InoButton onClick={() => this.handleClick()}>Click me!</InoButton>\r\n          <InoProgressBar indeterminate={this.state.indeterminate}></InoProgressBar>\r\n        </>\r\n      )\r\n    }\r\n}\r\n```\r\n\r",
      "usage": {},
      "docs": "The ino-progress-bar is a linear progress bar based on the mdc-linear-progress component.",
      "docsTags": [],
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "buffer",
          "type": "number",
          "mutable": false,
          "attr": "buffer",
          "reflectToAttr": false,
          "docs": "Sets the buffer progress",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "mutable": false,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "Indicates whether the state of the progress bar is indeterminate",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets the label of the progress bar",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "progress",
          "type": "number",
          "mutable": false,
          "attr": "progress",
          "reflectToAttr": false,
          "docs": "Sets the progress of the progress bar.\r\nShould always be between 0 and 1",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--progress-bar--bar-color",
          "annotation": "prop",
          "docs": "Color of the progress bar"
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-radio/ino-radio.tsx",
      "fileName": "ino-radio.tsx",
      "tag": "ino-radio",
      "readme": "# ino-radio\r\n\r\nA radio component that allows the user to select an option from a set of radio-buttons. In order to have a single select functionality, please refer to the `ino-radio-group`-component. This component functions as a wrapper around the material [radio](https://github.com/material-components/material-components-web/tree/master/packages/mdc-radio) component.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-radio')\r\n  .addEventListener('checkedChange', (_) =>\r\n    alert(`The radio button should be checked`),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-radio\r\n  checked=\"<boolean>\"\r\n  disabled=\"<boolean>\"\r\n  name=\"<string>\"\r\n  value=\"<string>\"\r\n  id=\"<string>\"\r\n  oncheckedChange=\"handleCheckedChange()\"\r\n>\r\n  Label\r\n</ino-radio>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoRadio } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoRadio checked name=\"radio-1\">\r\n        Checked\r\n      </InoRadio>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoRadio } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Radio: React.FunctionComponent<Components.InoRadioAttributes> = (\r\n  props,\r\n) => {\r\n  const { checked, name } = props;\r\n\r\n  return (\r\n    <InoRadio checked={checked} name={name}>\r\n      {props.children}\r\n    </InoRadio>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <Radio checked name=\"radio-1\">\r\n        Checked\r\n      </Radio>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\n### Control flow\r\n\r\nClicking on the radio button triggers an event that contains the boolean value `true` (`e.detail`). This event is only triggered if the radio button was not previously selected (`checked=false`). In order to check one element and uncheck the other ones, please refer to the `ino-radio-group`-Component. If (`checked=true`) is passed to an element, the other elements **won't** be deselected without the use of the `ino-radio-group`.\r\n\r\n```html\r\n<ino-radio\r\n  checked={this.state.checked}\r\n  checkedChange={e => this.state.checked = e.detail}>\r\n</ino-radio>\r\n```\r\n\r\n## Demo\r\n\r",
      "usage": {},
      "docs": "A radio component that allows the user to select an option from a set of radio-buttons. In order to have a single select functionality, please refer to the `ino-radio-group`-component. This component functions as a wrapper around the material [radio](https://github.com/material-components/material-components-web/tree/master/packages/mdc-radio) component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Label of the checkbox"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [
        "ino-control-item"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ino-control-item": [
          "ino-radio"
        ]
      },
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Initially marks this element as checked.\r\nIf another ino-radio element in the same group receives `true`,\r\nthe value will be changed to false automatically.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of this element. Use the same name for radio groups",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "checkedChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the user interacts with the radio-button. Contains `true` in `event.detail`.\r\nThis event will only be emitted if the current state of the radio button is false.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-radio-active-color",
          "annotation": "prop",
          "docs": "color of the radio if active"
        },
        {
          "name": "--ino-radio-checked-color",
          "annotation": "prop",
          "docs": "color of the radio if checked"
        },
        {
          "name": "--ino-radio-disabled-inner-circle-color",
          "annotation": "prop",
          "docs": "color of the inner circle if disabled"
        },
        {
          "name": "--ino-radio-disabled-outer-circle-color",
          "annotation": "prop",
          "docs": "color of the outer circle if disabled"
        },
        {
          "name": "--ino-radio-hover-color",
          "annotation": "prop",
          "docs": "color of the radio on hover"
        },
        {
          "name": "--ino-radio-unchecked-color",
          "annotation": "prop",
          "docs": "color of the radio if unchecked"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "Label of the checkbox"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-radio-group/ino-radio-group.tsx",
      "fileName": "ino-radio-group.tsx",
      "tag": "ino-radio-group",
      "readme": "# ino-radio-group\r\n\r\nA wrapper component to be used for a group of ino-radio-buttons. This component manages the single selection functionality of a group of ino-radio-buttons.\r\n\r\n### Usage\r\n\r\n```html\r\n<ino-radio-group value=\"Option 1\">\r\n  <ino-radio value=\"Option 1\">I will be checked</ino-radio>\r\n  <ino-radio value=\"Option 2\">Option 2</ino-radio>\r\n  <ino-radio value=\"Option 3\">Option 3</ino-radio>\r\n</ino-radio-group>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoRadio, InoRadioGroup } from '@inovex.de/elements-react/dist';\r\n\r\nclass MyComponent extends Component {\r\n  state = {\r\n    selected: 'Option 1',\r\n  };\r\n\r\n  clickHandler = (value) => {\r\n    this.setState({ selected: value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <InoRadioGroup value={this.state.selected} onValueChange={(ev) => this.clickHandler(ev.detail)}>\r\n        <InoRadio value=\"Option 1\">\r\n          I will be checked\r\n        </InoRadio>\r\n        <InoRadio value=\"Option 2\">\r\n          Option 2\r\n        </InoRadio>\r\n        <InoRadio value=\"Option 3\">\r\n          Option 3\r\n        </InoRadio>\r\n      </InoRadioGroup>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoRadioGroup } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst RadioGroup: React.FunctionComponent<Components.InoRadioGroupAttributes> = (\r\n  props,\r\n) => {\r\n  const { value } = props;\r\n\r\n  return <InoRadioGroup value={value}>{props.children}</InoRadioGroup>;\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <RadioGroup value={'Option 1'}>...</RadioGroup>;\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\n### Control flow\r\n\r\nIn order to change the checked element (and uncheck the other ones) listen to the `valueChange`-Event emitted by the `ino-radio-group` and pass the value via the `value`-Property.\r\n\r",
      "usage": {},
      "docs": "A wrapper component to be used for a group of ino-radio-buttons. This component manages the single selection functionality of a group of ino-radio-buttons.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - One or more `ino-radio`"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "alignment",
          "type": "\"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": false,
          "docs": "Sets the alignment of the radios to either vertical or horizontal.",
          "docsTags": [],
          "default": "'horizontal'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the radio group.\r\nIf there is an ino-radio child with the given value, the radio-button will be checked and the other radio-buttons unchecked.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "number | string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits if the user clicks or navigates (via keyboard) to a `<ino-radio>` element within the radio group.\r\nContains the `value` of the selected `<ino-radio>`.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "One or more `ino-radio`"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-range/ino-range.tsx",
      "fileName": "ino-range.tsx",
      "tag": "ino-range",
      "readme": "# ino-range\r\n\r\nA range component that allows the user select a number using a slider. It functions as a wrapper around the material [Slider](https://github.com/material-components/material-components-web/tree/master/packages/mdc-slider) component.\r\n\r\n> Note: Range sliders with multiple thumbs are not yet implemented.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-datepicker')\r\n  .addEventListener('valueChange', (e) =>\r\n    alert(`The new range value is: ${e.detail}`),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-range\r\n  min=\"<number>\"\r\n  max=\"<number>\"\r\n  value=\"<number>\"\r\n  name=\"<string>\"\r\n  step=\"<number>\"\r\n  disabled\r\n  color-scheme=\"<string>\"\r\n  discrete\r\n  markers\r\n>\r\n</ino-range>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoRange } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <InoRange inoColorScheme=\"primary\" />;\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoRange } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Range: React.FunctionComponent<Components.InoRangeAttributes> = (\r\n  props,\r\n) => {\r\n  const { inoColorScheme } = props;\r\n\r\n  return <InoRange inoColorScheme={inoColorScheme}>{props.children}</InoRange>;\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <Range inoColorScheme=\"primary\" />;\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r",
      "usage": {},
      "docs": "A range component that allows the user select a number using a slider. It functions as a wrapper around the material [Slider](https://github.com/material-components/material-components-web/tree/master/packages/mdc-slider) component.\r\n\r\n> Note: Range sliders with multiple thumbs are not yet implemented.",
      "docsTags": [],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "colorScheme",
          "type": "\"dark\" | \"error\" | \"light\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color-scheme",
          "reflectToAttr": false,
          "docs": "The name of the color scheme of this component.\r\nPossible values: `primary` (default), `secondary`,\r\n`success`, `warning`, `error`, `light`, `dark`.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "discrete",
          "type": "boolean",
          "mutable": false,
          "attr": "discrete",
          "reflectToAttr": false,
          "docs": "Restricts the slider to only allow discrete values.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "markers",
          "type": "boolean",
          "mutable": false,
          "attr": "markers",
          "reflectToAttr": false,
          "docs": "Mark this slider to show the steps of the range.\r\nOnly applicable if `discrete` is enabled.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The max value of this element (**required**).",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The min value of this element.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ranged",
          "type": "boolean",
          "mutable": false,
          "attr": "ranged",
          "reflectToAttr": false,
          "docs": "Allows to input an interval.\r\nUse `valueStart` and `valueEnd` to provide values.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "The step size for this element.\r\nOnly applicable if `discrete` is enabled.\r\nIs used to calculate the number of markers.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of this element.\r\nOnly applicable if not in ranged mode.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "valueEnd",
          "type": "number",
          "mutable": false,
          "attr": "value-end",
          "reflectToAttr": false,
          "docs": "The value of the right thumb.\r\nOnly applicable in ranged mode.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "valueStart",
          "type": "number",
          "mutable": false,
          "attr": "value-start",
          "reflectToAttr": false,
          "docs": "The value of the left thumb.\r\nOnly applicable in ranged mode.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setValueToAriaTextMapperFn",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setValueToAriaTextMapperFn(fn: (value: number) => string) => Promise<void>",
          "parameters": [],
          "docs": "Should be used to make the component accessible.\r\nIf the value is not user-friendly (e.g. a number to represent the day of the week),\r\nuse this method to set a function that maps the slider `value` to value of the `aria-valuetext` attribute (e.g. `0` => `monday`).\r\n\r\ne.g.:\r\n\r\n`const rangeEl = document.querySelector(\"ino-range\")`\r\n`rangeEl.setFnToMapValueToAriaText((value: number) => value + \". day in this week\")`",
          "docsTags": [
            {
              "name": "param",
              "text": "fn A function that maps the numeric value to a user-friendly string."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "valueChange",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the value changes (not in ranged mode).",
          "docsTags": []
        },
        {
          "event": "valueEndChange",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the end (right) value of the interval changes (in ranged mode).",
          "docsTags": []
        },
        {
          "event": "valueStartChange",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the start (left) value of the interval changes (in ranged mode).",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-segment-button/ino-segment-button.tsx",
      "fileName": "ino-segment-button.tsx",
      "tag": "ino-segment-button",
      "readme": "# ino-segment-button\r\n\r\nA button component that can be used in combination with the ino-segment-group component.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n### Web Component\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-segment-button')\r\n  .addEventListener('click', () => alert('Button was clicked!'));\r\n```\r\n\r\n```html\r\n<ino-segment-button checked disabled name=\"<string>\" dense value=\"<string>\">\r\n  Button Content\r\n</ino-segment-button>\r\n```\r\n\r\n### React\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoSegmentButton } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoSegmentButton onClick={(_) => alert('Yeah, you clicked the button!')}>\r\n        You can click me!\r\n      </InoSegmentButton>\r\n    );\r\n  }\r\n}\r\n```\r\n\r",
      "usage": {},
      "docs": "A button component that can be used in combination with the ino-segment-group component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Label of the button"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Activates the button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dense",
          "type": "boolean",
          "mutable": false,
          "attr": "dense",
          "reflectToAttr": false,
          "docs": "Slightly decreases the size of the button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "checkedChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits if the user interacts with the button.\r\nIf the button is disabled or checked, the event will not be emitted.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-segment-button-checked-color",
          "annotation": "prop",
          "docs": "Color of the segment button if checked"
        },
        {
          "name": "--ino-segment-button-checked-shadow",
          "annotation": "prop",
          "docs": "Color and shape of the shadow if checked"
        },
        {
          "name": "--ino-segment-button-color",
          "annotation": "prop",
          "docs": "Color of the segment button if inactive"
        },
        {
          "name": "--ino-segment-button-disabled-color",
          "annotation": "prop",
          "docs": "Color of the segment button if disabled"
        },
        {
          "name": "--ino-segment-button-hover-color",
          "annotation": "prop",
          "docs": "Color of the segment button on hover"
        },
        {
          "name": "--ino-segment-button-hover-shadow",
          "annotation": "prop",
          "docs": "Color and shape of the shadow on hover"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "Label of the button"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-segment-group/ino-segment-group.tsx",
      "fileName": "ino-segment-group.tsx",
      "tag": "ino-segment-group",
      "readme": "# ino-segment-group\r\n\r\nA button group that can be used as an alternative to drop-down menus.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n### Web Component\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-segment-group')\r\n  .addEventListener('checkedChange', (e) =>\r\n    console.log(`${e.target} was checked!`),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-segment-group value=\"1\" name=\"<string>\">\r\n  <ino-segment-button value=\"1\">Option 1</ino-segment-button>\r\n  <ino-segment-button value=\"2\">Option 2</ino-segment-button>\r\n  <ino-segment-button value=\"3\">Option 3</ino-segment-button>\r\n</ino-segment-group>\r\n```\r\n\r\n### React\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport {\r\n  InoSegmentButton,\r\n  InoSegmentGroup,\r\n} from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  state = {\r\n    val: 1,\r\n  };\r\n\r\n  handleEvent = (val) => {\r\n    this.setState({ val: val });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <InoSegmentGroup value={this.state.val} name=\"my-group\">\r\n        <InoSegmentButton\r\n          value=\"1\"\r\n          onCheckedChange={() => this.handleEvent('1')}\r\n        >\r\n          Option 1\r\n        </InoSegmentButton>\r\n        <InoSegmentButton\r\n          value=\"2\"\r\n          onCheckedChange={() => this.handleEvent('2')}\r\n        >\r\n          Option 2\r\n        </InoSegmentButton>\r\n        <InoSegmentButton\r\n          value=\"3\"\r\n          onCheckedChange={() => this.handleEvent('3')}\r\n        >\r\n          Option 3\r\n        </InoSegmentButton>\r\n      </InoSegmentGroup>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Event handling\r\n\r\nThe `checkedChange` event can be used to set the selected option. Simply subscribe to the event and set the group value\r\nto the value of the button that emitted the event.\r\n\r",
      "usage": {},
      "docs": "A button group that can be used as an alternative to drop-down menus.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - One or more `ino-segment-button`"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the segment group",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the segment group",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "One or more `ino-segment-button`"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-select/ino-select.tsx",
      "fileName": "ino-select.tsx",
      "tag": "ino-select",
      "readme": "# ino-select\r\n\r\nA component providing single-option select menus. It functions as a wrapper around the material design's [select](https://github.com/material-components/material-components-web/tree/master/packages/mdc-select) component.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-select')\r\n  .addEventListener('valueChange', (e) =>\r\n    alert(`The new select value is: ${e.detail}`),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-select\r\n  autofocus\r\n  disabled\r\n  name=\"<string>\"\r\n  required\r\n  value=\"<string>\"\r\n  label=\"<string>\"\r\n  outline\r\n>\r\n  <ino-option value=\"Option 1\">Option 1</ino-option>\r\n  <ino-option value=\"Option 2\">Option 2</ino-option> ...\r\n</ino-select>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoSelect, InoOption } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoSelect; inoLabel=\"Form select\"; required>\r\n        <InoOption; value=\"Test\">Test</InoOption>\r\n      </InoSelect>;;\r\n    )\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoSelect, InoOption } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Select: React.FunctionComponent<Components.InoSelectAttributes> = props => {\r\n  const { inoLabel, required } = props;\r\n\r\n  return (\r\n    <InoSelect;\r\n      inoLabel={inoLabel};\r\n      required={required}\r\n    >\r\n      {props.children}\r\n    </InoSelect>;;\r\n  )\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <Select; inoLabel=\"Form select\"; required>\r\n        <InoOption; value=\"Test\">Test</InoOption>\r\n      </Select>;;\r\n    )\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\nUse the custom `ino-option` component to add options to the select component. The `label` attribute sets an optional floating label for this element.\r\n\r\n### Control flow\r\n\r\nThe select has a controlled (unmanaged) attribute `value`. For this reason, the value doesn't change on user interaction but on updates of `value`. Listen to `valueChange`, sync it with your local state and pass the new value to the component again to change value of select.\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-select')\r\n  .addEventListener('valueChange', (e) => (this.state.value = e.detail));\r\n```\r\n\r\n### Event Behaviour\r\n\r\nThe component behaves like a native select with additional features. The native `input'` is not bubbled. The component will emit a `valueChange` event if the value of the group changes.\r\n\r",
      "usage": {},
      "docs": "A component providing single-option select menus. It functions as a wrapper around the material design's [select](https://github.com/material-components/material-components-web/tree/master/packages/mdc-select) component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "icon-leading - For the icon to be prepended"
        },
        {
          "name": "slot",
          "text": "default - One or more `ino-option(-group)`"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-label"
      ],
      "dependencyGraph": {
        "ino-select": [
          "ino-label"
        ]
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "error",
          "type": "boolean",
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "Displays the select as invalid if set to true.\r\nIf the property is not set or set to false,\r\nthe validation is handled by the default validation.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helper",
          "type": "string",
          "mutable": false,
          "attr": "helper",
          "reflectToAttr": false,
          "docs": "A helper text to display below the select element.\r\nBy default, non-validation helper text is always visible.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperPersistent",
          "type": "boolean",
          "mutable": false,
          "attr": "helper-persistent",
          "reflectToAttr": false,
          "docs": "When the helper text is serving as a validation message,\r\nmake it permanently visible regardless of the select's validity.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperValidation",
          "type": "boolean",
          "mutable": false,
          "attr": "helper-validation",
          "reflectToAttr": false,
          "docs": "Indicates the helper text is a validation message.\r\nBy default validation message is hidden unless the select is invalid.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Styles this select box as outlined element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Marks this element as required.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showLabelHint",
          "type": "boolean",
          "mutable": false,
          "attr": "show-label-hint",
          "reflectToAttr": false,
          "docs": "If true, an *optional* message is displayed if not required,\r\notherwise a * marker is displayed if required.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of this element. (**unmanaged**)",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "valueChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when a selection changes. Contains new value in `event.detail`.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-select-height",
          "annotation": "prop",
          "docs": "Height of the open select menu"
        },
        {
          "name": "--ino-select-icon-color",
          "annotation": "prop",
          "docs": "Icon color"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "One or more `ino-option(-group)`"
        },
        {
          "name": "icon-leading",
          "docs": "For the icon to be prepended"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "MDCSelect:change",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-sidebar/ino-sidebar.tsx",
      "fileName": "ino-sidebar.tsx",
      "tag": "ino-sidebar",
      "readme": "# ino-sidebar\r\n\r\nThe ino-sidebar is a modal sidebar that can be used to display additional information.\r\nIt functions as a wrapper around the material [drawer](https://github.com/material-components/material-components-web/blob/master/packages/mdc-drawer/) component.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n### Web Component\r\n\r\n```js\r\ndocument\r\n    .querySelector('ino-sidebar')\r\n    .addEventListener('openChange', (e) => console.log(`state of sidebar changed to ${e.detail}`);\r\n```\r\n\r\n```html\r\n<ino-sidebar>\r\n  <div class=\"sidebar-header\" slot=\"header\">\r\n    <ino-icon clickable icon=\"close-s\"></ino-icon>\r\n  </div>\r\n  <div class=\"sidebar-content\" slot=\"content\">\r\n    <ino-list>\r\n      <ino-list-item text=\"List item\"></ino-list-item>\r\n      <ino-list-item text=\"List item\"></ino-list-item>\r\n    </ino-list>\r\n  </div>\r\n</ino-sidebar>\r\n```\r\n\r\n### React\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport { Component } from 'react';\r\nimport { InoSidebar, InoButton } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n\r\n  state = {\r\n    expanded: false\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.setState((state) => ({\r\n      expanded: !state.expanded\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <InoButton onClick={() => this.handleClick()}>Sidebar</InoButton>\r\n      <InoSidebar inoOpen={this.state.expanded}></InoSidebar>\r\n    )\r\n  }\r\n\r\n}\r\n```\r\n\r\n## Sidenotes\r\n\r\nThe empty `div` tag with the `tabindex=\"0\"` attribute as well as the `<div class=\"mdc-drawer-scrim\"/>` tag\r\nare indispensable for the sidebar to work properly. For further information,\r\nrefer to https://github.com/material-components/material-components-web/issues/5615 and\r\nhttps://github.com/material-components/material-components-web/tree/master/packages/mdc-drawer.\r\n\r",
      "usage": {},
      "docs": "The ino-sidebar is a modal sidebar that can be used to display additional information.\r\nIt functions as a wrapper around the material [drawer](https://github.com/material-components/material-components-web/blob/master/packages/mdc-drawer/) component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "header - For the header element"
        },
        {
          "name": "slot",
          "text": "content - For the content"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "alignRight",
          "type": "boolean",
          "mutable": false,
          "attr": "align-right",
          "reflectToAttr": false,
          "docs": "Aligns the sidebar to the right (true) or left (false) side",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": false,
          "attr": "open",
          "reflectToAttr": false,
          "docs": "Expands the sidebar",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "openChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits an event if the user expands or collapses the sidebar",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--sidebar-width",
          "annotation": "prop",
          "docs": "The width of the open sidebar."
        }
      ],
      "slots": [
        {
          "name": "content",
          "docs": "For the content"
        },
        {
          "name": "header",
          "docs": "For the header element"
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-snackbar/ino-snackbar.tsx",
      "fileName": "ino-snackbar.tsx",
      "tag": "ino-snackbar",
      "readme": "# ino-snackbar\r\n\r\nSnackbars provide brief messages about app processes at the bottom of the screen. It functions as a wrapper around the material design's [Snackbar](https://github.com/material-components/material-components-web/tree/master/packages/mdc-snackbar) component\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-snackbar')\r\n  .addEventListener('inoActionClick', (e) =>\r\n    alert('Action-Button was clicked!'),\r\n  );\r\n\r\ndocument\r\n  .querySelector('ino-snackbar')\r\n  .addEventListener('hideEl', (e) => alert('Snackbar hides!'));\r\n```\r\n\r\n```html\r\n<ino-snackbar\r\n  message=\"<string>\"\r\n  action-text=\"<string>\"\r\n  action-on-bottom\r\n  align-start\r\n  oninoactionclick=\"handleClickEl()\"\r\n  onhideel=\"handleHideEl()\"\r\n>\r\n</ino-snackbar>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoSnackbar } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoSnackbar\r\n        inoMessage=\"Message deleted\"\r\n        inoActionText=\"Undo\"\r\n        inoActionOnBottom={false}\r\n        inoAlignStart={false}\r\n      />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoSnackbar } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Snackbar: React.FunctionComponent<Components.InoSnackbarAttributes> = props => {\r\n  const {\r\n    inoMessage,\r\n    inoActionText,\r\n    inoActionOnBottom,\r\n    inoAlignStart\r\n  } = props;\r\n\r\n  return (\r\n    <InoSnackbar\r\n      inoMessage={inoMessage}\r\n      inoActionText={inoActionText}\r\n      inoActionOnBottom={inoActionOnBottom}\r\n      inoAlignStart={inoAlignStart}\r\n    >\r\n      {props.children}\r\n    </InoSnackbar>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  const conditionToRender = true;\r\n\r\n  render() {\r\n    return conditionToRender && (\r\n      <Snackbar\r\n        inoMessage=\"Message deleted\"\r\n        inoActionText=\"Undo\"\r\n        inoActionOnBottom={false}\r\n        inoAlignStart={false}\r\n      />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\nSnackbar is displayed when `show` is changed to checked.\r\n\r",
      "usage": {},
      "docs": "Snackbars provide brief messages about app processes at the bottom of the screen. It functions as a wrapper around the material design's [Snackbar](https://github.com/material-components/material-components-web/tree/master/packages/mdc-snackbar) component",
      "docsTags": [],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-icon",
        "ino-icon-button"
      ],
      "dependencyGraph": {
        "ino-snackbar": [
          "ino-icon",
          "ino-icon-button"
        ],
        "ino-icon-button": [
          "ino-icon"
        ]
      },
      "props": [
        {
          "name": "actionText",
          "type": "string",
          "mutable": false,
          "attr": "action-text",
          "reflectToAttr": false,
          "docs": "The text to display for the action button.\r\nIf no text is defined, the snack bar is displayed in an alternative feedback style.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "message",
          "type": "string",
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "[DEPRECATED] Please use the default slot instead\r\nThe text message to display.",
          "docsTags": [
            {
              "name": "deprecated"
            }
          ],
          "deprecation": "",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "stayVisibleOnHover",
          "type": "boolean",
          "mutable": false,
          "attr": "stay-visible-on-hover",
          "reflectToAttr": false,
          "docs": "If set to true, the timeout that closes the snackbar is paused when the user hovers over the snackbar.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "timeout",
          "type": "number",
          "mutable": false,
          "attr": "timeout",
          "reflectToAttr": false,
          "docs": "Sets the timeout in ms until the snackbar disappears. The timeout can\r\nbe disabled by setting it to a negative value.",
          "docsTags": [],
          "default": "5000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"error\" | \"info\" | \"success\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Changes the snackbar type. There are three types of messages: info, success, and error.",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "actionClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event that emits as soon as the action button is clicked.",
          "docsTags": []
        },
        {
          "event": "hideEl",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event that emits as soon as the snackbar hides.\r\nListen to this event to hide or destroy this element.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-snackbar-bottom",
          "annotation": "prop",
          "docs": "Distance to the bottom edge"
        },
        {
          "name": "--ino-snackbar-left",
          "annotation": "prop",
          "docs": "Distance to the left edge"
        },
        {
          "name": "--ino-snackbar-right",
          "annotation": "prop",
          "docs": "Distance to the right edge"
        },
        {
          "name": "--ino-snackbar-top",
          "annotation": "prop",
          "docs": "Distance to the top edge"
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-spinner/ino-spinner.tsx",
      "fileName": "ino-spinner.tsx",
      "tag": "ino-spinner",
      "readme": "# ino-spinner\r\n\r\nA component which displays a variety of spinners. Use spinners to show that the app is loading content or performing another process for which the user has to wait.\r\n\r\nThis component contains three different types of spinners animated with pure CSS. It mainly relies on [Spinkit](http://tobiasahlin.com/spinkit/) and may be extended in future with more types.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-spinner\r\n  type=\"<string>\"\r\n  color-scheme=\"<string>\"\r\n  height=\"<number>\"\r\n  modal\r\n  width=\"<number>\"\r\n>\r\n</ino-spinner>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoSpinner } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <InoSpinner inoColorScheme=\"warning\" />;\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoSpinner } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Spinner: React.FunctionComponent<Components.InoSpinnerAttributes> = (\r\n  props,\r\n) => {\r\n  const { inoColorScheme } = props;\r\n\r\n  return (\r\n    <InoSpinner inoColorScheme={inoColorScheme}>{props.children}</InoSpinner>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return <Spinner inoColorScheme=\"warning\" />;\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\nUse one of the provided types in `type` to give the spinner the shape. Adjust the size of the spinner by changing the `height` and `width` attributes. Finally, colorize the spinner using `color-scheme` (see the attribute docs below).\r\n\r\n**Modal:** If operations have to block the entire page, the spinner can be marked with `modal` to spread over the entire screen and overlay the current page.\r\n\r",
      "usage": {},
      "docs": "A component which displays a variety of spinners. Use spinners to show that the app is loading content or performing another process for which the user has to wait.\r\n\r\nThis component contains three different types of spinners animated with pure CSS. It mainly relies on [Spinkit](http://tobiasahlin.com/spinkit/) and may be extended in future with more types.",
      "docsTags": [],
      "encapsulation": "none",
      "dependents": [
        "ino-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ino-button": [
          "ino-spinner"
        ]
      },
      "props": [
        {
          "name": "colorScheme",
          "type": "\"dark\" | \"error\" | \"light\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color-scheme",
          "reflectToAttr": false,
          "docs": "The name of the color scheme which is used\r\nto style the background and outline of this component.\r\nPossible values: `primary` (default),  `secondary`,\r\n`success`, `warning`, `error`, `light`, `dark`.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "height",
          "type": "number",
          "mutable": false,
          "attr": "height",
          "reflectToAttr": false,
          "docs": "The height of this spinner (default = 40)",
          "docsTags": [],
          "default": "40",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "modal",
          "type": "boolean",
          "mutable": false,
          "attr": "modal",
          "reflectToAttr": false,
          "docs": "If true, the spinner is shown as modal over the current app page.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"bounce\" | \"circle\" | \"tile\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of this spinner.\r\nPossible values: `tile` (default), `bounce` or `circle`",
          "docsTags": [],
          "default": "'tile'",
          "values": [
            {
              "value": "bounce",
              "type": "string"
            },
            {
              "value": "circle",
              "type": "string"
            },
            {
              "value": "tile",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "number",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "The width of this spinner (defaul = 40)",
          "docsTags": [],
          "default": "40",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-switch/ino-switch.tsx",
      "fileName": "ino-switch.tsx",
      "tag": "ino-switch",
      "readme": "# ino-switch\r\n\r\nInput switches toggle the state of a single item. Compared to the input checkbox, their changes usually apply without any additional submission.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n### Web Component\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-switch')\r\n  .addEventListener('checkedChange', (e) =>\r\n    alert(`The checked state is: ${e.detail}`),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-switch checked disabled color-scheme=\"<string>\" name=\"<string>\">\r\n  Label\r\n</ino-switch>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoSwitch } from '@inovex.de/elements-react';\r\n\r\nclass MyComponent extends Component {\r\n  state = {\r\n    checked: false,\r\n  };\r\n\r\n  handleCheckboxClick(e) {\r\n    this.setState({ checked: e.detail });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <InoSwitch\r\n        checked={this.state.checked}\r\n        onCheckedChange={handleCheckboxClick}\r\n      >\r\n        Apple\r\n      </InoSwitch>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoSwitch } from '@inovex.de/elements-react';\r\nimport { Components } from '@inovex.de/elements-react/dist/types/components';\r\n\r\nconst Switch: React.FunctionComponent<Components.InoSwitchAttributes> = (\r\n  props,\r\n) => {\r\n  const { value, onClick, checked } = props;\r\n\r\n  return (\r\n    <InoSwitch value={value} onCheckedChange={onClick} checked={checked}>\r\n      {value}\r\n    </InoSwitch>\r\n  );\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  state = {\r\n    checked: false,\r\n  };\r\n\r\n  handleCheckboxClick(e) {\r\n    this.setState({ checked: e.detail });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Switch\r\n        value={'Apple'}\r\n        checked={this.state.checked}\r\n        onClick={handleCheckboxClick}\r\n      />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Control flow\r\n\r\nThe input has a controlled (unmanaged) attribute `checked`. For this reason listen to `checkedChange`, sync it with your local state and pass the new value to the component again to change the value.\r\n\r",
      "usage": {},
      "docs": "Input switches toggle the state of a single item. Compared to the input checkbox, their changes usually apply without any additional submission.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Label of the switch"
        },
        {
          "name": "slot",
          "text": "icon-on - Icon used for the checked state. The colors of the `color-scheme` will be used."
        },
        {
          "name": "slot",
          "text": "icon-off - Icon used for the unchecked state. The colors of the `color-scheme` will be used."
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Marks this element as checked. (**unmanaged**)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "colorScheme",
          "type": "\"dark\" | \"error\" | \"light\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color-scheme",
          "reflectToAttr": false,
          "docs": "The name of the color scheme which is used\r\nto style the background and outline of this component.\r\nPossible values: `primary` (default),  `secondary`,\r\n`success`, `warning`, `error`, `light`, `dark`.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "checkedChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the user clicks on the switch to change the `checked` state. Contains the status in `event.detail`.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Label of the switch"
        },
        {
          "name": "icon-off",
          "docs": "Icon used for the unchecked state. The colors of the `color-scheme` will be used."
        },
        {
          "name": "icon-on",
          "docs": "Icon used for the checked state. The colors of the `color-scheme` will be used."
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-tab/ino-tab.tsx",
      "fileName": "ino-tab.tsx",
      "tag": "ino-tab",
      "readme": "# ino-tab\r\n\r\nTabs organize and allow navigation between groups of content that are related and at the same hierarchical level. Each Tab governs the visibility of one group of content. It functions as a wrapper around the material [Tab](https://github.com/material-components/material-components-web/tree/master/packages/mdc-tab) component.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-tab\r\n  label=\"<string>\"\r\n  icon=\"<string>\"\r\n  indicator-content-width\r\n  stacked\r\n>\r\n</ino-tab>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoTab, InoTabBar } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoTabBar inoActiveTab={2}>\r\n        <InoTab inoLabel=\"Tab #1\" />\r\n        <InoTab inoLabel=\"Tab #2\" />\r\n        <InoTab inoLabel=\"Tab #3\" />\r\n      </InoTabBar>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoTab, InoTabBar } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst TabBar: React.FunctionComponent<Components.InoTabBarAttributes> = (\r\n  props,\r\n) => {\r\n  const { inoActiveTab } = props;\r\n\r\n  return <InoTabBar inoActiveTab={inoActiveTab}>{props.children}</InoTabBar>;\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <TabBar inoActiveTab={2}>\r\n        <InoTab inoLabel=\"Tab #1\" />\r\n        <InoTab inoLabel=\"Tab #2\" />\r\n        <InoTab inoLabel=\"Tab #3\" />\r\n      </TabBar>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\n**Content**: Provide the text of a Tab and, if desired, an icon of the tab in `icon`.\r\n\r",
      "usage": {},
      "docs": "Tabs organize and allow navigation between groups of content that are related and at the same hierarchical level. Each Tab governs the visibility of one group of content. It functions as a wrapper around the material [Tab](https://github.com/material-components/material-components-web/tree/master/packages/mdc-tab) component.",
      "docsTags": [],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-icon"
      ],
      "dependencyGraph": {
        "ino-tab": [
          "ino-icon"
        ]
      },
      "props": [
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Indicates a leading icon in the tab.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "indicatorContentWidth",
          "type": "boolean",
          "mutable": false,
          "attr": "indicator-content-width",
          "reflectToAttr": false,
          "docs": "Indicates that the tab only expands to the width of its content.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "[DEPRECATED] Please use the default slot instead.\r\nIndicates a label text in the tab.",
          "docsTags": [
            {
              "name": "deprecated"
            }
          ],
          "deprecation": "",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "stacked",
          "type": "boolean",
          "mutable": false,
          "attr": "stacked",
          "reflectToAttr": false,
          "docs": "Indicates that the tab icon and label should flow vertically instead of horizontally.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "interacted",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the user interacts with the tab.\r\nThis event is used by the ino-tab-bar.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "MDCTab:interacted",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-tab-bar/ino-tab-bar.tsx",
      "fileName": "ino-tab-bar.tsx",
      "tag": "ino-tab-bar",
      "readme": "# ino-tab-bar\r\n\r\nTabs organize and allow navigation between groups of content that are related and at the same hierarchical level. The Tab Bar contains the Tab Scroller and Tab components. It functions as a wrapper around the material [Tab Bar](https://github.com/material-components/material-components-web/tree/master/packages/mdc-tab-bar) component.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-tab-bar')\r\n  .addEventListener('activeTabChange', (e) =>\r\n    console.log(`The index of the new tab is: ${e.detail}`),\r\n  );\r\n```\r\n\r\n```jsx\r\n<ino-tab-bar\r\n  active-tab=\"<number>\"\r\n  onactivetabchange=\"handleActiveTabChange()\"\r\n>\r\n  <ino-tab ...></ino-tab>\r\n</ino-tab-bar>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoTab, InoTabBar } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoTabBar inoActiveTab={2}>\r\n        <InoTab inoLabel=\"Tab #1\" />\r\n        <InoTab inoLabel=\"Tab #2\" />\r\n        <InoTab inoLabel=\"Tab #3\" />\r\n      </InoTabBar>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoTab, InoTabBar } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst TabBar: React.FunctionComponent<Components.InoTabBarAttributes> = (\r\n  props,\r\n) => {\r\n  const { inoActiveTab } = props;\r\n\r\n  return <InoTabBar inoActiveTab={inoActiveTab}>{props.children}</InoTabBar>;\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <TabBar inoActiveTab={2}>\r\n        <InoTab inoLabel=\"Tab #1\" />\r\n        <InoTab inoLabel=\"Tab #2\" />\r\n        <InoTab inoLabel=\"Tab #3\" />\r\n      </TabBar>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\n### Control flow\r\n\r\nThe tab bar has a controlled (unmanaged) attribute `active-tab`. For this reason, the tab doesn't change on user interactions but on updates of `active-tab`. Listen to `activeTabChange`, sync it with your local state and pass the new index to the component again to activate the tab.\r\n\r\n```jsx\r\n<ino-tab-bar\r\n  active-tab={this.state.index}\r\n  activeTabChange={(e) => (this.state.index = e.detail)}\r\n/>\r\n```\r\n\r",
      "usage": {},
      "docs": "Tabs organize and allow navigation between groups of content that are related and at the same hierarchical level. The Tab Bar contains the Tab Scroller and Tab components. It functions as a wrapper around the material [Tab Bar](https://github.com/material-components/material-components-web/tree/master/packages/mdc-tab-bar) component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - One or more `ino-tab`"
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "activeTab",
          "type": "number",
          "mutable": false,
          "attr": "active-tab",
          "reflectToAttr": false,
          "docs": "Activates the tab at the given index (**unmanaged**).",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autoFocus",
          "type": "boolean",
          "mutable": false,
          "attr": "auto-focus",
          "reflectToAttr": false,
          "docs": "Autofocus of tab on activation.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "activeTabChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when a tab changes.\r\nContains the index of the activated tab in `event.detail`",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "One or more `ino-tab`"
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "interacted",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-table/ino-table.tsx",
      "fileName": "ino-table.tsx",
      "tag": "ino-table",
      "readme": "# ino-table\r\nThe ino-table is a custom table used to display sets of data across multiple columns.\r\nIt currently supports different states (selected, active), sorting and loading indication.\r\n\r\n> The component is based on the [mdc-data-table](https://github.com/material-components/material-components-web/tree/master/packages/mdc-data-table).\r\n\r\n## Usage\r\nThe table itself is a wrapper component around native `tr` and `td`. It renders a native `table` element itself and provides the styling for rows and column cell. As a side note it should be said, that having separate `ino-table-row` and `ino-table-header-cell` components would be the more consistent way with respect to the other components (for instance select or radio buttons). However, in large tables, rendering thousands of elements would be a massive overhead for mainly styling purposes.\r\n\r\nNonetheless, a separate `ino-table-header-cell` element contains all the sorting and searching behaviour you may need to make more your tables more intelligent.\r\n\r\n\r\n### Web Component\r\n\r\n```html\r\n<ino-table>\r\n  <tr slot=\"header-row\">\r\n    <td>Column A</td>\r\n    <td>Column B</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Cell A1</td>\r\n    <td>Cell B1</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Cell A2</td>\r\n    <td>Cell B2</td>\r\n  </tr>\r\n</ino-table>\r\n```\r\n\r\n### React\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport { Component } from 'react';\r\nimport { InoTable, InoButton } from '@inovex/elements-react';\r\n\r\nclass MyComponent extends Component {\r\n\r\n  state = { selected: false };\r\n\r\n  handleEvent = () => this.setState(state => ({ selected: !state.selected }));\r\n\r\n  render() {\r\n    return (\r\n      <InoTable>\r\n        <tr className={ this.state.selected ?? 'ino-table__row--selected' }>\r\n          <td>\r\n            <InoButton onClick={this.handleEvent()}>Click Me</InoButton>\r\n          </td>\r\n        </tr>\r\n      </InoTable>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## States\r\nThe table supports the following states:\r\n\r\n### Loading indication\r\nIn order to show the user that data is being loaded and to prohibit any user interaction, set `loading=\"true\"` on the `ino-table`.\r\nAdditionally, one can display a `<ino-progress-bar>` as follows:\r\n\r\n```html\r\n<ino-progress-bar slot=\"loading-indicator\" active indeterminate></ino-progress-bar>\r\n```\r\n\r\nProvide the progress bar as child of the `ino-table` in order render the slot `loading-indicator` at the desired position. Also note the debounce time of 500ms in the example above. While the progress-bar is only shown after a loading time of more than 500ms, the table is immediately disabled for any user interaction.\r\n\r\n> **Note** The table's `loading` and the progress indicator's `active` attribute are **independent**. You are responsible by yourself to keep their values in sync.\r\n\r\n## Sorting\r\nThe table provides the general setup for sorting. For full flexibility, the table does not actually perform the sorting by itself but notifies you that the user wants to sort for a column and direction. As a reaction, you may want to sort for the column and direction and update the respective properties/attributes on the `ino-table` element.\r\n\r\nFirst, set the sorted column, provide the `sort-column-id` and `sort-direction` attributes/properties on `ino-table`. In order to receive updates as soon as the sorting direction or column changes, use the `sortChange` event which contains the `columnId` and the target `sortDirection`.\r\n\r\n\r\n**Example:**\r\n\r\n```js\r\nconst sortChangeHandler = e => {\r\n  const inoTable = e.target as Components.InoTable;\r\n  const { columnId, sortDirection } = e.detail;\r\n\r\n  // Implement sorting algorithm here ...\r\n\r\n  inoTable.sortColumnId = columnId;\r\n  inoTable.sortDirection = sortDirection;\r\n};\r\ndocument.addEventListener('sortChange', sortChangeHandler);\r\n```\r\n\r\n```html\r\n<ino-table sort-column-id=\"column-a\" sort-direction=\"asc\">\r\n  <tr>\r\n    <ino-table-header-cell column-id=\"column-a\">Column A</ino-table-header-cell>\r\n    <ino-table-header-cell column-id=\"column-b\">Column B</ino-table-header-cell>\r\n  </tr>\r\n  <tr>\r\n    <td>Cell A1</td>\r\n    <td>Cell B1</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Cell A2</td>\r\n    <td>Cell B2</td>\r\n  </tr>\r\n</ino-table>\r\n```\r\n\r\n## Rows and Cells\r\n\r\n### Table row\r\nFor table rows use the native `tr` elements. Use the `slot=\"header-row\"` in order to render the row as header within the `table > thead`. The default slot of the `ino-table` is treated as table content containing multiple `tr` elements. For default styling, there is no class needed. However, the following state classes are available:\r\n\r\n| State              | Usage                                        | Description                                                                       |\r\n|--------------------|----------------------------------------------|-----------------------------------------------------------------------------------|\r\n| Selected table row | `<tr class=\"ino-table__row--selected\"></tr>` | Indicates that the user selected a row.                                           |\r\n| Selected table row | `<tr class=\"ino-table__row--active\"></tr>`   | Indicates that the user activates a row (for instance to show detail information) |\r\n\r\nFurthermore, the `--ino-table-row-height` css variables allows you to increase or decrease the density of rows. This may be useful to provide the user customization option.\r\n\r\n\r\n### Table cell\r\nFor table cells `td`, `th` or, if needed, `ino-table-header-cell` elements. All table cells retrieve their styling options from the wrapping `ino-table` element, so you don't need to set any classes by default. However, you may want to use the following classes to provide customization options:\r\n\r\n| Name                | Usage                                         | Description                                                                                                 |\r\n|---------------------|-----------------------------------------------|-------------------------------------------------------------------------------------------------------------|\r\n| Table cell selector | `<td class=\"ino-table__cell--checkbox\"></td>` | Indicates that a table cell contains a checkbox which to select the current row (body) or all rows (header) |\r\n| Table cell numeric  | `<td class=\"ino-table__cell--numeric\"></td>`  | Indicates that the value is numeric (Mainly sets `text-align: right`).                                      |\r\n\r\n\r",
      "usage": {},
      "docs": "The ino-table is a custom table used to display sets of data across multiple columns.\r\nIt currently supports different states (selected, active), sorting and loading indication.\r\n\r\n> The component is based on the [mdc-data-table](https://github.com/material-components/material-components-web/tree/master/packages/mdc-data-table).",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Table content (data, not header)"
        },
        {
          "name": "slot",
          "text": "header-row - `<tr>` element containing the table header cells (td, th, ino-table-header-cell)"
        },
        {
          "name": "slot",
          "text": "loading-indicator - `<ino-progess-bar>` element used for an additional loading state."
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "True, if the table is loading data.\r\n\r\nUse this in combination with a `ino-progress-bar` having `slot=\"loading-indicator\"` to provide an\r\nadditional horizontal loading bar.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "noHover",
          "type": "boolean",
          "mutable": false,
          "attr": "no-hover",
          "reflectToAttr": false,
          "docs": "If true, disables row hover styling.\r\n\r\nUseful for simples tables with few rows or columns.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sortColumnId",
          "type": "string",
          "mutable": false,
          "attr": "sort-column-id",
          "reflectToAttr": false,
          "docs": "Identifier of the column currently sorted by.\n\nNeeds to match the column ids provided on `ino-table-header-cell` elements.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sortDirection",
          "type": "\"asc\" | \"desc\"",
          "mutable": false,
          "attr": "sort-direction",
          "reflectToAttr": false,
          "docs": "Direction of the column currently sorted by.",
          "docsTags": [
            {
              "name": "See",
              "text": "Set `sort-start` attribute on the respective column to change the sort order."
            }
          ],
          "values": [
            {
              "value": "asc",
              "type": "string"
            },
            {
              "value": "desc",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "stickyHeader",
          "type": "boolean",
          "mutable": false,
          "attr": "sticky-header",
          "reflectToAttr": false,
          "docs": "True, if table header stays visible on vertical scroll",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "sortChange",
          "detail": "SortDirectionChangeDetails",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits that the sort direction or column id has changed.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-table-row-height",
          "annotation": "prop",
          "docs": "height of a table row"
        }
      ],
      "slots": [
        {
          "name": "default",
          "docs": "Table content (data, not header)"
        },
        {
          "name": "header-row",
          "docs": "`<tr>` element containing the table header cells (td, th, ino-table-header-cell)"
        },
        {
          "name": "loading-indicator",
          "docs": "`<ino-progess-bar>` element used for an additional loading state."
        }
      ],
      "parts": [],
      "listeners": [
        {
          "event": "sortDirectionChange",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-table-header-cell/ino-table-header-cell.tsx",
      "fileName": "ino-table-header-cell.tsx",
      "tag": "ino-table-header-cell",
      "readme": "# ino-table-header-cell\r\n\r\nThe `ino-table-header-cell` is a particular header cell to provide search and column sort behaviour on `ino-table`'s.\r\n\r\n## Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-table-header-cell\r\n  column-id=\"<string>\"\r\n  label=\"<string>\"\r\n  search-icon=\"<string>\"\r\n  not-sortable=\"<boolean>\"\r\n  sort-direction=\"<string>\"\r\n  sort-start=\"asc|desc\"\r\n></ino-table-header-cell>\r\n```\r\n\r\n## Sorting\r\n\r\nSet the `sortable` attribute/property on this column. The feature itself does not provide a sorting algorithm itself but notifies you whenever the user wants to sort\r\nthe column in a specific direction. The `sort-direction` shows the current sort direction, the `sort-start` changes the default sort direction.\r\n\r\nThe element emits a `sortDirectionChange` event which you can handle to implement the sorting behaviour. In most cases, however, it is recommended\r\nlet the `ino-table` handle it. Otherwise, you have to implement the logic to reset other columns in the table yourself (which may be useful when you want to sort\r\nfor multiple columns).\r\n\r\nFor the recommended approach, set the `column-id` such that the `ino-table` knows the identity of this column. For more details, see the documentation of `ino-table`.\r\n\r\n```html\r\n<tr slot=\"header-row\">\r\n  <ino-table-header-cell\r\n    label=\"1\"\r\n    column-id=\"column-name\"\r\n    sortable\r\n    sort-direction=\"asc\"\r\n  ></ino-table-header-cell>\r\n  <ino-table-header-cell label=\"Cell content\"></ino-table-header-cell>\r\n</tr>\r\n```\r\n\r\n## Searching\r\n\r\nIn order to add a floating column search as popover, add any desired form element as child of this component. The feature itself does not provide a search (or filter) algorithm itself but allows you to render search fields, selection or datepicker within a `ino-popover`. Based on the input, you may want to trigger a search in the backend or filter your elements locally.\r\n\r\nThe `search-icon` allows you to set an alternative to the default `search`, which may be useful for selections (`list`) or datepickers (`calender`).The slot contains the search input within the popover. In order to indicate to the user that a closed popover search input contains value, i.e. has been searched, set the `searched` property on the table-header-cell.\r\n\r\nUse the `data-ino-focus` on popover elements to focus them on load. Currently, `ino-input`, `ino-textarea` and `ino-datepicker` are supported.\r\n\r\n> Note: During initial rendering, the component checks for child elements and decides its searchability. However, if you need to change the search behaviour after initial rendering (for instance lazy load the input elements), use the `setSortable` method to update the behaviour.\r\n\r\n**Example:**\r\n\r\n```html\r\n<ino-table>\r\n  <tr slot=\"header-row\">\r\n    <ino-table-header-cell label=\"Simple text field\">\r\n      <ino-input placeholder=\"Search for XY...\" data-ino-focus>\r\n        <ino-icon\r\n          clickable\r\n          slot=\"ino-icon-trailing\"\r\n          icon=\"close--dense\"\r\n        ></ino-icon>\r\n      </ino-input>\r\n    </ino-table-header-cell>\r\n\r\n    <ino-table-header-cell\r\n      label=\"Column Selection Search\"\r\n      search-icon=\"list\"\r\n    >\r\n      <ino-list>\r\n        <ino-list-item text=\"Option 1\"\r\n          ><ino-checkbox\r\n            slot=\"ino-list-item-leading\"\r\n            selection\r\n          ></ino-checkbox\r\n        ></ino-list-item>\r\n        <ino-list-item-divider inset></ino-list-item-divider>\r\n        <ino-list-item text=\"Option 2\"\r\n          ><ino-checkbox\r\n            slot=\"ino-list-item-leading\"\r\n            selection\r\n          ></ino-checkbox\r\n        ></ino-list-item>\r\n        <ino-list-item-divider inset></ino-list-item-divider>\r\n        <ino-list-item text=\"Option 3\"\r\n          ><ino-checkbox\r\n            slot=\"ino-list-item-leading\"\r\n            selection\r\n          ></ino-checkbox\r\n        ></ino-list-item>\r\n        <ino-list-item-divider inset></ino-list-item-divider>\r\n        <ino-list-item text=\"Option 4\"\r\n          ><ino-checkbox\r\n            slot=\"ino-list-item-leading\"\r\n            selection\r\n          ></ino-checkbox\r\n        ></ino-list-item>\r\n        <ino-list-item-divider inset></ino-list-item-divider>\r\n      </ino-list>\r\n    </ino-table-header-cell>\r\n  </tr>\r\n</ino-table>\r\n```\r\n\r",
      "usage": {},
      "docs": "The `ino-table-header-cell` is a particular header cell to provide search and column sort behaviour on `ino-table`'s.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - The search content (input field, list) within the popover."
        }
      ],
      "encapsulation": "none",
      "dependents": [],
      "dependencies": [
        "ino-popover",
        "ino-icon",
        "ino-icon-button"
      ],
      "dependencyGraph": {
        "ino-table-header-cell": [
          "ino-popover",
          "ino-icon",
          "ino-icon-button"
        ],
        "ino-icon-button": [
          "ino-icon"
        ]
      },
      "props": [
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Marks the header as autofocused (used for searchable header cells).\r\n\r\nUse this in combination with the `data-ino-focus` attribute on\r\nthe actual search target element to focus a specific input element.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "columnId",
          "type": "string",
          "mutable": false,
          "attr": "column-id",
          "reflectToAttr": false,
          "docs": "A unique identifier of the column (used for sorting).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Name of the column.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "notSortable",
          "type": "boolean",
          "mutable": false,
          "attr": "not-sortable",
          "reflectToAttr": false,
          "docs": "If true, the cell is **not** sortable.\r\nBy default, table header cells are sortable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "searchIcon",
          "type": "string",
          "mutable": false,
          "attr": "search-icon",
          "reflectToAttr": false,
          "docs": "Identifier of the search icon (default `search`).\r\nUsed for date or list search columns.",
          "docsTags": [],
          "default": "'search'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "searched",
          "type": "boolean",
          "mutable": false,
          "attr": "searched",
          "reflectToAttr": false,
          "docs": "True, if the column has been searched for this column.\r\nPersistent state to indicate the user that this column\r\nhas a search filter.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortDirection",
          "type": "\"asc\" | \"desc\"",
          "mutable": false,
          "attr": "sort-direction",
          "reflectToAttr": false,
          "docs": "The current sort direction of the column.",
          "docsTags": [],
          "values": [
            {
              "value": "asc",
              "type": "string"
            },
            {
              "value": "desc",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sortStart",
          "type": "\"asc\" | \"desc\"",
          "mutable": false,
          "attr": "sort-start",
          "reflectToAttr": false,
          "docs": "The initial sort direction state (default `desc`).\r\n\r\nBy default, all columns are sorted descending followed by ascending.\r\nTo switch this order, set sort Start to asc.",
          "docsTags": [],
          "default": "'desc'",
          "values": [
            {
              "value": "asc",
              "type": "string"
            },
            {
              "value": "desc",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the header cell. If searchable, closes the popover.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the header cell.\r\nIf searchable, opens the popover and focuses the `data-ino-focus` target.",
          "docsTags": []
        },
        {
          "name": "setSearchable",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setSearchable(searchable: boolean) => Promise<void>",
          "parameters": [],
          "docs": "Updates the search behaviour of this cell.",
          "docsTags": [
            {
              "name": "param",
              "text": "searchable true, if the cell should be searchable, false otherwise."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "searchFocusChange",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits that the search field focused (true) or blurred (false).",
          "docsTags": []
        },
        {
          "event": "sortDirectionChange",
          "detail": "SortDirectionChangeDetails",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits that the sort direction has been changed.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "The search content (input field, list) within the popover."
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "./src/components/ino-textarea/ino-textarea.tsx",
      "fileName": "ino-textarea.tsx",
      "tag": "ino-textarea",
      "readme": "# ino-textarea\r\n\r\nA textarea component with styles. It uses a material [textfield](https://github.com/material-components/material-components-web/tree/master/packages/mdc-textfield) component for its styling.\r\n\r\n> **Note:** The textarea is always styled in an outlined manner. If you need to use a textarea in combination with other form inputs (`ino-input`), use their respective outline style.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```js\r\ndocument\r\n  .querySelector('ino-textarea')\r\n  .addEventListener('valueChange', (e) =>\r\n    alert(`The new textarea value is ${e.detail}`),\r\n  );\r\n```\r\n\r\n```html\r\n<ino-textarea\r\n  autofocus\r\n  cols=\"<number>\"\r\n  disabled\r\n  maxlength=\"<number>\"\r\n  minlength=\"<number>\"\r\n  name=\"<string>\"\r\n  placeholder=\"<string>\"\r\n  required\r\n  rows=\"<number>\"\r\n  value=\"<string>\"\r\n  autogrow\r\n  label=\"<string>\"\r\n>\r\n</ino-textarea>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoTextarea } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoTextarea autogrow>\r\n        Here's some text. And the textarea will grow when you enter more...\r\n      </InoTextarea>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoTextarea } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Textarea: React.FunctionComponent<Components.InoTextareaAttributes> = (\r\n  props,\r\n) => {\r\n  const { autogrow } = props;\r\n\r\n  return <InoTextarea autogrow={autogrow}>{props.children}</InoTextarea>;\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <Textarea autogrow>\r\n        Here's some text. And the textarea will grow when you enter more...\r\n      </Textarea>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r\n**Labels**: The component shows a floating label containing the value of `label`.\r\n\r\n### Control flow\r\n\r\nThe textarea has a controlled (unmanaged) attribute `value`. For this reason, the value doesn't change on user interaction but on updates of `value`. Listen to `valueChange`, sync it with your local state and pass the new value to the component again to change value of input.\r\n\r\n```js\r\ndocument.querySelector('ino-textarea').addEventListener('valueChanges', (e) => {\r\n  // ...\r\n});\r\n```\r\n\r\n```html\r\n<ino-textarea\r\n  value={this.state.value}\r\n  valueChange={e => this.state.value = e.detail}>\r\n</ino-textarea>\r\n```\r\n\r\n### Event Behaviour\r\n\r\nThe component is based on a native input with additional features. Thus, the component bubbles events triggered by the native [HTMLTextareaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement) like `keyup`. The native `input` and `change` event is not bubbled because the value will only change when the value attribute changes.\r\n\r",
      "usage": {},
      "docs": "A textarea component with styles. It uses a material [textfield](https://github.com/material-components/material-components-web/tree/master/packages/mdc-textfield) component for its styling.\r\n\r\n> **Note:** The textarea is always styled in an outlined manner. If you need to use a textarea in combination with other form inputs (`ino-input`), use their respective outline style.",
      "docsTags": [],
      "encapsulation": "none",
      "dependents": [
        "ino-markdown-editor"
      ],
      "dependencies": [
        "ino-label"
      ],
      "dependencyGraph": {
        "ino-textarea": [
          "ino-label"
        ],
        "ino-markdown-editor": [
          "ino-textarea"
        ]
      },
      "props": [
        {
          "name": "autoFocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "The autofocus of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autogrow",
          "type": "boolean",
          "mutable": false,
          "attr": "autogrow",
          "reflectToAttr": false,
          "docs": "An optional flag to allow the textarea adjust its height to display all the content.\r\nThe `rows` attribute can also be used to specify a minimum height. Use CSS to specify\r\na max-height for the textarea element. Once the height exceeds the max-height, autogrow\r\nwill re-enable the vertical scrollbar.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cols",
          "type": "number",
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": false,
          "docs": "The number of cols of this textarea.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The optional floating label of this input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "The max length of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "The min length of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Styles the input field as outlined element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The placeholder of this element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Marks this element as required.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rows",
          "type": "number",
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "The number of rows of this textarea.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showCharacterCounter",
          "type": "boolean",
          "mutable": false,
          "attr": "show-character-counter",
          "reflectToAttr": false,
          "docs": "Displays the number of characters. The maxlength-property must be set.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showLabelHint",
          "type": "boolean",
          "mutable": false,
          "attr": "show-label-hint",
          "reflectToAttr": false,
          "docs": "If true, an *optional* message is displayed if not required,\r\notherwise a * marker is displayed if required",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of this element. (**unmanaged**)",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `textarea`.\r\nUse this method instead of the global `textarea.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `textarea`.\r\nUse this method instead of the global `textarea.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "inoBlur",
          "detail": "void",
          "bubbles": false,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the textarea is blurred and validates email input",
          "docsTags": []
        },
        {
          "event": "valueChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the user types something in. Contains typed input in `event.detail`",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--ino-textarea-caret-color",
          "annotation": "prop",
          "docs": "color of the caret"
        },
        {
          "name": "--ino-textarea-label-color",
          "annotation": "prop",
          "docs": "color of the label"
        },
        {
          "name": "--ino-textarea-outline-color",
          "annotation": "prop",
          "docs": "outline color of the textarea"
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "change",
          "capture": false,
          "passive": false
        },
        {
          "event": "input",
          "capture": false,
          "passive": false
        }
      ]
    },
    {
      "filePath": "./src/components/ino-tooltip/ino-tooltip.tsx",
      "fileName": "ino-tooltip.tsx",
      "tag": "ino-tooltip",
      "readme": "# ino-tooltip\r\n\r\nA tooltip component that displays text when users hover over, focus on, or tap an element.\r\n\r\n> Note: A tooltip can only display plain text. For more complex dialogs, see the [Popover](https://elements.inovex.de/dist/latest/storybook/?path=/story/notification-ino-popover--default-usage) component.\r\n\r\n### Usage\r\n\r\nThe component can be used as follows:\r\n\r\n```html\r\n<ino-tooltip\r\n  for=\"<string>\"\r\n  label=\"<string>\"\r\n  placement=\"<string>\"\r\n  trigger=\"<string>\"\r\n>\r\n  Any desired HTML\r\n</ino-tooltip>\r\n```\r\n\r\n### React\r\n\r\n#### Example #1 - Basic\r\n\r\n```js\r\nimport { Component } from 'react';\r\nimport { InoButton, InoTooltip } from '@inovex.de/elements/dist/react';\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoButton id=\"tooltip-button\">Hover me to see the Tooltip!</InoButton>\r\n      <InoTooltip inoFor=\"tooltip-button\" inoLabel=\"This is the tooltip!\" inoPlacement=\"top\" inoTrigger=\"hover\" />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n#### Example #2 - With Types\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport { InoButton, InoTooltip } from '@inovex.de/elements/dist/react';\r\nimport { Components } from '@inovex.de/elements/dist/types/components';\r\n\r\nconst Tooltip: React.FunctionComponent<Components.InoTooltipAttributes> = props => {\r\n  const { inoPlacement, inoTrigger, inoFor, inoLabel } = props;\r\n\r\n  return <InoTooltip inoFor={inoFor} inoLabel={inoLabel} inoPlacement={inoPlacement} inoTrigger={inoTrigger}>{props.children}</InoTooltip>\r\n};\r\n\r\nclass MyComponent extends Component {\r\n  render() {\r\n    return (\r\n      <InoButton id=\"tooltip-button\">Hover me to see the Tooltip!</InoButton>\r\n      <Tooltip inoFor=\"tooltip-button\" inoLabel=\"This is the tooltip!\" inoPlacement=\"top\" inoTrigger=\"hover\" />\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n## Additional Hints\r\n\r",
      "usage": {},
      "docs": "A tooltip component that displays text when users hover over, focus on, or tap an element.\r\n\r\n> Note: A tooltip can only display plain text. For more complex dialogs, see the [Popover](https://elements.inovex.de/dist/latest/storybook/?path=/story/notification-ino-popover--default-usage) component.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default The text shown in the tooltip."
        }
      ],
      "encapsulation": "none",
      "dependents": [
        "ino-fab"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ino-fab": [
          "ino-tooltip"
        ]
      },
      "props": [
        {
          "name": "colorScheme",
          "type": "\"light\" | \"primary\" | \"secondary\" | \"transparent\"",
          "mutable": false,
          "attr": "color-scheme",
          "reflectToAttr": false,
          "docs": "Sets the color scheme of the tooltip\nValid options include: `primary`, `secondary` `light`, `transparent`",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "transparent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "for",
          "type": "string",
          "mutable": false,
          "attr": "for",
          "reflectToAttr": false,
          "docs": "The target id the tooltip belongs to.\r\nIf not given, the tooltip is attached to the parent component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The text shown in the tooltip.\r\n\r\n[DEPRECATED] Please use the default slot instead",
          "docsTags": [
            {
              "name": "deprecated"
            }
          ],
          "deprecation": "",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "The placement of the tooltip.\r\nAccepted values: `top(-start, -end)`, `right(-start, -end)`,\r\n`bottom(-start, -end)`, `left(-start, -end)`",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "\"click focus mouseenter\" | \"click focus\" | \"click mouseenter focus\" | \"click mouseenter\" | \"click\" | \"focus click mouseenter\" | \"focus click\" | \"focus mouseenter click\" | \"focus mouseenter\" | \"focus\" | \"mouseenter click focus\" | \"mouseenter click\" | \"mouseenter focus click\" | \"mouseenter focus\" | \"mouseenter\"",
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "The trigger to show the tooltip - either `click`, `hover` or `focus`.\nMultiple triggers possible by separating them with a space.",
          "docsTags": [],
          "default": "'mouseenter focus'",
          "values": [
            {
              "value": "click focus mouseenter",
              "type": "string"
            },
            {
              "value": "click focus",
              "type": "string"
            },
            {
              "value": "click mouseenter focus",
              "type": "string"
            },
            {
              "value": "click mouseenter",
              "type": "string"
            },
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "focus click mouseenter",
              "type": "string"
            },
            {
              "value": "focus click",
              "type": "string"
            },
            {
              "value": "focus mouseenter click",
              "type": "string"
            },
            {
              "value": "focus mouseenter",
              "type": "string"
            },
            {
              "value": "focus",
              "type": "string"
            },
            {
              "value": "mouseenter click focus",
              "type": "string"
            },
            {
              "value": "mouseenter click",
              "type": "string"
            },
            {
              "value": "mouseenter focus click",
              "type": "string"
            },
            {
              "value": "mouseenter focus",
              "type": "string"
            },
            {
              "value": "mouseenter",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getTippyInstance",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "getTippyInstance() => Promise<any>",
          "parameters": [],
          "docs": "Returns the internally used tippy.js instance\r\nFor more informations see: https://atomiks.github.io/tippyjs/",
          "docsTags": []
        }
      ],
      "events": [],
      "styles": [],
      "slots": [
        {
          "name": "default The text shown in the tooltip.",
          "docs": ""
        }
      ],
      "parts": [],
      "listeners": []
    }
  ]
}