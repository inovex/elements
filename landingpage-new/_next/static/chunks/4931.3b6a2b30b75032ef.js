"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4931],{4931:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{scopeCss:function(){return scopeCss}});/*!
 * Crafted with ❤ by inovex GmbH
 */ /**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 *
 * This file is a port of shadowCSS from webcomponents.js to TypeScript.
 * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
 * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts
 */ let safeSelector=selector=>{let placeholders=[],index=0;selector=selector.replace(/(\[[^\]]*\])/g,(_,keep)=>{let replaceBy=`__ph-${index}__`;return placeholders.push(keep),index++,replaceBy});let content=selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g,(_,pseudo,exp)=>{let replaceBy=`__ph-${index}__`;return placeholders.push(exp),index++,pseudo+replaceBy});return{content,placeholders}},restoreSafeSelector=(placeholders,content)=>content.replace(/__ph-(\d+)__/g,(_,index)=>placeholders[+index]),_polyfillHost="-shadowcsshost",_polyfillSlotted="-shadowcssslotted",_polyfillHostContext="-shadowcsscontext",_parenSuffix=")(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)",_cssColonHostRe=RegExp("("+_polyfillHost+_parenSuffix,"gim"),_cssColonHostContextRe=RegExp("("+_polyfillHostContext+_parenSuffix,"gim"),_cssColonSlottedRe=RegExp("("+_polyfillSlotted+_parenSuffix,"gim"),_polyfillHostNoCombinator=_polyfillHost+"-no-combinator",_polyfillHostNoCombinatorRe=/-shadowcsshost-no-combinator([^\s]*)/,_shadowDOMSelectorsRe=[/::shadow/g,/::content/g],_polyfillHostRe=/-shadowcsshost/gim,_colonHostRe=/:host/gim,_colonSlottedRe=/::slotted/gim,_colonHostContextRe=/:host-context/gim,_commentRe=/\/\*\s*[\s\S]*?\*\//g,stripComments=input=>input.replace(_commentRe,""),_commentWithHashRe=/\/\*\s*#\s*source(Mapping)?URL=[\s\S]+?\*\//g,extractCommentsWithHash=input=>input.match(_commentWithHashRe)||[],_ruleRe=/(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g,_curlyRe=/([{}])/g,_selectorPartsRe=/(^.*?[^\\])??((:+)(.*)|$)/,BLOCK_PLACEHOLDER="%BLOCK%",processRules=(input,ruleCallback)=>{let inputWithEscapedBlocks=escapeBlocks(input),nextBlockIndex=0;return inputWithEscapedBlocks.escapedString.replace(_ruleRe,(...m)=>{let selector=m[2],content="",suffix=m[4],contentPrefix="";suffix&&suffix.startsWith("{"+BLOCK_PLACEHOLDER)&&(content=inputWithEscapedBlocks.blocks[nextBlockIndex++],suffix=suffix.substring(BLOCK_PLACEHOLDER.length+1),contentPrefix="{");let cssRule={selector,content},rule=ruleCallback(cssRule);return`${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`})},escapeBlocks=input=>{let inputParts=input.split(_curlyRe),resultParts=[],escapedBlocks=[],bracketCount=0,currentBlockParts=[];for(let partIndex=0;partIndex<inputParts.length;partIndex++){let part=inputParts[partIndex];"}"===part&&bracketCount--,bracketCount>0?currentBlockParts.push(part):(currentBlockParts.length>0&&(escapedBlocks.push(currentBlockParts.join("")),resultParts.push(BLOCK_PLACEHOLDER),currentBlockParts=[]),resultParts.push(part)),"{"===part&&bracketCount++}currentBlockParts.length>0&&(escapedBlocks.push(currentBlockParts.join("")),resultParts.push(BLOCK_PLACEHOLDER));let strEscapedBlocks={escapedString:resultParts.join(""),blocks:escapedBlocks};return strEscapedBlocks},insertPolyfillHostInCssText=selector=>selector=selector.replace(_colonHostContextRe,_polyfillHostContext).replace(_colonHostRe,_polyfillHost).replace(_colonSlottedRe,_polyfillSlotted),convertColonRule=(cssText,regExp,partReplacer)=>cssText.replace(regExp,(...m)=>{if(!m[2])return _polyfillHostNoCombinator+m[3];{let parts=m[2].split(","),r=[];for(let i=0;i<parts.length;i++){let p=parts[i].trim();if(!p)break;r.push(partReplacer(_polyfillHostNoCombinator,p,m[3]))}return r.join(",")}}),colonHostPartReplacer=(host,part,suffix)=>host+part.replace(_polyfillHost,"")+suffix,convertColonHost=cssText=>convertColonRule(cssText,_cssColonHostRe,colonHostPartReplacer),colonHostContextPartReplacer=(host,part,suffix)=>part.indexOf(_polyfillHost)>-1?colonHostPartReplacer(host,part,suffix):host+part+suffix+", "+part+" "+host+suffix,convertColonSlotted=(cssText,slotScopeId)=>{let slotClass="."+slotScopeId+" > ",selectors=[];return cssText=cssText.replace(_cssColonSlottedRe,(...m)=>{if(!m[2])return _polyfillHostNoCombinator+m[3];{let compound=m[2].trim(),suffix=m[3],slottedSelector=slotClass+compound+suffix,prefixSelector="";for(let i=m[4]-1;i>=0;i--){let char=m[5][i];if("}"===char||","===char)break;prefixSelector=char+prefixSelector}let orgSelector=prefixSelector+slottedSelector,addedSelector=`${prefixSelector.trimRight()}${slottedSelector.trim()}`;if(orgSelector.trim()!==addedSelector.trim()){let updatedSelector=`${addedSelector}, ${orgSelector}`;selectors.push({orgSelector,updatedSelector})}return slottedSelector}}),{selectors,cssText}},convertColonHostContext=cssText=>convertColonRule(cssText,_cssColonHostContextRe,colonHostContextPartReplacer),convertShadowDOMSelectors=cssText=>_shadowDOMSelectorsRe.reduce((result,pattern)=>result.replace(pattern," "),cssText),makeScopeMatcher=scopeSelector=>RegExp("^("+(scopeSelector=scopeSelector.replace(/\[/g,"\\[").replace(/\]/g,"\\]"))+")([>\\s~+[.,{:][\\s\\S]*)?$","m"),selectorNeedsScoping=(selector,scopeSelector)=>{let re=makeScopeMatcher(scopeSelector);return!re.test(selector)},injectScopingSelector=(selector,scopingSelector)=>selector.replace(_selectorPartsRe,(_,before="",_colonGroup,colon="",after="")=>before+scopingSelector+colon+after),applySimpleSelectorScope=(selector,scopeSelector,hostSelector)=>{if(_polyfillHostRe.lastIndex=0,_polyfillHostRe.test(selector)){let replaceBy=`.${hostSelector}`;return selector.replace(_polyfillHostNoCombinatorRe,(_,selector)=>injectScopingSelector(selector,replaceBy)).replace(_polyfillHostRe,replaceBy+" ")}return scopeSelector+" "+selector},applyStrictSelectorScope=(selector,scopeSelector,hostSelector)=>{let res;scopeSelector=scopeSelector.replace(/\[is=([^\]]*)\]/g,(_,...parts)=>parts[0]);let className="."+scopeSelector,_scopeSelectorPart=p=>{let scopedP=p.trim();if(!scopedP)return"";if(p.indexOf(_polyfillHostNoCombinator)>-1)scopedP=applySimpleSelectorScope(p,scopeSelector,hostSelector);else{let t=p.replace(_polyfillHostRe,"");t.length>0&&(scopedP=injectScopingSelector(t,className))}return scopedP},safeContent=safeSelector(selector);selector=safeContent.content;let scopedSelector="",startIndex=0,sep=/( |>|\+|~(?!=))\s*/g,hasHost=selector.indexOf(_polyfillHostNoCombinator)>-1,shouldScope=!hasHost;for(;null!==(res=sep.exec(selector));){let separator=res[1],part=selector.slice(startIndex,res.index).trim();shouldScope=shouldScope||part.indexOf(_polyfillHostNoCombinator)>-1;let scopedPart=shouldScope?_scopeSelectorPart(part):part;scopedSelector+=`${scopedPart} ${separator} `,startIndex=sep.lastIndex}let part1=selector.substring(startIndex);return scopedSelector+=(shouldScope=shouldScope||part1.indexOf(_polyfillHostNoCombinator)>-1)?_scopeSelectorPart(part1):part1,restoreSafeSelector(safeContent.placeholders,scopedSelector)},scopeSelector=(selector,scopeSelectorText,hostSelector,slotSelector)=>selector.split(",").map(shallowPart=>slotSelector&&shallowPart.indexOf("."+slotSelector)>-1?shallowPart.trim():selectorNeedsScoping(shallowPart,scopeSelectorText)?applyStrictSelectorScope(shallowPart,scopeSelectorText,hostSelector).trim():shallowPart.trim()).join(", "),scopeSelectors=(cssText,scopeSelectorText,hostSelector,slotSelector,commentOriginalSelector)=>processRules(cssText,rule=>{let selector=rule.selector,content=rule.content;"@"!==rule.selector[0]?selector=scopeSelector(rule.selector,scopeSelectorText,hostSelector,slotSelector):(rule.selector.startsWith("@media")||rule.selector.startsWith("@supports")||rule.selector.startsWith("@page")||rule.selector.startsWith("@document"))&&(content=scopeSelectors(rule.content,scopeSelectorText,hostSelector,slotSelector));let cssRule={selector:selector.replace(/\s{2,}/g," ").trim(),content};return cssRule}),scopeCssText=(cssText,scopeId,hostScopeId,slotScopeId,commentOriginalSelector)=>{cssText=convertColonHostContext(cssText=convertColonHost(cssText=insertPolyfillHostInCssText(cssText)));let slotted=convertColonSlotted(cssText,slotScopeId);return cssText=convertShadowDOMSelectors(cssText=slotted.cssText),scopeId&&(cssText=scopeSelectors(cssText,scopeId,hostScopeId,slotScopeId)),{cssText:(cssText=(cssText=cssText.replace(/-shadowcsshost-no-combinator/g,`.${hostScopeId}`)).replace(/>\s*\*\s+([^{, ]+)/gm," $1 ")).trim(),slottedSelectors:slotted.selectors}},scopeCss=(cssText,scopeId,commentOriginalSelector)=>{let commentsWithHash=extractCommentsWithHash(cssText);cssText=stripComments(cssText);let orgSelectors=[];if(commentOriginalSelector){let processCommentedSelector=rule=>{let placeholder=`/*!@___${orgSelectors.length}___*/`,comment=`/*!@${rule.selector}*/`;return orgSelectors.push({placeholder,comment}),rule.selector=placeholder+rule.selector,rule};cssText=processRules(cssText,rule=>"@"!==rule.selector[0]?processCommentedSelector(rule):((rule.selector.startsWith("@media")||rule.selector.startsWith("@supports")||rule.selector.startsWith("@page")||rule.selector.startsWith("@document"))&&(rule.content=processRules(rule.content,processCommentedSelector)),rule))}let scoped=scopeCssText(cssText,scopeId,scopeId+"-h",scopeId+"-s");return cssText=[scoped.cssText,...commentsWithHash].join("\n"),commentOriginalSelector&&orgSelectors.forEach(({placeholder,comment})=>{cssText=cssText.replace(placeholder,comment)}),scoped.slottedSelectors.forEach(slottedSelector=>{cssText=cssText.replace(slottedSelector.orgSelector,slottedSelector.updatedSelector)}),cssText}}}]);