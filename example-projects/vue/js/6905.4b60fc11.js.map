{"version":3,"file":"js/6905.4b60fc11.js","mappings":";;;GAKA,MAAMA,EACJC,IAAIC,EAAKC,GACP,MAAMC,EAAQC,KAAKC,SAAWD,KAAKC,QAAQJ,GAC3C,OAAiB,OAAVE,QAA4B,IAAVA,EAAmBA,EAAQD,CACtD,CACAI,MAAML,EAAKE,GACLC,KAAKC,SAAWD,KAAKC,QAAQJ,KAC/BG,KAAKC,QAAQJ,GAAOE,EAExB,CACIE,cACF,GAAsB,qBAAXE,OAAwB,CACjC,MAAMC,EAAgBD,OAAOE,YAC7B,GAAID,GAAiBA,EAAcE,OACjC,OAAOF,EAAcE,MAEzB,CACA,OAAO,IACT,EAEF,MAAMC,EAAoB,IAAIZ,EAExBa,EAAsB,GAEtBC,EAAgB,MACpBC,YAAYC,IACVC,EAAAA,EAAAA,GAAiBZ,KAAMW,GACvBX,KAAKa,aAAcC,EAAAA,EAAAA,GAAYd,KAAM,cAAe,GACpDA,KAAKe,cAAgB,QAGrBf,KAAKgB,kBAAqBC,IACxB,IAAIlB,EAAQkB,EAAEC,OAEdnB,EAASA,EAAeC,KAAKmB,mBAAmBpB,GAA/B,KAIZqB,OAAOC,MAAMtB,KAChBC,KAAKsB,YAAcvB,EACnBC,KAAKa,YAAYU,KAAKxB,IAExBkB,EAAEO,iBAAiB,EAErBxB,KAAKyB,YAAc,KACjBzB,KAAK0B,WAAW3B,MAAQC,KAAK2B,mBAAmB3B,KAAK0B,WAAW3B,MAAM,EAExEC,KAAK4B,WAAa,KAChB,MAAM7B,EAAQC,KAAK6B,cAAc9B,MAC7BA,GAAkB,QAATA,IACXC,KAAK0B,WAAW3B,MAAQC,KAAK8B,iBAAiB/B,GAChD,CAEJ,CACAgC,aAAahC,GACX,IAAIiC,GACEjC,GAAmB,IAAVA,GAA0B,SAAVA,GAC7BC,KAAKsB,YAAc,KACnBtB,KAAKiC,WAAa,MAGXlC,IAAwC,QAA7BiC,EAAKhC,KAAK6B,qBAAkC,IAAPG,OAAgB,EAASA,EAAGjC,SACnFC,KAAKsB,YAAcvB,EAAMmC,WACzBlC,KAAKiC,WAAajC,KAAK8B,iBAAiB/B,GAE5C,CACAoC,mBACE,IAAIH,EACJhC,KAAK0B,WAAa1B,KAAKoC,GAAGC,cAAc,aACb,QAA1BL,EAAKhC,KAAK0B,kBAA+B,IAAPM,GAAyBA,EAAGM,yBAAyBvC,GAAUC,KAAK2B,mBAAmB5B,KACrHC,KAAK0B,YACRa,QAAQC,MAAM,8CAEa,SAAzBxC,KAAK0B,WAAWe,MAClBF,QAAQC,MAAM,2CAEhBxC,KAAK0C,YACP,CACAC,oBAEE3C,KAAK0C,YACP,CACAE,uBACE,IAAIZ,EAAIa,EAAIC,EACe,QAA1Bd,EAAKhC,KAAK0B,kBAA+B,IAAPM,GAAyBA,EAAGe,oBAAoB,WAAY/C,KAAKyB,aACzE,QAA1BoB,EAAK7C,KAAK0B,kBAA+B,IAAPmB,GAAyBA,EAAGE,oBAAoB,UAAW/C,KAAK4B,YACxE,QAA1BkB,EAAK9C,KAAK0B,kBAA+B,IAAPoB,GAAyBA,EAAGC,oBAAoB,cAAe/C,KAAKgB,kBACzG,CACA0B,aACE,IAAIV,EAAIa,EAAIC,EAER9C,KAAK6B,eACP7B,KAAKgD,mBAIoB,QAA1BhB,EAAKhC,KAAK0B,kBAA+B,IAAPM,GAAyBA,EAAGiB,iBAAiB,WAAYjD,KAAKyB,aACtE,QAA1BoB,EAAK7C,KAAK0B,kBAA+B,IAAPmB,GAAyBA,EAAGI,iBAAiB,UAAWjD,KAAK4B,YACrE,QAA1BkB,EAAK9C,KAAK0B,kBAA+B,IAAPoB,GAAyBA,EAAGG,iBAAiB,cAAejD,KAAKgB,kBACtG,CAGIM,gBAAYvB,GACVC,KAAK6B,gBACP7B,KAAK6B,cAAc9B,MAAQA,EAE/B,CACIkC,eAAWlC,GACTC,KAAK0B,aACP1B,KAAK0B,WAAW3B,MAAQA,EAE5B,CACAiD,mBACEhD,KAAKsB,YAAc4B,OAAOlD,KAAKD,OAC/BC,KAAK6B,cAAcsB,KAAOnD,KAAK0B,WAAWyB,KAC1CnD,KAAK0B,WAAWyB,KAAO,KACvBnD,KAAK0B,WAAW0B,eAAgB,EAChCpD,KAAK6B,cAAcwB,IAAMrD,KAAK0B,WAAW2B,IACzCrD,KAAK6B,cAAcyB,IAAMtD,KAAK0B,WAAW4B,IACzCtD,KAAK6B,cAAc0B,SAAWvD,KAAK0B,WAAW6B,SAC9CvD,KAAK6B,cAAc2B,SAAWxD,KAAK0B,WAAW8B,SAC9CxD,KAAK0B,WAAW3B,MAAQC,KAAK8B,iBAAiB9B,KAAKD,MACrD,CAGA0D,eACE,OAAOzD,KAAK8B,iBAAiB,GAAG4B,OAAO,EACzC,CACA5B,iBAAiB/B,GACf,IAAIiC,EACJ,IAAKjC,GAAmB,IAAVA,EACZ,OAAO,KACT,MAAM4D,GAAyC,QAA9B3B,EAAKhC,KAAK4D,sBAAmC,IAAP5B,OAAgB,EAASA,EAAG6B,QAAU,EACzF7D,KAAK4D,eACLrD,EAAkBX,IAAI,iBAAkBI,KAAKe,eAC3C+C,EAAO,CAAEC,sBAAuB,EAAGC,sBAAuB,GAChE,OAAOC,KAAKC,aAAaP,EAAQG,GAAMK,OAAO/C,OAAOrB,GACvD,CACA4B,mBAAmB5B,GACjB,IAAKA,EACH,OAAOA,EAET,MAAMqE,EAAgBpE,KAAKqE,qBAAqBtE,GAC1CuE,EAAYtE,KAAKyD,eACjBc,EAAcvE,KAAKwE,uBAAuBzE,GAAO0E,MAAMH,GAQ7D,OANAvE,EAAQwE,EAAY,GAEhBA,EAAYV,OAAS,IAEvB9D,GAASuE,EAAYC,EAAY,GAAGG,UAAU,EAAG,IAE5CN,EAAgBrE,CACzB,CACAoB,mBAAmBpB,GACjB,MAAMqE,EAAgBpE,KAAKqE,qBAAqBtE,GAC1CuE,EAAYtE,KAAKyD,eACjBkB,EAAW3E,KAAKwE,uBAAuBzE,GAAO6E,QAAQN,EAAW,KACvE,OAAOlD,OAAOgD,EAAgBO,EAChC,CACAN,qBAAqBtE,GACnB,IAAIiC,EACJ,MAAMqB,EAAiC,QAA1BrB,EAAKhC,KAAK0B,kBAA+B,IAAPM,OAAgB,EAASA,EAAGqB,IACrEwB,EAAkBxB,GAAOjC,OAAOiC,IAAQ,EAC9C,OAAOwB,EAAkB,GAAK9E,EAAM+E,WAAW,KAAO,IAAM,EAC9D,CACAN,uBAAuBzE,GACrB,MAAMgF,EAAgB,IAAIC,OAAQ,KAAIhF,KAAKyD,qBAAsB,KACjE,OAAO1D,EAAM6E,QAAQG,EAAe,GACtC,CACAE,SACE,OAAQC,EAAAA,EAAAA,GAAEC,EAAAA,EAAM,MAAMD,EAAAA,EAAAA,GAAE,QAAS,CAAEzC,KAAM,SAAU2C,IAAMhD,GAAQpC,KAAK6B,cAAgBO,EAAKrC,MAAOC,KAAKD,SAAUmF,EAAAA,EAAAA,GAAE,OAAQ,MAC7H,CACI9C,SAAO,OAAOiD,EAAAA,EAAAA,GAAWrF,KAAO,CACzBsF,sBAAa,MAAO,CAC7B,MAAS,CAAC,gBACT,GAEL7E,EAAc8E,MAAQ/E,C","sources":["webpack://elements-vue-example/../elements/dist/esm/ino-currency-input.entry.js"],"sourcesContent":["/*!\n * Crafted with ❤ by inovex GmbH\n */\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-871ffba6.js';\n\nclass Config {\n  get(key, fallback) {\n    const value = this.storage && this.storage[key];\n    return value !== null && value !== void 0 ? value : fallback;\n  }\n  patch(key, value) {\n    if (this.storage && this.storage[key]) {\n      this.storage[key] = value;\n    }\n  }\n  get storage() {\n    if (typeof window !== 'undefined') {\n      const configWrapper = window.inoElements;\n      if (configWrapper && configWrapper.config) {\n        return configWrapper.config;\n      }\n    }\n    return null;\n  }\n}\nconst inoElementsConfig = new Config();\n\nconst inoCurrencyInputCss = \"\";\n\nconst CurrencyInput = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.valueChange = createEvent(this, \"valueChange\", 7);\n    this.defaultLocale = 'de-DE';\n    // -------\n    // Event Handler\n    this.handleValueChange = (e) => {\n      let value = e.detail;\n      // value is string => !\"0\" == true\n      value = !value ? null : this.fromCurrencyString(value);\n      // Set the hidden input value here and emit the event. This is not fully unmanaged,\n      // but ensures that the value is always up-to-date and the value watcher doesn't format\n      // the input (see valueChanged function).\n      if (!Number.isNaN(value)) {\n        this.hiddenValue = value;\n        this.valueChange.emit(value);\n      }\n      e.stopPropagation();\n    };\n    this.handleFocus = () => {\n      this.inoInputEl.value = this.trimCurrencyString(this.inoInputEl.value);\n    };\n    this.handleBlur = () => {\n      const value = this.hiddenInputEl.value;\n      if (value && value != 'null') {\n        this.inoInputEl.value = this.toCurrencyString(value);\n      }\n    };\n  }\n  valueChanged(value) {\n    var _a;\n    if ((!value && value !== 0) || value === 'null') {\n      this.hiddenValue = null;\n      this.inputValue = null;\n    }\n    // Only set value if not from user input (has been set before)\n    else if (value != ((_a = this.hiddenInputEl) === null || _a === void 0 ? void 0 : _a.value)) {\n      this.hiddenValue = value.toString();\n      this.inputValue = this.toCurrencyString(value);\n    }\n  }\n  componentDidLoad() {\n    var _a;\n    this.inoInputEl = this.el.querySelector('ino-input');\n    (_a = this.inoInputEl) === null || _a === void 0 ? void 0 : _a.setUserInputInterceptor((value) => this.trimCurrencyString(value));\n    if (!this.inoInputEl) {\n      console.error('currency input requires ino-input as child');\n    }\n    if (this.inoInputEl.type !== 'text') {\n      console.error('currency input has to be of type \"text\"');\n    }\n    this.initialize();\n  }\n  connectedCallback() {\n    // This is needed if the currency input is reattached to the dom (for instance in a popover)\n    this.initialize();\n  }\n  disconnectedCallback() {\n    var _a, _b, _c;\n    (_a = this.inoInputEl) === null || _a === void 0 ? void 0 : _a.removeEventListener('inoFocus', this.handleFocus);\n    (_b = this.inoInputEl) === null || _b === void 0 ? void 0 : _b.removeEventListener('inoBlur', this.handleBlur);\n    (_c = this.inoInputEl) === null || _c === void 0 ? void 0 : _c.removeEventListener('valueChange', this.handleValueChange);\n  }\n  initialize() {\n    var _a, _b, _c;\n    // This is needed if the currency input is reattached to the dom (for instance in a popover)\n    if (this.hiddenInputEl) {\n      this.setupHiddenInput();\n    }\n    // Setup listener manually to only handle child events and catch non-bubbeling focus / blur.\n    // @Listen would also trigger on valueChange of currency-input.\n    (_a = this.inoInputEl) === null || _a === void 0 ? void 0 : _a.addEventListener('inoFocus', this.handleFocus);\n    (_b = this.inoInputEl) === null || _b === void 0 ? void 0 : _b.addEventListener('inoBlur', this.handleBlur);\n    (_c = this.inoInputEl) === null || _c === void 0 ? void 0 : _c.addEventListener('valueChange', this.handleValueChange);\n  }\n  // -------\n  // Utils\n  set hiddenValue(value) {\n    if (this.hiddenInputEl) {\n      this.hiddenInputEl.value = value;\n    }\n  }\n  set inputValue(value) {\n    if (this.inoInputEl) {\n      this.inoInputEl.value = value;\n    }\n  }\n  setupHiddenInput() {\n    this.hiddenValue = String(this.value);\n    this.hiddenInputEl.name = this.inoInputEl.name;\n    this.inoInputEl.name = null;\n    this.inoInputEl.resetOnChange = false;\n    this.hiddenInputEl.min = this.inoInputEl.min;\n    this.hiddenInputEl.max = this.inoInputEl.max;\n    this.hiddenInputEl.disabled = this.inoInputEl.disabled;\n    this.hiddenInputEl.required = this.inoInputEl.required;\n    this.inoInputEl.value = this.toCurrencyString(this.value);\n  }\n  // -----\n  // Currency logic\n  getSeperator() {\n    return this.toCurrencyString(0).charAt(1);\n  }\n  toCurrencyString(value) {\n    var _a;\n    if (!value && value !== 0)\n      return null;\n    const locale = ((_a = this.currencyLocale) === null || _a === void 0 ? void 0 : _a.length) > 0\n      ? this.currencyLocale\n      : inoElementsConfig.get('currencyLocale', this.defaultLocale);\n    const opts = { minimumFractionDigits: 2, maximumFractionDigits: 2 };\n    return Intl.NumberFormat(locale, opts).format(Number(value));\n  }\n  trimCurrencyString(value) {\n    if (!value) {\n      return value;\n    }\n    const leadingSymbol = this.extractLeadingSymbol(value);\n    const separator = this.getSeperator();\n    const numberParts = this.removeNonDecimalValues(value).split(separator);\n    // Always keep the first part\n    value = numberParts[0];\n    // Decimals\n    if (numberParts.length > 1) {\n      // Only keep the first decimal occurence and only the given precision\n      value += separator + numberParts[1].substring(0, 2);\n    }\n    return leadingSymbol + value;\n  }\n  fromCurrencyString(value) {\n    const leadingSymbol = this.extractLeadingSymbol(value);\n    const separator = this.getSeperator();\n    const newValue = this.removeNonDecimalValues(value).replace(separator, '.');\n    return Number(leadingSymbol + newValue);\n  }\n  extractLeadingSymbol(value) {\n    var _a;\n    const min = (_a = this.inoInputEl) === null || _a === void 0 ? void 0 : _a.min;\n    const requirePositive = min && Number(min) >= 0;\n    return requirePositive ? '' : value.startsWith('-') ? '-' : '';\n  }\n  removeNonDecimalValues(value) {\n    const currencyRegex = new RegExp(`[^${this.getSeperator()}0-9]`, 'g');\n    return value.replace(currencyRegex, '');\n  }\n  render() {\n    return (h(Host, null, h(\"input\", { type: \"hidden\", ref: (el) => (this.hiddenInputEl = el), value: this.value }), h(\"slot\", null)));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"valueChanged\"]\n  }; }\n};\nCurrencyInput.style = inoCurrencyInputCss;\n\nexport { CurrencyInput as ino_currency_input };\n"],"names":["Config","get","key","fallback","value","this","storage","patch","window","configWrapper","inoElements","config","inoElementsConfig","inoCurrencyInputCss","CurrencyInput","constructor","hostRef","registerInstance","valueChange","createEvent","defaultLocale","handleValueChange","e","detail","fromCurrencyString","Number","isNaN","hiddenValue","emit","stopPropagation","handleFocus","inoInputEl","trimCurrencyString","handleBlur","hiddenInputEl","toCurrencyString","valueChanged","_a","inputValue","toString","componentDidLoad","el","querySelector","setUserInputInterceptor","console","error","type","initialize","connectedCallback","disconnectedCallback","_b","_c","removeEventListener","setupHiddenInput","addEventListener","String","name","resetOnChange","min","max","disabled","required","getSeperator","charAt","locale","currencyLocale","length","opts","minimumFractionDigits","maximumFractionDigits","Intl","NumberFormat","format","leadingSymbol","extractLeadingSymbol","separator","numberParts","removeNonDecimalValues","split","substring","newValue","replace","requirePositive","startsWith","currencyRegex","RegExp","render","h","Host","ref","getElement","watchers","style"],"sourceRoot":""}