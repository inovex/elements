{"version":3,"file":"js/4882-legacy.ec86870d.js","mappings":"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","sources":["webpack://elements-vue-example/../elements/dist/esm/ino-icon.entry.js"],"sourcesContent":["/*!\n * Crafted with ❤ by inovex GmbH\n */\nimport { a as getAssetPath, r as registerInstance, c as createEvent, h, H as Host } from './index-1044de65.js';\n\nclass SvgParser {\n  static setSvgTitle(svgContent, title) {\n    const parsedSVG = this.parser.parseFromString(svgContent, 'image/svg+xml');\n    const titleTag = parsedSVG.querySelector('title');\n    if (titleTag) {\n      titleTag.innerHTML = title;\n    }\n    return this.serializer.serializeToString(parsedSVG);\n  }\n  static removeSvgTitle(svgContent) {\n    const parsedSVG = this.parser.parseFromString(svgContent, 'image/svg+xml');\n    const titleTag = parsedSVG.querySelector('title');\n    if (titleTag) {\n      titleTag.remove();\n    }\n    return this.serializer.serializeToString(parsedSVG);\n  }\n}\nSvgParser.parser = new DOMParser();\nSvgParser.serializer = new XMLSerializer();\n\nlet CACHED_MAP;\nconst fallbackIconNames = {\n  'status_abwesend': 'status_away',\n  'status_aktuelle': 'status_current',\n  'status_offboarding_laufend': 'offboarding_running',\n  'status_onboarding_laufend': 'onboarding_running',\n  'status_vergangene': 'status_past',\n  'status_zukuenftige': 'status_future',\n};\nfunction getIconMap() {\n  if (!CACHED_MAP) {\n    const win = window;\n    win.inoIcons = win.inoIcons || {};\n    CACHED_MAP = win.inoIcons.map = win.inoIcons.map || new Map();\n  }\n  return CACHED_MAP;\n}\nconst getSrc = (src) => {\n  if (isStr(src)) {\n    src = src.trim();\n    if (isSrc(src)) {\n      return src;\n    }\n  }\n  return null;\n};\nfunction getName(name) {\n  const iconName = fallbackIconNames[name] || name;\n  if (iconName && !isSrc(iconName)) {\n    return iconName;\n  }\n  return undefined;\n}\nfunction getUrl(src, icon) {\n  let url = getSrc(src);\n  if (url) {\n    return url;\n  }\n  url = getName(icon);\n  if (url) {\n    return getNamedUrl(url);\n  }\n  return getSrc(icon);\n}\nfunction getNamedUrl(name) {\n  var _a;\n  return (_a = getIconMap().get(name)) !== null && _a !== void 0 ? _a : getAssetPath(`./ino-icon/${name}.svg`);\n}\nconst isSrc = (str) => str.length > 0 && /(\\/|\\.)/.test(str);\nconst isStr = (val) => typeof val === 'string';\n\nconst validateContent = (svgContent) => {\n  if (svgContent) {\n    const div = document.createElement('div');\n    div.innerHTML = svgContent;\n    // setup this way to ensure it works on our buddy IE\n    for (let i = div.childNodes.length - 1; i >= 0; i--) {\n      if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n        div.removeChild(div.childNodes[i]);\n      }\n    }\n    // must only have 1 root element\n    const svgElm = div.firstElementChild;\n    if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n      const svgClass = svgElm.getAttribute('class') || '';\n      svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n      // root element must be an svg\n      // lets double check we've got valid elements\n      // do not allow scripts\n      if (isValid(svgElm)) {\n        return div.innerHTML;\n      }\n    }\n  }\n  return '';\n};\nconst isValid = (elm) => {\n  if (elm.nodeType === 1) {\n    if (elm.nodeName.toLowerCase() === 'script') {\n      return false;\n    }\n    for (let i = 0; i < elm.attributes.length; i++) {\n      const val = elm.attributes[i].value;\n      if (isStr(val) && val.toLowerCase().indexOf('on') === 0) {\n        return false;\n      }\n    }\n    for (let i = 0; i < elm.childNodes.length; i++) {\n      if (!isValid(elm.childNodes[i])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst inoiconContent = new Map();\nconst requests = new Map();\nconst getSvgContent = (url) => {\n  // see if we already have a request for this url\n  let req = requests.get(url);\n  if (req === undefined) {\n    // we don't already have a request\n    req = fetch(url).then((rsp) => {\n      if (rsp.ok) {\n        return rsp.text().then((svgContent) => {\n          inoiconContent.set(url, validateContent(svgContent));\n        });\n      }\n      inoiconContent.set(url, '');\n    });\n    // cache for the same requests\n    requests.set(url, req);\n  }\n  return req;\n};\n\nconst inoIconCss = \":host{--icon-width:var(--ino-icon-width, 1em);--icon-height:var(--ino-icon-height, 1em);--icon-color:var(\\n      --ino-icon-color,\\n      var(\\n          --ino-icon-color-primary,\\n          #3d40f5\\n      )\\n  )}:host{display:inline-flex;flex-direction:column;justify-content:center}:host i{font-size:inherit;display:flex;flex-direction:row;justify-content:center;font-style:normal}:host i[role=button]{cursor:pointer}:host svg{color:var(--icon-color);fill:var(--icon-color);height:var(--icon-height);width:var(--icon-width)}\";\n\nconst Icon = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.clickEl = createEvent(this, \"clickEl\", 7);\n  }\n  iconChanged() {\n    this.loadIcon();\n  }\n  watchHandler(content) {\n    if (content) {\n      this.svgContent = this.svgTitle\n        ? SvgParser.setSvgTitle(this.svgContent, this.svgTitle)\n        : SvgParser.removeSvgTitle(this.svgContent);\n    }\n  }\n  componentWillLoad() {\n    this.loadIcon();\n  }\n  loadIcon() {\n    const url = getUrl(this.src, this.icon);\n    if (url) {\n      if (inoiconContent.has(url)) {\n        // sync if it's already loaded\n        this.svgContent = inoiconContent.get(url);\n      }\n      else {\n        // async if it hasn't been loaded\n        getSvgContent(url).then(() => (this.svgContent = inoiconContent.get(url)));\n      }\n    }\n  }\n  handleClick(e) {\n    e.preventDefault();\n    this.clickEl.emit(true);\n  }\n  handleKeyPress(e) {\n    if (e.code === 'Enter') {\n      e.preventDefault();\n      this.clickEl.emit(true);\n    }\n  }\n  render() {\n    if (!this.svgContent) {\n      return;\n    }\n    let iconProps = {};\n    if (this.clickable) {\n      iconProps = {\n        onClick: (e) => this.handleClick(e),\n        onKeyPress: (e) => this.handleKeyPress(e),\n        tabindex: 0,\n        role: 'button',\n      };\n    }\n    return (h(Host, { class: 'ino-icon--color-scheme-primary' }, h(\"i\", Object.assign({ innerHTML: this.svgContent }, iconProps))));\n  }\n  static get watchers() { return {\n    \"icon\": [\"iconChanged\"],\n    \"svgContent\": [\"watchHandler\"]\n  }; }\n};\nIcon.style = inoIconCss;\n\nexport { Icon as ino_icon };\n"],"names":["CACHED_MAP","SvgParser","_classCallCheck","_createClass","key","value","svgContent","title","parsedSVG","this","parser","parseFromString","titleTag","querySelector","innerHTML","serializer","serializeToString","remove","DOMParser","XMLSerializer","fallbackIconNames","getIconMap","win","window","inoIcons","map","Map","getSrc","src","isStr","trim","isSrc","getName","name","iconName","getUrl","icon","url","getNamedUrl","_a","get","getAssetPath","concat","str","length","test","val","validateContent","div","document","createElement","i","childNodes","nodeName","toLowerCase","removeChild","svgElm","firstElementChild","svgClass","getAttribute","setAttribute","isValid","elm","nodeType","attributes","indexOf","inoiconContent","requests","getSvgContent","req","undefined","fetch","then","rsp","ok","text","set","inoIconCss","Icon","hostRef","registerInstance","clickEl","createEvent","loadIcon","content","svgTitle","setSvgTitle","removeSvgTitle","_this","has","e","preventDefault","emit","code","_this2","iconProps","clickable","onClick","handleClick","onKeyPress","handleKeyPress","tabindex","role","h","Host","class","Object","assign","style"],"sourceRoot":""}